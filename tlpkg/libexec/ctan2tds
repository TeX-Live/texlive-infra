#!/usr/bin/env perl
# $Id$
# Public domain.
# Originally written by Sebastian Rahtz.  Comments to tex-live@tug.org.
#
# A script to TL-install a package from CTAN.
# For the higher-level invocation that is what should be used in practice,
# see tlpkg/bin/ctan2tl.
#
# Its default actions, given a "raw" directory copied from CTAN (the
# current directory on invocation), are, approximately,
#  1. copy everything to texmf-dist/doc/<format>/<package>
#  2. run any .ins files
#  3. run any .mf files through mktextfm
#  4. move .sty/.cls etc files to texmf-dist/tex/<format>/<package>
#  5. move other files to appropriate places in the hierarchy.
#
# All the patterns for what to move or run can be overridden per-package.

BEGIN {
  ($mydir = $0) =~ s,/[^/]*$,,;
  unshift (@INC, "$mydir/../libexec");
}

use Getopt::Long;
use File::Basename;
use Cwd;
# not ready use warnings; # not ready for use strict either
use vars qw($opt_ctan_dir);

# programs used; must all be on the path
$MV = "mv -v";
$CP = "cp -pv";
$RM = "rm -vf";  # -v to get feedback via GNU rm on removals
$MAKEINFO = "makeinfo";
$INSTALL = "install -D -m 664";
$RMDIR_EMPTY = "find -type d -empty -delete -print"; # GNU find for simplicity

$| = 1;
select ((select (STDERR), $| = 1)[0]);

$RAW_DIR = getcwd();     # where we start from (raw dir)
chdir "../tmp.cooked" || die "chdir(../tmp.cooked) failed: $!";
$COOKED_TOP = getcwd();  # output (cooked) directory paren
chdir $RAW_DIR || die "chdir($RAW_DIR) failed: $!";  # back to raw

# the Master, Build, and CTAN trees.
chomp ($Master = `cd $mydir/../.. && pwd`);
chomp ($Build = `cd $Master/../Build/source && pwd`);
chomp (my $ctan_root = `tlpkginfo --ctan-root`);

# 
# packages to treat entirely on their own, or not at all.
# the code here is evaluated by Perl, so special packages
# can have their own subroutine.
#
%special = (
 'ANUfinalexam',"die 'skipping, use anufinalexam'",
 'AkkTeX',      "die 'skipping, use akktex'",
 'Asana-Math',  "die 'skipping, use asana-math'",
 'CJK',         "die 'skipping, use cjk'",
 'Einfuehrung', "die 'skipping, use einfuehrung'",
 'ESIEEcv',	"die 'skipping, use esieecv'",
 'FAQ-en',      "die 'skipping, obsolete'",
 'FiXme',       "die 'skipping, use fixme'",
 'GS1',         "die 'skipping, use gs1'",
 'GuIT',        "die 'skipping, use guitlogo'",
 'HA-prosper',  "die 'skipping, use ha-prosper'",
 'IEEEconf',    "die 'skipping, use ieeeconf'",
 'IEEEtran',    "die 'skipping, use ieeetran'",
 'LaTeX-FAQ-francaise',	"die 'skipping, use faq-fr'",
 'LingTrees',   "die 'skipping, requires python'",
 'MemoirChapStyles', "die 'skipping, use memoirchapterstyles'",
 'SIstyle',     "die 'skipping, use sistyle'",
 'SIunits',     "die 'skipping, use siunits'",
 'SQLTeX',      "die 'skipping, see sqltex'",
 'Tabbing',     "die 'skipping, use tabbing'",
 'TOPtesi',     "die 'skipping, use toptesi'",
 'TeXemplar',   "die 'skipping, use texemplar'",
 'TeXmacs',     "die 'skipping, binary'",
 'Type1fonts',	"die 'skipping, use fontinstallationguide'",
 '2up',		"&MAKEflatten",
 'a4',          "die 'skipping, just a pointer to ntgclass'",
 'aastex',      "&MAKEflatten",
 'accenti',     "die 'skipping, use bosisio'",
 'acmtrans',    "die 'skipping, nonfree (nosell) license'",
 'acroflex',    "die 'skipping, per author (dps) request'",
 'acromake',    "die 'skipping, nonfree (nomodify) license'",
 'acrotex',     "die 'skipping, per author (dps) request'",
 'acrotex-js',	"die 'skipping, requires adobe'",
 'adforn',	"&MAKEflatten",
 'adfsymbols',	"&MAKEflatten",
 'adobe-euro',  "die 'skipping, support for nonfree fonts'",
 'adobecaslon', "die 'skipping, support for nonfree fonts'",
 'adobeornaments', "die 'skipping, support for nonfree fonts'",
 'adrlist',     "die 'skipping, noinfo license'",
 'ae',          "&MAKEae",
 'aeb-minitoc', "die 'skipping, per author (dps) request'",
 'aeb_mlink',   "die 'skipping, per author (dps) request'",
 'aeb_mobile',  "die 'skipping, per author (dps) request'",
 'aeb_pro',     "die 'skipping, per author (dps) request'",
 'aeb_tilebg',  "die 'skipping, per author (dps) request'",
 'aecc',        "die 'skipping, obsolete on CTAN'",
 'aesupp',      "&MAKEflatten",
 'afparticle',  "die 'skipping, obsolete on CTAN'",
 'akktex',      "&MAKEflatten",
 'alatex',      "die 'skipping, 1995 LaTeX generalization'",
 'alfaslabone',	"&MAKEflatten",
 'algolrevived',"&MAKEflatten",
 'algorithm2e', "&MAKEflatten",
 'algorithmicx',"&MAKEnosymlinks",
 'alkalami',    "&MAKEflatten",
 'allrunes',    "die 'make all fr* tfms, then back to &MAKEflatten'",
 'almfixed',	"&MAKEflatten",
 'alphabib',    "die 'skipping, shell script, and no doc source?'",
 'alterqcm',    "&MAKEaqcm",
 'ametsoc',     "die 'skipping, obsolete on ctan'",
 'ams',         "die 'skipping, use amscls for ams*.bst'",
 'ams-cd',      "die 'skipping, latex 2.09 and never in tl'",
 'amslatex',    "die 'skipping, use ams subpackages (see tlpkginfo)'",
 'amsldoc-vn',  "&MAKEflatten",
 'amstex',      "&MAKEflatten",
 'analogclock', "die 'skipping, requires system font installation'",
 'annot_pro',   "die 'skipping, per author (dps) request'",
 'anonymouspro',"&MAKEflatten",
 'ans',         "die 'skipping, LaTeX 2.09'",
 'ant-worker-tasks',    "die 'skipping, Java'",
 'antomega',    "die 'skipping, not ready'", #"&MAKEflatten",
 'antp',        "die 'skipping, use poltawski'",
 'antt',        "&MAKEcopy",
 'apacite',     "&MAKEflatten",
 'apalike',     "die 'skipping, merged into bibtex'",
 'apl',         "die 'skipping, noinfo license'",
 'aplweb',	"die 'skipping, ancient program'",
 'ar',          "die 'skipping, use aspectratio'",
 'arabi',       "&MAKEarabi",
 'arabtex',     "&MAKEarabtex",
 'aramaic',     "die 'skipping, use archaic'",
 'aramaic-serto',       "&MAKEflatten",
 'arbeit',      "die 'skipping, latex 2.09 and never in tl'",
 'archaic',     "&MAKEwilson",
 'archivo',	"&MAKEflatten",
 'arev',        "&MAKEcopy",
 'arial',       "die 'skipping, nonfree Aladdin license'",
 'armenian',    "die 'skipping, use armtex'",
 'armymemo',    "die 'skipping, requires arial'",
 'arphic',      "&MAKEarphic",
 'arrayjob',    "die 'skipping, use arrayjobx'",
 'arraymaker',	"die 'skipping, ancient program'",
 'arvo',	"&MAKEflatten",
 'artthreads',	"die 'skipping, per author (dps) request'",
 'ascii',       "die 'skipping, use ascii-font'",
 'ascii-font',  "&MAKEflatten",
 'astron',      "die 'skipping, nonfree license'",
 'asymptote',   "die 'skipping, compiled binary, use tl-update-asymptote, yearly'",
 'atqolive',    "die 'skipping, nonfree font'",
 'auctex',      "die 'skipping, as it is Emacs'",
 'augie',       "&MAKEaugie",
 'aurical',     "&MAKEaurical",
 'aurora',      "die 'skipping, nocommercial license'",
 'auto-pst-pdf-lua', "&MAKEflatten",
 'auto1',       "die 'skipping, nonfree font support'",
 'autolatex',   "die 'skipping, not self-locating'",
 'autotab',     "die 'skipping, noinfo license, latex 2.09'",
 'avantgar',    "die 'skipping, part of urw-base35, frozen'",
 'axodraw',	"die 'skipping, nonfree'",
 'babel-frenchb',  "die 'skipping, use babel-french'",
 'babel-serbianc', "&MAKEflatten",
 'babel-slovene',  "die 'skipping, use babel-slovenian'",
 'babel-spanglish',"die 'skipping, obsolete on CTAN'",
 'babeltools',  "die 'skipping, obsolete'",
 'babyloniannum', "die 'skipping, requires nonfree fonts'",
 'backgammon',  "die 'skipping, nonfree license'",
 'bangtex',     "&MAKEflatten",
 'bardi',       "die 'skipping, nonfree license'",
 'bardiag',     "&MAKEbardiag",
 'bargraph-js',	"die 'skipping, requires acrobat and non-unique filename'",
 'base',        "die 'skipping, what package did you really mean?'",
 'basiclatex-ru',"die 'skipping, no source'",
 'antt',        "&MAKEcopy",
 'baskervillef',"&MAKEflatten",
 'baskervaldx',	"&MAKEflatten",
 'basque',      "die 'skipping, use babel-basque'",
 'bbm-macros',  "&MAKEnosymlinks",
 'bboldx',      "&MAKEflatten",
 'bbs',		"die 'skipping, requires nonfree astron'",
 'bclogo',      "&MAKEflatten",
 'beamer-contrib',      "die 'skipping, use subdirs'",
 'beamer-FUBerlin',	"die 'skipping, use beamer-fuberlin'",
 'beamer-fuberlin',	"&MAKEflatten",
 'beamer-rl',		"&MAKEflatten",
 'beamer2thesis',       "&MAKEflatten",
 'beamerauxtheme',	"&MAKEflatten",
 'beamertheme-edmaths',		"die 'skipping, nonfree images'",
 'beamertheme-metropolis',	"&MAKEflatten",
 'beamertheme-trigon',		"&MAKEflatten",
 'beamertheme-upenn-bc',	"&MAKEflatten",
 'beamerthemecelestia',		"&MAKEflatten",
 'beamerthemeconcrete',		"&MAKEflatten",
 'beamerthemeamurmaple',	"&MAKEflatten",
 'beginlatex',		"die 'skipping, ca.2004'",
 'belleek',             "die 'skipping, need to fix my*.fdd, sorry'",
 'bengali',             "&MAKEflatten",
 'bengali-omega',       "die 'skipping, duplicates odev.sty et al.'",
 'bera',        "&MAKEunzipandflatten",
 'baskervald',	 "die 'skipping, use baskervaldadf'",
 'baskervaldadf',"&MAKEflatten",
 'berenisadf',  "&MAKEflatten",
 'beuron',	"&MAKEflatten",
 'bezos',       "die 'skipping, split into constituent packages'",
 'bfh-ci',	"&MAKEflatten",
 'bg',          "die 'skipping, nonfree license'",
 'bgreek',      "die 'skipping, obsolete on CTAN'",
 'bgteubner',   "&MAKEflatten",
 'bib2ml',      "die 'skipping, no self-locate?, etc.'",
 'bib2xhtml',   "die 'skipping, requires PDF::API2'",
 'biber',       "&MAKEflatten",
 'biber-cygwin',	"die 'skipping, use biber'",
 'biber-freebsd',	"die 'skipping, use biber'",
 'biber-linux',		"die 'skipping, use biber'",
 'biber-linux-aarch64', "die 'skipping, use biber'",
 'biber-linux-musl',	"die 'skipping, use biber'",
 'biber-macos',   	"die 'skipping, use biber'",
 'biber-windows',	"die 'skipping, use biber'",
 'biber-ms',    	"&MAKEflatten",
 'biber-ms-linux',	"die 'skipping, use biber-ms'",
 'biber-ms-macos',	"die 'skipping, use biber-ms'",
 'biber-ms-windows',	"die 'skipping, use biber-ms'",
 'bibextract',  "die 'skipping, hardwires nawk cmd name'",
 'bibfilex',	"die 'skipping, compiled'",
 'biblatex-abnt',       "&MAKEflatten",
 'biblatex-chicago',    "&MAKEflatten",
 'biblatex-contrib',    "die 'skipping, use subdir'",
 'biblatex-cv',		"&MAKEflatten",
 'biblatex-fiwi',       "&MAKEflatten",
 'biblatex-gost',       "&MAKEflatten",
 'biblatex-juradiss',	"&MAKEflatten",
 'biblatex-musuos',     "&MAKEflatten",
 'biblatex-readbbl',    "&MAKEflatten",
 'biblatex-spbasic',    "&MAKEflatten",
 'biblio',      "die 'skipping, too big, see tl-update-auto'",
 'bibtool',     "die 'skipping, requires compilation'",
 'bibtopicprefix', "&MAKEflatten",
 'bibutils',	"die 'skipping, requires compilation'",
 'bickham',     "die 'skipping, support for nonfree font'",
 'bigints',     "&MAKEflatten",
 'biolinum-type1',      "die 'skipping, replaced by libertine'",
 'bitfield',    "die 'skipping, obsolete on CTAN'",
 'blanks',      "die 'skipping, unknown license (and c.1992)'",
 'blockdraw_mp',"&MAKEflatten",
 'blu',         "die 'skipping, too old'",
 'bmstu-iu8',	"&MAKEflatten",
 'bnf-plain',   "die 'skipping, unknown license (and c.1992)'",
 'bookhands',   "&MAKEwilson",
 'bookman',	"die 'skipping, part of urw-base35, frozen'",
 'bookshelf',	"&MAKEflatten",
 'booktabs-fr', "&MAKEnosymlinks",
 'boondox',     "&MAKEcopy",
 'borceux',     "&MAKEborceux",
 'boxedminipage2e', "die 'skipping, replaced by boxedminipage 21apr20'",
 'bridge',      "die 'skipping, latex 2.09'",
 'bridge-pln',	"die 'skipping, noinfo license'",
 'brief-t',	"die 'skipping, old support'",
 'brief_t',	"die 'skipping, old support'",
 'bsheaders',   "die 'skipping, noinfo license, ca.2005, await request'",
 'buctthesis',  "&MAKEflatten",
 'burmese',     "&MAKEflatten",
 'business-research',   "die 'skipping, w32 fonts required'",
 'byzantinemusic',	"die 'skipping, includes non-relocating jar'",
 'c90',         "&MAKEc90",
 'cachepic',    "&MAKEcopy",
 'calendar',    "die 'skipping, nosell license'",
 'calendar_barr',       "die 'skipping, ca.2001, noinfo license'",
 'calxxxx',     "die 'skipping, nomodify license'",
 'camel',       "die 'skipping, nosell license'",
 'cantarell',   "&MAKEcopy",
 'cascadia-code',	"&MAKEflatten",
 'cascover',    "die 'skipping, license unclear, ancient'",
 'casiofont',	"die 'skipping, nonfree font'",
 'cassette',    "die 'skipping, nonfree license'",
 'cassette-shipunov',   "die 'skipping, use shipunov'",
 'cassette209', "die 'skipping, latex 2.09'",
 'casslbl',     "die 'skipping, license unclear, ancient'",
 'catalogue',   "die 'skipping, goes stale too soon'",
 'catdvi',      "die 'skipping, compilation'",
 'catoptions',  "&MAKEflatten",
 'cbe',		"die 'skipping, requires nonfree astron'",
 'cbfonts',     "&MAKEflatten",
 'cc-pl',       "&MAKEflatten",
 'cchess',      "die 'skipping, noinfo license, old'",
 'ccref',	"die 'skipping, ccref.sty clash with computational-complexity'",
 'cdcmd',       "&MAKEflatten",
 'cdcover',     "die 'skipping, use cd-cover'",
 'cellular',    "die 'skipping, noinfo license, author deceased'",
 'cellwise',    "die 'skipping, noinfo license'",
 'cfr-lm',	"&MAKEflatten",
 'changebar',   "&MAKEchangebar",
 'chapterbib',  "die 'skipping, update cite instead'",
 'charter',	"die 'skipping, frozen'",
 'check-parens',"die 'skipping, C++'",
 'chklref',	"&MAKEflatten",
 'chemarrow',   "&MAKEflatten", # check about Arrow.vfb
 'chemstruct',  "die 'skipping, old latex 2.09, never in tl'",
 'chemsym',     "die 'skipping, nonfree'",
 'cheq',        "die 'skipping, nosell license'",
 'chess',       "&MAKEflatten",
 'chet',        "&MAKEflatten",
 'china2e',     "die 'skipping, nosell license and/or too complicated'",
 'chitex',      "die 'skipping, nonfree'",
 'chivo',	"&MAKEflatten",
 'chktex',      "die 'skipping, merge into Build'",
 'chngpage',    "die 'skipping, use changepage'",
 'cid',		"die 'skipping, renamed to cidarticle'",
 'circle',      "die 'skipping, noinfo license, author unfindable'",
 'circuit_macros', "die 'skipping, use circuit-macros'",
 'circuitikz',  "&MAKEcopy",
 'cirth',       "die 'skipping, nosell license'",
 'cjk',         "&MAKEcjk",
 'cjkutils',	"&MAKEcjkutils",
 'cjw',                 "die 'skipping, nosell license'",
 'clara',               "&MAKEflatten",
 'clarendo',            "die 'skipping, nonfree font'",
 'classico',            "die 'skipping, nonfree font'",
 'clock',               "&MAKEflatten",
 'cm',			"die 'skipping, frozen'",
 'cm-lgc',              "&MAKEcmlgc",
 'cm-super',            "&MAKEflatten",
 'cm-tfm',		"die 'skipping, frozen'",
 'cm-unicode',          "&MAKEflatten",
 'cmastro',             "die 'skipping, noinfo license, author unknown'",
 'cmathbb',		"&MAKEflatten",
 'cmbright',            "&MAKEcopy",
 'cmcyr',	        "die 'make all cm*1 tfms, then back to &MAKEflatten'",
 'cmcyralt',            "die 'skipping, noinfo license'",
 'cmexb',		"&MAKEflatten",
 'cmsrb',               "&MAKEflatten",
 'cmupint',		"&MAKEflatten",
 'cnbwp',               "&MAKEflatten",
 'cntdwn',              "die 'skipping, author (dps) request'",
 'cochineal',		"&MAKEflatten",
 'coloremoji',		"die 'skipping, duplicate/too many files, per page?'",
 'comfortaa',           "&MAKEcopy",
 'comicsans',           "die 'skipping, Comic Sans is nonfree'",
 'comment_io',		"die 'skipping, await request i guess'",
 'committee-font',	"die 'skipping, noinfo license, old Knuthian font'",
 'commonunicode',	"&MAKEflatten",
 'compact',             "die 'skipping, nonfree license'",
 'components-of-TeX',	"die 'skipping, use components'",
 'computer-typesetting-using-latex',    "die 'skipping, nosource'",
 'concmath',            "&MAKEnosymlinks",
 'concmath-fonts',      "&MAKEflatten",
 'concrete',            "&MAKEflatten",
 'conferences',         "die 'skipping, container directory'",
 'context-account',     "die 'skipping, obsolete on CTAN'",
 'context-algorithmic', "die 'skipping, obsolete on CTAN'",
 'context-animation',   "&MAKEcopy",
 'context-annotation',  "die 'skipping, obsolete on CTAN'",
 'context-bnf',         "die 'skipping, obsolete on CTAN'",
 'context-calendar-examples',	"&MAKEcopy",
 'context-chat',	"&MAKEcopy",
 'context-chromato',    "die 'skipping, obsolete on CTAN'",
 'context-cmscbf',	"die 'skipping, obsolete on CTAN'",
 'context-cmttbf',	"die 'skipping, obsolete on CTAN'",
 'context-collating-marks',	"&MAKEcopy",
 'context-collatingmarks',	"die 'skipping, use context-collating-marks'",
 'context-companion-fonts',	"die 'skipping, now in context, q.v.'",
 'context-construction-plan',	"die 'skipping, obsolete on CTAN'",
 'context-cyrillicnumbers',	"&MAKEcopy",
 'context-degrade',     "die 'skipping, obsolete on CTAN'",
 'context-enigma',      "die 'skipping, use separate enigma package on CTAN'",
 'context-fancybreak',	"die 'skipping, obsolete on CTAN'",
 'context-filter',      "&MAKEcopy",
 'context-fixme',       "die 'skipping, obsolete per author'",
 'context-french',      "die 'skipping, obsolete on CTAN'",
 'context-fullpage',    "die 'skipping, obsolete on CTAN'",
 'context-games',       "die 'skipping, obsolete per author'",
 'context-gantt',       "die 'skipping, obsolete on CTAN'",
 'context-gnuplot',     "&MAKEcopy",
 'context-handlecsv',	"&MAKEcopy",
 'context-inifile',	"die 'skipping, removed with advent of lmtx'",
 'context-interval-calendar', "die 'skipping, generic filename'",
 'context-layout',	"die 'skipping, obsolete on CTAN'",
 'context-letter',      "&MAKEcopy",
 'context-lettrine',    "die 'skipping, obsolete per author'",
 'context-lilypond',    "die 'skipping, obsolete per author'",
 'context-lua-widow-control',	  "die 'skipping, use separate lua-widow-control package on CTAN'",
 'context-lucida-bright-support', "die 'skipping, nonfree font'",
 'context-mathsets',    "&MAKEcopy",
 'context-pocketdiary', "&MAKEcopy",
 'context-rst',         "die 'skipping, obsolete on CTAN'",
 'context-ruby',        "die 'skipping, obsolete on CTAN'",
 'context-sgf',         "die 'skipping, obsolete per author'",
 'context-simplefonts', "die 'skipping, obsolete on CTAN'",
 'context-simpleslides',"&MAKEcopy",
 'context-squares',	"&MAKEcopy",
 'context-sudoku',	"&MAKEcopy",
 'context-taspresent',  "&MAKEcopy",
 'context-texlive',     "die 'skipping, merged into context-legacy, q.v.'",
 'context-title',	"die 'skipping, obsolete on CTAN'",
 'context-top-ten',     "die 'skipping, overhaul needed per author'",
 'context-transliterator',      "&MAKEcopy",
 'context-typearea',    "die 'skipping, obsolete on CTAN'",
 'context-typescripts', "&MAKEcopy",
 'context-urwgaramond', "die 'skipping, nonfree font'",
 'context-urwgothic',   "die 'skipping, nonfree font'",
 'context-vim',         "&MAKEcopy",
 'context-visualcounter',	"&MAKEcopy",
 'cookybooky',  "die 'skipping, requires nonfree emerald fonts'",
 'copac-clean', "die 'skipping, snobol? await request'",
 'coptic',      "die 'skipping, replaced by cbcoptic'",
 'copypaste',   "die 'skipping, replaced by clipboard'",
 'corelpak',	"die 'skipping, nonfree fonts'",
 'corelpak-contrib',	"die 'skipping, nonfree fonts'",
 'coronet',     	"die 'skipping, nonfree font'",
 'correctmathalign',	"&MAKEflatten",
 'corridx',     "die 'skipping, Pascal source'",
 'countriesofeurope', "&MAKEflatten",
 'courier',	"die 'skipping, nonfree IBM Courier font'",
 'courierten',	"&MAKEflatten",
 'cpssp',       "die 'skipping, requires python'",
 'create-struktex',     "die 'sorry, investigate self-locating?'",
 'croatian',    "die 'skipping, nonfree (nomodify) license'",
 'crosstex',    "die 'sorry, investigate self-locating?'",
 'csbulletin',	"&MAKEflatten",
 'csfonts',     "die 'skipping, use cs'",
 'csfonts-t1',  "die 'skipping, use cs'",
 'cspsfonts',   "die 'skipping, use cs'",
 'csv2latex',   "die 'skipping, mac only?, ruby + applescript'",
 'csvtolatex',  "die 'skipping, w32 only, visual basic'",
 'csvtools',    "die 'skipping, replaced by datatools'",
 'ctable',      "&MAKEflatten",
 'ctan-bibdata',"die 'skipping, updated daily'",
 'ctantools',   "die 'skipping, should not usurp the cmd name ctan'",
 'ctib',        "&MAKEflatten",
 'culmus',	"&MAKEflatten",
 'cuprum',      "&MAKEflatten",
 'cursor',      "die 'skipping, no known license, very old and small'",
 'cvsty',       "die 'skipping, ca.2004, noinfo license'",
 'cweb',        "die 'skipping, programs'",
 'cwpuzzle',    "die 'skipping, in crossword package'",
 'cyklop',      "&MAKEcopy",
 'cyrillic-modern',   "&MAKEflatten",
 'dantelogo',   "&MAKEflatten",
 'dataref',     "&MAKEflatten",
 'datatooltk',  "die 'skipping, Java installation'",
 'datepicker-pro',	"die 'skipping, per author (dpstory) request'",
 'datetime2-contrib',	"die 'skipping, use its subdirectories'",
 'dco',		"die 'skipping, obsolete DC fonts with oldstyle numerals'",
 'dejavu',      "&MAKEflatten",
 'dejavu-math', "&MAKEflatten",
 'dejavu-otf',  "&MAKEflatten",
 'deleq',       "die 'skipping, nosell license'",
 'democodetools',    "&MAKEflatten",
 'denisbdoc',   "&MAKEflatten",
 'deproc',      "die 'skipping, for latex 2.09'",
 'designcon',   "die 'skipping, requires nonfree fonts'",
 'detlev-cm',	"die 'skipping, use beamertheme-detlev-cm'",
 'devanagari',  "die 'skipping, use velthuis'",
 'devanagari-omega', "die 'skipping, author unknown, license unknown'",
 'devanagr',    "&MAKEdevanagr",
 'devnag',	"die 'skipping, use velthuis'",
 'dfgproposal', "die 'skipping, replaced by proposal'",
 'diagmac',     "die 'skipping, for latex 2.09 and we have diagmac2'",
 'diagnose',    "&MAKEflatten",
 'diagrams',    "die 'skipping, use specific package name'",
 'diagxy',      "die 'skipping, use barr'",
 'dictsym',     "&MAKEunzipandflatten",
 'digestif',    "&MAKEflatten",
 'digicap-pro',	"die 'skipping, requires adobe (dps)'",
 'disser',      "&MAKEdisser",
 'divine',      "die 'skipping, requires nonfree font'",
 'dktools',     "die 'skipping, needs compilation, etc.'",
 'dmfonts',     "die 'skipping, needs work'",
 'dnp',         "&MAKEdnp",
 'do-it-yourself-tex', "die 'skipping, huge documentation package'",
 'docassembly',	"die 'skipping, requires adobe (dps)'",
 'dogma',       "die 'skipping, requires nonfree font'",
 'domaincoloring' => '&MAKEflatten',
 'dot2tex',     "die 'skipping, only useful with supporting python setup'",
 'domitian',	"&MAKEflatten",
 'dozenal',	"&MAKEflatten",
 'dps',         "die 'skipping, requires acrotex'",
 'draftmark',   "die 'skipping, nosell license'",
 'drm',		"&MAKEflatten",
 'droid',       "&MAKEcopy",
 'dropping',    "die 'skipping, nosell license'",
 'dsserif',	"&MAKEflatten",
 'dtxtut',      "&setup",  # straight copy
 'duplicat',    "die 'skipping, use piff'",
 'dutchcal',    "&MAKEcopy",
 'dvipdfmx-def',"die 'skipping, replaced by graphics-def'",
 'dvipng',	"die 'skipping, compile in Build tree'",
 'dvisirule',	"die 'skipping, requires compilation, await request'",
 'dvisun',	"die 'skipping, ancient program'",
 'dvisvgm-def', "die 'skipping, replaced by graphics-def'",
 'dvivue',	"die 'skipping, windows binary'",
 'easy',        "&MAKEeasy",
 'easybook',    "&MAKEflatten",
 'easylatex',   "die 'skipping, complicated perl modules, sorry'",
 'ebib',        "die 'skipping, as it is Emacs'",
 'ebong',       "&MAKEflatten",
 'ecards',      "die 'skipping, per author request'",
 'ecards',      "die 'skipping, per author request'",
 'ecc',         "&MAKEflatten",
 'ecgdraw',	"die 'skipping, need new CTAN update to sync (2017)'",
 'eclbip',      "die 'skipping, use ecltree'",
 'eco',         "&MAKEeco",
 'economic',    "&MAKEnosymlinks",
 'eczar',	"&MAKEflatten",
 'edmac',       "die 'skipping, needs work (unzip)'",
 'ednotes',     "die 'skipping, use lineno'",
 'eforms',      "die 'skipping, per author (dps) request'",
 'efrench',     "die 'skipping, new bases and more, sorry'",
 'ebgaramond-maths', "&MAKEflatten",
 'eiad',        "&MAKEflatten",
 'einfuehrung', "die 'skipping, author request'",
 'einfuehrung2',"die 'skipping, author request'",
 'eitl',        "die 'skipping, distro-specific scripts, etc.'",
 'ektype-tanka',"&MAKEflatten",
 'electrum',    "die 'skipping, use electrumadf'",
 'electrumadf',	"&MAKEflatten",
 'eledpar',     "die 'skipping, use eledmac'",
 'elegantbook', "die 'skipping, obsolete per author'",
 'elegantnote', "die 'skipping, obsolete per author'",
 'elegantpaper',"die 'skipping, obsolete per author'",
 'elhyphen',    "die 'skipping, incorporated in hyph-utf8'",
 'elpres',	"&MAKEflatten",
 'elsarticle',  "&MAKEflatten",
 'em',          "die 'skipping, european modern fonts too old, not packaged'",
 'emerald',     "die 'skipping, nonfree fonts'",
 'empheq',      "die 'skipping, use mh'",
 'enpassant',   "die 'skipping, license unknown'",
 'epic',        "die 'skipping, license unknown and replaced by eepic'",
 'epigrafica',  "&MAKEflatten",
 'epiolmec',    "&MAKEflatten",
 'epix',        "die 'skipping, needs C++'",
 'epspdf',      "die 'skipping, siep does it'", #"&MAKEflatten",
 'epspdf-setup',"die 'skipping, siep does it'",
 'epyt',	"die 'renamed to beamertheme-epyt'",
 'eq-fetchbbl',	"die 'skipping, requires fetchbibpes'",
 'eq-save',	"die 'skipping, requires acrotex'",
 'eq2db',	"die 'skipping, author request (and nonfree requirements)'",
 'eqexam',      "die 'skipping, per author (dps) request'",
 'eqmark',      "die 'skipping, latex 2.09, was never in TL'",
 'erewhon',	"&MAKEflatten",
 'escapetext',	"die 'skipping, nice but old python, await request'",
 'eskdx',       "&MAKEeskdx",
 'esstix',      "&MAKEcopy",
 'esvect',      "&MAKEflatten",
 'etbb',	"&MAKEflatten",
 'ethiop',      "&MAKEflatten",
 'euclide',     "&MAKEpst",
 'eukleides',   "die 'skipping, requires compilation'",
 'eulerpx',	"&MAKEflatten",
 'eulervm',     "&MAKEcopy",
 'euproposal',  "die 'skipping, replaced by proposal'",
 'eurofont',    "die 'skipping, support for nonfree fonts or obsolete'",
 'europs',      "die 'skipping, support for nonfree fonts'",
 'eurosans',    "die 'skipping, support for nonfree fonts'",
 'eurosym',     "&MAKEflatten",
 'excel2latex', "die 'skipping, only supports excel?'",
 'expkv',	"die 'skipping, replaced by expkv-bundle'",
 'expl3',       "die 'skipping, now l3kernel, etc.'",
 'expltools',   "&MAKEflatten",
 'expressgx',   "&MAKEexpressg",
 'extractpdfmark', "die 'skipping, compiled program'",
 'fac',         "die 'skipping, noinfo license'",
 'famt',        "die 'skipping, noinfo license'",
 'fancyvrb',    "&MAKEflatten",
 'faq',         "die 'skipping, use FAQ-en'",
 'faq-en',      "die 'skipping, use FAQ-en'",
 'fax',         "die 'skipping, nosell license'",
 'fbox',	"&MAKEflatten",
 'fc',          "&MAKEflatten",
 'fc-arith',    "die 'skipping, per author request'",
 'fc_arith',    "die 'skipping, per author request'",
 'fetamont',    "&MAKEflatten",
 'fetchbibpes',	"die 'skipping, generic runtime names'",
 'feynmf',      "&MAKEfeynmf",
 'fibeamer',	"die 'skipping, obsolete per author/ctan'",
 'findhyph',    "&MAKEflatten",
 'firamath-otf',"&MAKEflatten",
 'firefox-ctan-plugins', "die 'skipping, old support'",
 'firefox_ctan_plugins', "die 'skipping, old support'",
 'first-packages',  "die 'skipping, subsumed into latex-doc-ptr'",
 'firststeps',  "die 'skipping, noinfo license, 1999 book examples'",
 'fitr',        "die 'skipping, per author (dpstory) request'",
 'fixocgx',     "die 'skipping, replaced by ocgx2'",
 'fldigigal',   "die 'skipping, per author request'",
 'flowframtk',	"die 'skipping, requires install step'",
 'fltpage',     "die 'skipping, unclear license'",
 'fnlineno',    "die 'skipping, use lineno'",
 'foiltex',     "die 'skipping, nosell license'",
 'font-change', "&MAKEflatten",
 'fontawesome', "&MAKEflatten",
 'fontawesome5',"&MAKEflatten",
 'fontawesome6',"&MAKEflatten",
 'fonteinf',	"die 'skipping, obsolete + nosource'",
 'fontinst',    "&MAKEfontinst",
 'fontloader-luaotfload', "die 'skipping, obsolete 29sep18'",
 'fontname',    "die 'skipping, done through tl-update-auto'",
 'fontsetup-nonfree',	"die 'skipping, support for nonfree fonts'",
 'fontools',    	"&MAKEflatten",
 'fonts-arundina',	"die 'skipping, depends on uninstalled thailatex'",
 'fonts-churchslavonic',"&MAKEflatten",
 'footnpag',    "&MAKEfootnpag",
 'formula',     "die 'skipping, requires scripts, very old'",
 'fourier',     "&MAKEflatten",
 'fourier-gut', "die 'skipping, use fourier'",
 'fourier-GUT', "die 'skipping, use fourier'",
 'fp',          "&MAKEfp",
 'fpl',         "&MAKEflatten",
 'fraktur',     "die 'skipping, replaced by yfonts'",
 'free-math-font-survey', "die 'skipping, noinfo license'",
 'french',      "die 'skipping, use babel-french'",
 'frenchb',     "die 'skipping, use babel-french'",
 'frenchle',    "die 'skipping, replaced by e-french'",
 'frenchpro',   "die 'skipping, complicated format, filename conflicts'",
 'fribidixetex',"die 'skipping, compiled, await request, 2016'",
 'fribrief',    "die 'skipping, nonfree license'",
 'fullpict',    "die 'skipping, noinfo license'",
 'fundus',      "die 'skipping, use fundus-* names'",
 'fundus-cmoutlines',   "die 'skipping, noinfo license of fonts'",
 'fundus-la',           "die 'skipping, noinfo license of fonts'",
 'fundus-pvscript',     "die 'skipping, noinfo license of fonts'",
 'fundus-startrek',     "die 'skipping, noinfo license of fonts'",
 'fundus-twcal',        "die 'skipping, nocommercial? license of fonts'",
 'fundus-va',           "die 'skipping, noinfo license of fonts'",
 'futhark',     "die 'skipping, nonfree license'",
 'futurans',    "die 'skipping, requires nonfree font'",
 'galley',      "die 'skipping, will be included in xpackages later'",
 'gandhi',      "die 'skipping, nonfree font'",
 'gapfill',     "die 'skipping, separate macosx scripts are too painful'",
 'garamond',    "die 'skipping, nonfree font'",
 'garamondx',   "die 'skipping, nonfree font'",
 'garuda-c90',  "&MAKEgaruda_c90",
 'gatech-thesis',"die 'skipping, obsolete on CTAN'",
 'gene',        "die 'skipping, complicated, some have sources, sorry'",
 'gelasiomath', "&MAKEflatten",
 'genmisc',     "die 'skipping, split into separate packages'",
 'gentium',     "die 'skipping, use gentium-sil'",
 'gentium-otf', "&MAKEflatten",
 'gentium-tug', "die 'skipping, use gentium-sil'",
 'gentl-gr',    "die 'skipping, nonfree license'",
 'geometry-de', "die 'skipping, part of geometry as of 2jan20'",
 'geomsty',     "die 'skipping, nonfree license'",
 'georgian',	"die 'skipping, bitstream font licensing missing, complicated'",
 'georgian',    "die 'skipping, babel and other naming problems'",
 'germbib',     "&MAKEgermbib",
 'getargs',	"die 'skipping, obsolete on CTAN'",
 'getnonfreefonts', "die 'skipping, requires nonfree fonts'",
 'gfs',		"die 'skipping, use individual font names'",
 'gfsartemisia',"&MAKEflatten",
 'gfsbaskerville',"&MAKEflatten",
 'gfsbodoni',   "&MAKEflatten",
 'gfscomplutum',"&MAKEflatten",
 'gfsdidot',    "&MAKEflatten",
 'gfsneohellenic', "&MAKEflatten",
 'gfsporson',   "&MAKEflatten",
 'gfssolomos',  "&MAKEflatten",
 'ghostgum',    "die 'skipping, nonfree'",
 'gladtex',	"die 'skipping, requires python setup.py?'",
 'glhyph',      "die 'skipping, merged into hyph-utf8'",
 'glossary',    "die 'skipping, replaced by glossaries'",
 'glosstex',    "die 'skipping, requires compilation'",
 'gmeometric',  "die 'skipping, obsolete'",
 'gnu-freefont',"&MAKEgnu_freefont",
 'go',          "&MAKEflatten",
 'gothic',      "&MAKEflatten",
 'gradback',    "die 'skipping, ca.2002, await request'",
 'graphicp',    "die 'skipping, experimental ca.2003'",
 'graphicxsp',  "die 'skipping, requires adobe distiller'",
 'greekinfo3',	"die 'skipping, no license info, no source for samples pdf'",
 'grnumalt',    "die 'skipping, nonfree'",
 'grtimes',     "die 'skipping, requires nonfree monotype times'",
 'grverb',      "die 'skipping, nonfree restriction on Crete U. Press'",
 'gudea',	"&MAKEflatten",
 'guide-latex-fr', "die 'skipping, nonfree cc-nc-nd'",
 'guitbeamer',  "die 'skipping, nonfree'",
 'gurps',	"die 'skipping, Steve Jackson Games restrictions -> nonfree'",
 'gutenberg',	"die 'skipping, user group pdfs'",
 'ha-prosper',  '&MAKEhaprosper',
 'hacm',        "&MAKEflatten",
 'harvardkyoto',"die 'skipping, use xetex-devanagari'",
 'he-le-na',    "die 'skipping, nonfree (shareware) license'",
 'helmholtz-ellis-ji-notation', "&MAKEflatten",
 'helvetic',	"die 'skipping, part of urw-base35, frozen'",
 'heros-otf',	"&MAKEflatten",
 'hershey',	"die 'skipping, ancient font'",
 'heuristica',	"&MAKEflatten",
 'hexdump',     "die 'skipping, nonfree (probably) license'",
 'hfbright',    "&MAKEflatten",
 'hge',         "die 'skipping, looks nonfree'",
 'hieroglf',	"die 'skipping, use archaic'",
 'highlight',   "die 'skipping, complicated compilation'",
 'hilowres',    "die 'skipping, nonfree'",
 'hindmadurai',	"&MAKEflatten",
 'historische-zeitschrift', "&MAKEflatten",
 'hitex-def',   "die 'skipping, martin.r does from build tree'",
 'hittype',	"die 'skipping, nosell'",
 'hm-ftx',      "die 'skipping, use persian-hm-ftx'",
 'hm-xbs',      "die 'skipping, use persian-hm-xbs'",
 'html2latex',  "die 'skipping, no self-locating of Perl modules'",
 'holtxdoc',    "die 'skipping, use oberdiek'",
 'hsindex',	"die 'skipping, haskell compilation'",
 'hvarabic',	"&MAKEflatten",
 'hvextern',	"&MAKEflatten",
 'hvfloat',     "&MAKEflatten",
 'hvindex',     "&MAKEflatten",
 'hvlogos',	"&MAKEflatten",
 'hvpygmentex',	"&MAKEflatten",
 'hvqrurl',     "&MAKEflatten",
 'hybrid-latex',  "die 'skipping, no self-locating of Python modules'",
 'hyphen-german', "die 'skipping, part of hyph-utf8'",
 'hyphen-spanish',"die 'skipping, part of hyph-utf8'",
 'ibygrk',      "&MAKEflatten",
 'icon-appr',   "die 'skipping, per author (dps) request'",
 'ieeetran',    "&MAKEieeetran",
 'ifacmtg',     "die 'skipping, nonfree license'",
 'ifetex',      "die 'skipping, use iftex'",
 'ifluatex',    "die 'skipping, use iftex'",
 'ifmslide',    "&MAKEflatten",
 'ifpdf',       "die 'skipping, use ifpdf'",
 'ifxetex',    "die 'skipping, use iftex'",
 'imfellflowers',	"die 'skipping, nonfree'",
 'imprintmtshadow',	"die 'skipping, nonfree font support'",
 'induni-om',   "die 'skipping, for omega, use of pua?'",
 'indxcite',    "die 'skipping, too old, license suboptimal'",
 'inriafonts',  "&MAKEflatten",
 'interactiveanimation',"die 'skipping, acrobat only'",
 'interactiveplot',	"die 'skipping, acrobat only'",
 'inter',	"&MAKEflatten",
 'intex',       "die 'skipping, wants autoconfery'",
 'invoice',     "&MAKEflatten",
 'ipa',         "die 'skipping, part of wsuipa'",
 'ipaex-type1', "&MAKEflatten",
 'isopt',	"&MAKEflatten",
 'isostds',     "die 'skipping, use iso or iso10303'",
 'itrans',      "die 'skipping, no longer maintained (maybe you want xetex-itrans?), too complex'",
 'itrans-processor',    "die 'skipping, no longer maintained, too complex'",
 'iwhdp',       "die 'skipping, obsolete on CTAN'",
 'iwona',       "&MAKEcopy",
 'jadetex',     "&MAKEjadetex",
 'japanese',    "die 'skipping, now babel-japanese'",
 'japanese-otf',"&MAKEjapaneseotf",
 'japanese-otf-uptex',	"die 'skipping, merged into japanese-otf'",
 'jas99',	"die 'skipping, obsolete on CTAN, use jas99m'",
 'jasthesis',   "die 'skipping, noinfo license'",
 'javadoc',     "die 'skipping, requires java and no source'",
 'javascripthttp',"die 'skipping, requires acrotex'",
 'javatex',     "die 'skipping, ca.1998, not integrated'",
 'jeopardy',    "die 'skipping, requires dpstory packages'",
 'jetbrainsmono-otf',"&MAKEflatten",
 'jeuxcartes',	"&MAKEflatten",
 'jflap2tikz',  "die 'skipping, requires java'",
 'jfontmaps',   "die 'skipping, use ptex-fontmaps'",
 'jhep',        "die 'skipping, probably nonfree license'",
 'jj_game',     "die 'skipping, requires acrotex'",
 'jknappen',    "die 'skipping, use jknapltx'",
 'jkthesis',    "die 'skipping, probably nonfree license, ca.2002'",
 'jlreq-deluxe',"&MAKEflatten",
 'jmakepdfx',   "die 'skipping, non-self-locating java?'",
 'joy-of-tex',	"die 'skipping, nonfree'",
 'jpgfdraw',    "die 'skipping, replaced by flowframtk'",
 'jpicedt',	"die 'skipping, ancient program'",
 'juliamono', "&MAKEflatten",
 'kalendar',    "die 'skipping, noinfo license'",
 'kbordermatrix',"die 'skipping, noinfo license'",
 'kd',          "die 'skipping, too old, too complicated, sorry'",
 'kdgcoursetext',       "die 'skipping, confused/nonfree license'",
 'kdgcoursetext',       "die 'skipping, replaced by kdgdocs'",
 'kdgreek',     "die 'skipping, nonfree license'",
 'kelly',       "die 'skipping, obsoleted by cbgreek?'",
 'kerkis',      "&MAKEflatten",
 'keyreader',   "&MAKEmv_doctex",
 'keys3',       "die 'skipping, merged into expl3'",
 'khatalmaqala',"&MAKEflatten",
 'knit',	"die 'skipping, ancient program'",
 'knitting',    "&MAKEflatten",
 'knuth',	"die 'skipping, use knuth-pdf, knuth-errata, etc.'",
 'koi8',        "die 'skipping, ca.1996, noinfo license'",
 'koma-script-SFS',     "die 'skipping, use koma-script-sfs'",
 'koma-script-examples-3', "die 'skipping, just have koma-script-examples'",
 'koma-script-examples-4', "die 'skipping, just have koma-script-examples'",
 'koma-script-obsolete',   "die 'skipping, obsolete on CTAN'",
 'kotex-plain',		"&MAKEflatten",
 'kpfonts',		"&MAKEflatten",
 'kpfonts-otf',		"&MAKEflatten",
 'ktv-texdata',         "&MAKEflatten",
 'kurier',              "&MAKEcopy",
 'kuvio',               "die 'skipping, nonfree license'",
 'l2a',                 "die 'skipping, another old detex, needs compilation'",
 'l2tabu-it',           "die 'skipping, use l2tabu-italian'",
 'labelcas',		"die 'skipping, obsolete as of 17apr16'",
 'labtable',            "die 'skipping, nonfree w32 application'",
 'lacheck',		"die 'skipping, our own binary'",
 'lamstex',             "die 'skipping, old'",
 'lamstex-index',       "die 'skipping, old'",
 'langsci-affiliations',"die 'skipping, part of langsci'",
 'latex-base',  	"die 'skipping, use latex'",
 'latex-bib-ex',        "die 'skipping, author request'",
 'latex-bib2-ex',       "die 'skipping, author request'",
 'latex-dependency-grapher', "die 'skipping, java'",
 'latex-dev',		"die 'skipping, use latex-base-dev (and more)'",
 'latex-doc',	  	"die 'skipping, use latex'",
 'latex-doc-dev',	"die 'skipping, use latex-base-dev'",
 'latex-essential',     "die 'skipping, nonfree'",
 'latex-firstaid',      "die 'skipping, use firstaid'",
 'latex-fonts',         "&MAKEflatten",
 'latex-graphics',	"die 'skipping, use graphics'",
 'latex-help-texinfo',  "die 'skipping, use latex2e-help-texinfo'",
 'latex-indexer',  	"die 'skipping, Java, no wrapper'",
 'latex-pro-pragmatiky',    "die 'skipping, no source'",
 'latex-referenz',	    "die 'skipping, author request'",
 'latex-sciences-humaines', "die 'skipping, no source'",
 'latex-tabellen',          "die 'skipping, author request'",
 'latex-tds',		    "die 'skipping, obsolete, see knuth and pwebmac'",
 'latex-tipps-und-tricks',  "die 'skipping, noinfo license'",
 'latex2html',  "die 'skipping, not self-locating, needs apache changes'",
 'latex2pdf',   "die 'skipping, too bare-bones'",
 'latex2rtf',   "die 'skipping, no configure or requests, etc.'",
 'latex3',      "die 'skipping, use xpackages'",
 'latex_maker',         "die 'skipping, ruby'",
 'latex_maker', "die 'skipping, we must not usurp two-character cmd name'",
 'latexalpha2',	"die 'skipping, only for mathematica'",
 'latexdb',     "die 'skipping, needs sql, etc.'",
 'latexmp',     "&MAKEflatten",
 'latexscreenshooter', "die 'skipping, java, no wrapper, no man page, ?no doc source'",
 'latin',	"die 'skipping, obsolete on ctan 30apr25'",
 'lato',        "&MAKEcopy",
 'lato-math',	"die 'skipping, as of 12may24 lete-sans-math'",
 'layaureo',    "&MAKEflatten",
 'lcircuit',    "die 'skipping, license unknown, too old to investigate'",
 'leawood',     "&MAKEflatten",
 'lecturer',    "&MAKEflatten",
 'ledmpar',     "die 'skipping, use ledmac'",
 'ledpar',      "die 'skipping, use ledmac'",
 'leiletter',	"die 'skipping, nonfree font (minion)'",
 'letter1',     "die 'skipping, ca.1989, never in TL, await request'",
 'lettrgth',    "die 'skipping, nonfree font'",
 'levy-font',   "die 'skipping, use levy'",
 'levy-latex',  "die 'skipping, nosell per old latex'",
 'lexend',	"&MAKEflatten",
 'lexitex',     "die 'skipping, use camel'",
 'lfb',         "&MAKElfb",
 'lgraph',      "die 'skipping, obsolete'",
 'lgrind',	"die 'skipping, compiled program and old'",
 'lgrx',        "die 'skipping, obsolete per author'",
 'lh',          "&MAKElh",
 'lhfonts',     "die 'skipping, use lh'",
 'libertine-legacy',    "die 'skipping, replaced by libertine'",
 'libertine-type1',     "die 'skipping, replaced by libertine'",
 'libertineotf',        "die 'skipping, replaced by libertine'",
 'libertinus',		"&MAKEflatten",
 'libertinus-fonts',	"&MAKEflatten",
 'libertinus-otf',	"&MAKEflatten",
 'libertinust1math',	"&MAKEflatten",
 'librarian',   "&MAKEflatten",
 'libris',      "&MAKEflatten",
 'lifia-th',    "die 'skipping, ?'",
 'linearA',     "die 'skipping, use lineara'",
 'LinearA',     "die 'skipping, use lineara'",
 'lineno',      "&MAKEflatten",
 'linenoamsmath',	"skipping, obsolete on CTAN",
 'lintex',      "die 'skipping, compiled program'",
 'list',        "die 'skipping, part of knuth-local'",
 'listofanswers',       "die 'skipping, noinfo license'",
 'litebook',	"die 'skipping, replaced by whatsnote'",
 'litesolution',"die 'skipping, replaced by whatsnote'",
 'literat',     "&MAKEliterat",
 'lithuanian',  "&MAKEflatten",
 'lkort',       "die 'skipping, obsolete'",
 'lm',          "&MAKEcopy",
 'lm-math',     "&MAKEflatten",
 'lmacs',       "die 'skipping, author request'",
 'lms',         "die 'skipping, nonfree license'",
 'logfilter',   "die 'skipping, nosource (and java)'",
 'loggates',    "die 'skipping, LaTeX 2.09 and never in TL'",
 'logic',       "die 'skipping, noinfo license, ancient'",
 'logix',       "&MAKEflatten",
 'loops',       "&MAKEflatten",
 'lsabon',      "die 'skipping, nonfree font support'",
 'lshort',      "die 'skipping, use lshort-english (or whatever language)'",
 'lshort-bulgarian',    '&MAKElshort',
 'lshort-chinese',      '&MAKElshort',
 'lshort-english',      '&MAKElshort',
 'lshort-finnish',      '&MAKElshort',
 'lshort-korean',       '&MAKElshort',
 'lshort-mongol',       '&MAKElshort',
 'lshort-mongolian',    "die 'skipping, replaced by lshort-mongol'",
 'lshort-persian',      '&MAKElshort',
 'lshort-portuguese',   '&MAKElshort',
 'lshort-slovenian',    '&MAKElshort',
 'lshort-turkish',      '&MAKElshort',
 'lshort-vietnamese',   '&MAKElshort',
 'lshort-zh-cn',        "die 'skipping, use lshort-chinese'",
 'ltnews',              "die 'skipping, nonfree doc'",
 'ltt',                 "&MAKEltt",
 'ltx2mathml',		"die 'skipping, compiled C++'",
 'ltx4yt',              "die 'skipping, per author (dps) request'",
 'ltximg',              "&MAKEflatten",
 'ltxindex',		"die 'skipping, obsolete on CTAN'",
 'ltxkeys',             "&MAKEflatten",
 'ltxmisc',             "die 'skipping, too complicated, sorry'",
 'ltxtable',            "die 'skipping, use carlisle'",
 'lua-typo',		"&MAKEflatten",
 'lua-uca',		"&MAKEflatten",
 'lua-visual-debug',    "&MAKEflatten",
 'lua2dox',		"die 'skipping, author request'",
 'luabidi',		"&MAKEflatten",
 'luafindfont',		"&MAKEflatten",
 'luaintro',		"die 'skipping, obsolete per author (hvoss)'",
 'lualatex-doc',	"die 'skipping, obsolete on ctan (hvoss)'",
 'luamesh',		"&MAKEflatten",
 'luarandom',		"&MAKEflatten",
 'luatex-def',		"die 'skipping, replaced by graphics-def'",
 'lucida',              "die 'skipping, nonfree font'",
 'lucida-otf',          "die 'skipping, nonfree font'",
 'lucidabr',            "die 'skipping, nonfree font'",
 'lucold',              "die 'skipping, nonfree font'",
 'lug',		"skipping, specific script (with too-short name)",
 'luwiantype',	"&MAKEflatten",
 'lxfonts',     "&MAKEflatten",
 'ly1',         "&MAKEcopy",
 'lyx',         "die 'skipping, container directory'",
 'mab2bib',     "die 'skipping, python'",
 'mactex',	"die 'skipping, whole distribution'",
 'magra',	"&MAKEflatten",
 'magyar',      "die 'skipping, use babel-hungarian'",
 'make-env',    "die 'skipping, no license, too old to bother with'",
 'makebarcode', "&MAKEcopy",
 'makecell',    "&MAKEnosymlinks",
 'makedtx',     "&MAKEflatten",
 'makeglossariesgui',   "die 'skipping, extra java required'",
 'makeindex',		"die 'skipping, binary'",
 'makeindexk',		"die 'skipping, binary'",
 'maketexwork',         "die 'skipping, too old'",
 'makor',               "&MAKEbase",
 'malayalam-latex',     "die 'skipping, until asked for'",#language/malayalam
 'malayalam-omega',     "die 'skipping, until asked for'",
 'manfnt-font',		"&MAKEflatten",
 'manjutex',    "die 'skipping, obsolete on CTAN'", #"&MAKEflatten",
 'manpage',     "die 'skipping, nonfree license'",
 'manual',	"die 'skipping, in knuth-lib knuth-local cmextra'",
 'mapcodes',    "die 'skipping, nosell (old latex) license'",
 'maple',       "die 'skipping, noinfo license'",
 'marigold',    "die 'skipping, nonfree font'",
 'marvosym',    "&MAKEcopy",
 'math-e',      "die 'skipping, author request'",
 'match_parens',"&MAKEflatten",
 'mathabx',     "&MAKEflatten",
 'mathabx-type1',       "&MAKEflatten",
 'mathalpha',		"&MAKEflatten",
 'mathalphabets',	"die 'skipping, nocommercial'",
 'mathesatz-examples',  "die 'skipping, big'",
 'mathexam',    "&MAKEflatten",
 'mathgifg',    "die 'skipping, nonfree font support'",
 'mathpazo',	"die 'skipping, not ready'",
 'mathpazo',    "&MAKEmathpazo",
 'mathpunctspace', "&MAKEflatten",
 'mathspic',    "&MAKEflatten",
 'mathstone',   "die 'skipping, requires nonfree Stone fonts'",
 'mathtex',     "die 'skipping, compiled, cgi, etc.'",
 'mathtype',	"die 'skipping, compiled, nonfree, etc.'",
 'matlab',      "die 'skipping, requires nonfree matlab'",
 'mattex',      "die 'skipping, requires nonfree matlab'",
 'mbenotes',	"die 'skipping, obsolete on 4apr19'",
 'mdwfonts',    "die 'skipping, too many tfm duplicates'",
 'mem',         "die 'skipping, experimental ca.2006'",
 'memo2',       "die 'skipping, latex 2.09'",
 'memoirchapstyles',	"die 'skipping, use memoirchapterstyles'",
 'meper',       "die 'skipping, requires Java, confused license'",
 'messagebubbles',	"die 'skipping, no license stated'",
 'metalogo',    "&MAKEflatten",
 'metaobj',     "&MAKEflatten",
 'metapost',    "die 'skipping, core binary'",
 'metauml',     "&MAKEmetauml",
 'metropolis',	"die 'skipping, use beamertheme-metropolis'",
 'metsymb',     "&MAKEflatten",
 'mf',		"die 'skipping, compiled engine metafont'",
 'mfb-oldstyle',"&MAKEflatten",
 'mff',         "die 'skipping, noinfo license'",
 'mflogo',	"die 'skipping, must find logosl8.mf on CTAN'", # 11feb19
 'mflogo-font', "&MAKEflatten",
 'mfpic',       "&MAKEcopy",
 'mftoeps',     "die 'skipping, bat-only (mirror.ctan.org/graphics/MF-PS)'",
 'mh',		"die 'skipping, replaced by breqn and mathtools'",
 'mhs',         "die 'skipping, nomodify license'",
 'mil',         "die 'skipping, have newer'",
 'mil3',        "die 'skipping, have newer'",
 'milstd',      "die 'skipping, have milstd.sty from logic'",
 'mimetex',     "die 'skipping, CGI'",
 'miniltx',     "die 'skipping, use graphics-pln'",
 'minion2newtx',"die 'skipping, requires nonfree minion'",
 'minionpro',   "die 'skipping, requires nonfree minion'",
 'misc',        "&MAKEmisc",
 'missaali',    "&MAKEflatten",
 'mk',          "die 'skipping, not self-locating, must not usurp two-character cmd name'",
 'mkbangtex',   "die 'skipping, no copyright (and python)'",
 'mkbib',       "die 'skipping, compilcation'",
 'mkstmpdad',   "die 'skipping, requires dpstory packages'",
 'mlbib',       "die 'skipping, bib file names are too generic'",
 'mlmodern',    "&MAKEflatten",
 'mnsymbol',    "&MAKEflatten",
 'modular',     "&MAKEflatten",
 'mol2chemfig', "die 'skipping, python setup.py'",
 'montex',      "&MAKEflatten",
 'morehelp',    "die 'skipping, nonfree license'",
 'morisawa',	"&MAKEflatten",
 'morse',       "die 'skipping, nosell license'",
 'mp3d',	"&MAKEflatten",
 'mpchess',	"&MAKEflatten", # because of fonts/*.ttf
 'mpcolornames',"&MAKEcopy",
 'mpfonts',	"&MAKEflatten",
 'mpdinbrief',  "die 'skipping, nosell license'",
 'ms',		"die 'skipping, split into separate packages'",
 'msuthesis',   "die 'skipping, use msu-thesis'",
 'mtp2lite',    "die 'skipping, nonfree'",
 'mtx',         "die 'skipping, pascal musixtex binaries'",
 'multibox',    "die 'skipping, noinfo license, author deceased'",
 'multido',     "&MAKEpst",
 'multiple-choice',    "&MAKEflatten",
 'multirow',    "&MAKEflatten",
 'musictex',    "die 'skipping, superseded by musixtex'",
 'musixtnt',	"&MAKEflatten",
 'mwrite',      "die 'skipping, nonfree license'",
 'mx'   ,       "die 'skipping, author does not recommend system install'",
 'mxd',         "die 'skipping, noinfo license, old mongolian'",
 'mxedruli',    "&MAKEflatten",
 'mychemistry', "die 'skipping, obsolete on ctan'",
 'na-border',	"die 'skipping, nonfree font'",
 'na-position',	"&MAKEflatten",
 'nahuatl',	"die 'skipping, generic mf filenames, capitalization'",
 'named',	"die 'skipping, await request for old bst+sty'",
 'namunsrt',	"die 'skipping, await request for old bst'",
 'nanumtype1',  "&MAKEflatten",
 'nassflow',    "die 'skipping, nosell license'",
 'nbaskerv',    "die 'skipping, requires nonfree font'",
 'ncctools',    "&MAKEflatten",
 'nchairx',	"&MAKEflatten",
 'ncntrsbk',	"die 'skipping, part of urw-base35, frozen'",
 'newalg',      "die 'skipping, noinfo license, 1995'",
 'newapa',	"die 'skipping, await request for old bst+sty'",
 'newcomputermodern',	"&MAKEflatten",
 'newproof',    "die 'skipping, use piff'",
 'newpx',       "&MAKEflatten",
 'newsletr',    "&MAKEnewsletr",
 'newthm',      "die 'skipping, obsolete, no longer on ctan'",
 'newtx',       "&MAKEflatten",
 'newtxtt',	"&MAKEflatten",
 'newtxsf',     "&MAKEflatten",
 'nexus-otf',	"die 'skipping, font is likely nonfree?'",
 'niceframe-type1',	"&MAKEflatten",
 'nimbus15',	"&MAKEflatten",
 'nlatexdb',    "die 'skipping, C#/.NET'",
 'nohyph',      "die 'skipping, nohyph must be done by hand'",
 'noindentafter',	"&MAKEflatten",
 'norasi-c90',  "&MAKEnorasi_c90",
 'notes',       "&MAKEnotes",
 'notocjksc',	"die 'skipping, 300mb is just too big'",
 'notocondensed',	"die 'skipping, too big, on tlcontrib'",
 'notomath',	"&MAKEflatten",
 'npp-for-context',	"die 'skipping, noinfo license, project stale'",
 'ntabbing',    "die 'skipping, noinfo license, author email bad'",
 'ntg',         "die 'skipping, ntg is stale user group information'",
 'numending',   "die 'skipping, noinfo license'",
 'numline',     "die 'skipping, obsolete'",
 'numparse',    "die 'skipping, experimental, not recommended by author'",
 'nunito',	"&MAKEflatten",
 'oca',         "die 'skipping, nosell license'",
 'occam',       "die 'skipping, too old and strange'",
 'ocgtools',    "die 'skipping, requires acrotex'",
 'ocherokee',   "&MAKEflatten",
 'ocr-a',       "die 'skipping, nosell license'",
 'ocr-b-outline',"&MAKEflatten",
 'oesch',       "die 'skipping, nosell license'",
 'ofs',         "&MAKEflatten",
 'ogonek',      "die 'skipping, nonfree license'",
 'oinuit',      "&MAKEflatten",
 'old-arrows',	"&MAKEflatten",
 'old-faq-en',  "die 'skipping, obsolete'",
 'oldstandardt1',"die 'skipping, use oldstandard'",
 'omegajapanese',"&MAKEflatten",
 'onepagem',    "die 'skipping, use piff'",
 'oops',	"die 'skipping, replaced by ccool'",
 'opacity-pro',	"die 'skipping, adobe required (dps)'",
 'opensans',    "&MAKEcopy",
 'optexcount',  "&MAKEflatten",
 'optima',      "die 'skipping, nonfree font'",
 'osa',         "die 'skipping, relies on endfloat.cfg and non-unique filenames'",
 'osda',	"die 'skipping, nonfree license due to logo, 20nov24 ulm mail'",
 'osmanian',    "die 'skipping, no good license info'",
 'oswald',	"&MAKEflatten",
 'ot2cyr',      "die 'skipping, nonfree font support'",
 'otfinst',     "die 'skipping, python script, perhaps stale'",
 'otibet',      "&MAKEflatten",
 'oxford',      "die 'skipping, nosell license'",
 'padauk',	"die 'skipping, obsolete on CTAN (updated at SIL)'",
 'pageframe',   "die 'skipping, noinfo license'",
 'pagella-otf',	"&MAKEflatten",
 'pageno',      "die 'skipping, nosell license'",
 'pagesLTS',    "die 'skipping, use pageslts'",
 'palatino',	"die 'skipping, part of urw-base35, frozen'",
 'pandora',     "die 'skipping, nosell license'",
 'pandora-latex',       "die 'skipping, pandora is nosell'",
 'pandora-type1',       "die 'skipping, pandora is nosell'",
 'paradigm',            "die 'skipping, too old, for BLUe'",
 'parse-split',         "die 'skipping, requires compilation'",
 'parsianfonts',        "die 'skipping, licensing problematic'",
 'pas-cours',           "&MAKEflatten",
 'pas-crosswords',      "&MAKEflatten",
 'pas-tableur',         "&MAKEflatten",
 'pb-diagram',  "&MAKEpbdiagram",
 'pcarl',       "die 'skipping, free support for nonfree font'",
 'pclnfss',     "die 'skipping, nonfree hardware fonts'",
 'pdbf-toolkit',"die 'skipping, non-self-locating java+sql'",
 'pdcmac',      "die 'skipping, needs work'",
 'pdf-forms-tutorial',  "die 'skipping, use pdf-forms-tutorial-de or -en'",
 'pdf-forms-tutorial-de', "die 'skipping, requires acrobat'", #"&MAKEpdf_forms_tutorial",
 'pdf-forms-tutorial-en', "die 'skipping, requires acrobat'", #"&MAKEpdf_forms_tutorial",
 'pdfbook',     "die 'skipping, requires compilation'",
 'pdfmarginpar',"&MAKEflatten",
 'pdfrack',     "die 'skipping, until someone asks for it'",
 'pdftex-def',	"die 'skipping, replaced by graphics-def'",
 'pdfx',	"&MAKEflatten",
 'pedigree',    "die 'skipping, use pedigree-perl'",
 'penrose',	"die 'skipping, renamed to tilings'",
 'persian-bib', "&MAKEflatten",
 'persian-hm-ftx',"die 'skipping, legality?'", #"&MAKEflatten",
 'persian-hm-xbs',"die 'skipping, legality?'", #"&MAKEflatten",
 'persian-modern',"die 'skipping, legality?'", #"&MAKEflatten",
 'pgf-cmykshadings', "die 'skipping, obsolete on ctan'",
 'pgothic',     "die 'skipping, use bookhands'",
 'phaistos',    "&MAKEflatten",
 'philosophers-imprint', "die 'skipping, use philosophersimprint'",
 'phonenumbers',"&MAKEflatten",
 'physe',       "die 'skipping, noinfo license, c.1992 plain format for physics'",
 'physymb',	"die 'skipping, obsolete per author requests'",
 'phyzzx',      "die 'skipping, noinfo license, c.1988 plain format for physics'",
 'pictex',      "&MAKEflatten",
 'pictex-autoarea',"die 'skipping, use autoarea'",
 'pigpen',      "&MAKEflatten",
 'pinlabel',    "&MAKEnosymlinks",
 'pitthesis',   "die 'skipping, noinfo license'",
 'pkgcheck',	"die 'skipping, rust compilation'",
 'pl',		"&MAKEflatten",
 'pl-mf',	"die 'skipping, use pl'",
 'pl-qx',       "&MAKEplqx",
 'plain',	"die 'skipping, just plain.tex, rest in knuth-lib'",
 'play-font',	"&MAKEflatten",
 'pmdb',	"die 'skipping, adobe required (dps)'",
 'pointRuler',  "die 'skipping, requires compilation'",
 'poltawski',   "&MAKEcopy",
 'polyglossia-kannada', "die 'skipping, now in polyglossia proper'",
 'popupmenu',   "die 'skipping, per author (dps) request'",
 'poster',      "die 'skipping, requires compilation'",
 'powerdot',    "&MAKEflatten",
 'powerdot-FUBerlin', "die 'skipping, use powerdot-fuberlin'",
 'powerdot-fuberlin', "&MAKEflatten",
 'ppower4',           "die 'skipping, sourceless java ca.2002'",
 'prepr',             "die 'skipping, ca.1989, never in TL, await request'",
 'presentations',     "die 'skipping, author request'",
 'presentations-en',  "die 'skipping, author request'",
 'preview-latex',     "die 'skipping, use preview'",
 'procIAGssymp',"die 'skipping, use prociagssymp'",
 'profcollege', "&MAKEflatten",
 'proflabo',    "&MAKEflatten",
 'progkeys',    "die 'skipping, noinfo license, author unfindable'",
 'proofs',      "die 'skipping, nosell license'",
 'ps2eps',      "die 'skipping, must go into sources'",
 'ps4pdf',      "die 'skipping, obsolete'",
 'psfig',       "die 'skipping, nosell license'",
 'psfragx',     "&MAKEflatten",
 'psizzl',      "die 'skipping, needs to be its own format-level directory'",
 'pslatex',     "&MAKEpslatex",
 'psnfss-addons',       "die 'skipping, do not understand, sorry'",
 'psnfssx',             "die 'skipping, situation too confused, sorry'",
 'pst-2dplot',  "&MAKEpst",
 'pst-3d',      "&MAKEpst",
 'pst-3dplot',  "&MAKEpst",
 'pst-abspos',  "&MAKEpst",
 'pst-am',      "&MAKEpst",
 'pst-antiprism',"&MAKEpst",
 'pst-arrow',   "&MAKEpst",
 'pst-asr',     "&MAKEpst",
 'pst-bar',     "&MAKEpst",
 'pst-barcode', "&MAKEpst",
 'pst-bezier',  "&MAKEpst",
 'pst-blur',    "&MAKEpst",
 'pst-bspline', "&MAKEpst",
 'pst-calculate',	"&MAKEpst",
 'pst-calendar',	"&MAKEflatten",
 'pst-cie',     "&MAKEpst",
 'pst-circ',    "&MAKEpst",
 'pst-coil',    "&MAKEpst",
 'pst-contourplot',    "&MAKEpst",
 'pst-cox',     "&MAKEflatten",
 'pst-dart',    "&MAKEpst",
 'pst-dbicons', "&MAKEpst",
 'pst-diffraction',     "&MAKEpst",
 'pst-electricfield',   "&MAKEpst",
 'pst-eps',     "&MAKEpst",
 'pst-eucl',    "&MAKEpst",
 'pst-exa',     "&MAKEflatten",
 'pst-feyn',	"&MAKEpst",
 'pst-fill',    "&MAKEpst",
 'pst-fit',     "&MAKEpst",
 'pst-fr3d',    "&MAKEpst",
 'pst-fractal', "&MAKEpst",
 'pst-fun',     "&MAKEpst",
 'pst-func',    "&MAKEpst",
 'pst-gantt',   "&MAKEpst",
 'pst-geo',     "&MAKEpst",
 'pst-geo-compress',    "die 'skipping, in pst-geo, check with hvoss'",
 'pst-geometrictools',	"&MAKEpst",
 'pst-ghsb',    "die 'skipping, in pst-grad'",
 'pst-gr3d',    "&MAKEpst",
 'pst-grad',    "&MAKEpst",
 'pst-graphicx',"&MAKEpst",
 'pst-hsb',	"&MAKEpst",
 'pst-infixplot',"&MAKEpst",
 'pst-jftree',  "&MAKEpst",
 'pst-jtree',   "&MAKEpst",
 'pst-knot',    "&MAKEpst",
 'pst-labo',    "&MAKEpst",
 'pst-layout',  "&MAKEcopy",
 'pst-lens',    "&MAKEpst",
 'pst-light3d', "&MAKEpst",
 'pst-lsystem', "&MAKEpst",
 'pst-magneticfield',   "&MAKEpst",
 'pst-marble',	"&MAKEpst",
 'pst-math',    "&MAKEpst",
 'pst-mirror',  "&MAKEpst",
 'pst-moire',   "&MAKEpst",
 'pst-node',    "&MAKEpst",
 'pst-ob3d',    "&MAKEpst",
 'pst-optic',   "&MAKEpst",
 'pst-osci',    "&MAKEpst",
 'pst-ovl',     "&MAKEpst",
 'pst-pad',     "&MAKEpst",
 'pst-pdgr',    "&MAKEpst",
 'pst-perspective',     "&MAKEpst",
 'pst-platon',  "&MAKEpst",
 'pst-plot',    "&MAKEpst",
 'pst-poker',   "&MAKEflatten",
 'pst-poly',    "&MAKEpst",
 'pst-pulley',  "&MAKEpst",
 'pst-qtree',   "&MAKEpst",
 'pst-rputover',"&MAKEpst",
 'pst-rubans',  "&MAKEpst",
 'pst-shell',   "&MAKEpst",
 'pst-sigsys',  "&MAKEpst",
 'pst-slpe',    "&MAKEpst",
 'pst-solarsystem',     "&MAKEpst",
 'pst-solides3d',       "&MAKEpst",
 'pst-soroban', "&MAKEpst",
 'pst-spectra', "&MAKEpst",
 'pst-spinner',	"&MAKEpst",
 'pst-spirograph',	"die 'skipping, removed from CTAN 17mar20'",#"&MAKEpst",
 'pst-stru',    "&MAKEpst",
 'pst-support', "&MAKEpst",
 'pst-text',    "&MAKEpst",
 'pst-thick',   "&MAKEpst",
 'pst-tools',   "&MAKEpst",
 'pst-tree',    "&MAKEpst",
 'pst-turtle',	"&MAKEpst",
 'pst-tvz',     "&MAKEpst",
 'pst-uml',     "&MAKEpst",
 'pst-vectorian', "&MAKEflatten",
 'pst-vehicle', "&MAKEpst",
 'pst-venn',    "&MAKEpst",
 'pst-vue3d',   "die 'skipping, obsolete on CTAN'", #"&MAKEpst",
 'pst2pdf',     "&MAKEflatten",
 'pstdoc',      "die 'skipping, requires python'",
 'pstrees',     "die 'skipping, obsolete (for latex 2.09)'",
 'pstricks',    "&MAKEpstricks",
 'pstricks-add',"&MAKEpst",
 'pstricks-calcnotes',  "die 'skipping, use pstricks_calcnotes'",
 'pstricks-examples',   "die 'skipping, ditto'",
 'pstricks-examples-7', "die 'skipping, CTAN suffices for this big package'",
 'pstricks-examples-en',"die 'skipping, ditto'",
 'psu-thesis',  "die 'skipping, obsolete on CTAN'",
 'ptmsc',       "die 'skipping, nonfree font'",
 'ptsans',      "die 'skipping, use paratype'",
 'ptserif',     "die 'skipping, use paratype'",
 'punk',        "&MAKEflatten",
 'pxchfon',     "&MAKEflatten",
 'pxfonts',     "&MAKEflatten",
 'pxjodel',     "&MAKEflatten",
 'pxtxalfa',    "&MAKEcopy",
 'pxufont',	"&MAKEflatten",
 'pzccal',      "die 'skipping, obsoleted by urwchancal'",
 'qrcstamps',	"die 'skipping, requires adobe (dps'",
 'qualitype',	"&MAKEflatten",
 'quran',	"&MAKEflatten",
 'quran-bn',	"&MAKEflatten",
 'quran-de',	"&MAKEflatten",
 'quran-ur',	"&MAKEflatten",
 'r2bib',       "die 'skipping, requires compilation'",
 'rake4latex',  "die 'skipping, requires rake'",
 'rangen',      "die 'skipping, per author request'",
 'ratexdb',     "die 'skipping, needs sql, etc.'",
 'realcalc',    "die 'skipping, nosell license'",
 'refer',	"die 'skipping, noinfo license (part of refer-tools)'",
 'refer-tools',	"die 'skipping, noinfo license (and old)'",
 'references',  "die 'skipping, requires binary'",
 'renditions',  "die 'skipping, per author request'",
 'resume',      "die 'skipping, nosell license'",
 'revnum',      "die 'skipping, obsolete'",
 'richtext',    "die 'skipping, per author (dps) request'",
 'rit-fonts',	"&MAKEflatten",
 'rmannot',     "die 'skipping, per author (dps) request'",
 'rmligs',      "die 'skipping, no requests'",
 'rojud',	"&MAKEflatten",
 'romande',	 "die 'skipping, use romandeadf'",
 'romandeadf',	"&MAKEflatten",
 'rosario',     "&MAKEflatten",
 'rotating',	"die 'skipping, now part of (core latex) graphics'",
 'rpg-module',	"die 'skipping, basic-stats name'",
 'rsfs',        "&MAKEflatten",
 'rsfso',       "&MAKEflatten",
 'rst',         "die 'skipping, nonfree license'",
 'rtsched',     "die 'skipping, Elisp package'",
 'rubikcube',	 "die 'skipping, use rubik'",
 'rubikrotation',"die 'skipping, use rubik'",
 'rubiktwocube', "die 'skipping, use rubik'",
 'russian',     "die 'skipping, babel non-update, must install as doc only'",
 'sa-tikz',     "&MAKEflatten",
 'sae',         "die 'skipping, nosell license'",
 'saferef',     "die 'skipping, nonfree license'",
 'sagetex',     "die 'skipping, omitted at author request (25 Jan 2010 19:50:16)'",
 'sansmathaccent',      "&MAKEflatten",
 'sansmathfonts',       "&MAKEflatten",
 'scholax',		"&MAKEflatten",
 'schola-otf',	 "&MAKEflatten",
 'schulschriften',      "&MAKEflatten",
 'schwell',             "die 'skipping, use gothic'",
 'scientifixpaper',     "die 'skipping, noinfo license'",
 'sciwordconv', "die 'skipping, for old versions of scientific word'",
 'script',      "die 'skipping, noinfo license, too old to matter'",
 'scripttex',   "die 'skipping, nosell license'",
 'selnolig',    "&MAKEflatten",
 'seminar',     "&MAKEflatten",
 'serbianc',    "die 'skipping, use babel-serbianc'",
 'serbianpart', "die 'skipping, await request'",
 'serial',      "die 'skipping, koma, 1999'",
 'serto',       "die 'use aramaic-serto'",
 'setouterbox', "die 'skipping, use oberdiek'",
 'sfarticle',   "die 'skipping, LaTeX 2.09'",
 'sfheaders',   "die 'skipping, noinfo license, no reply from author'",
 'shadbox',     "die 'skipping, nonfree license'",
 'shipunov',    "&MAKEflatten",
 'shobhika',	"&MAKEflatten",
 'shortlst',    "die 'skipping, nosell license'",
 'showexpl',    "&MAKEflatten",
 'showhyphens', "die 'skipping, replaced by showhyphenation'",
 'siam',        "die 'skipping, nonfree license'",
 'siggraph',    "die 'skipping, nonfree license'",
 'sikumuna',    "die 'skipping, lyx template'",
 'simpleicons',	"&MAKEflatten",
 'simpsons',    "die 'skipping, noinfo license'",
 'simurgh',     "&MAKEflatten",
 'sistyle',	"&MAKEflatten",
 'skak',        "&MAKEflatten",
 'skeyval',     "&MAKEmv_doctex",
 'skillicons',  "die 'skipping, huge, licensing?'",
 'slashbox',    "die 'skipping, noinfo license, c.1993'",
 'slidenotes',  "die 'skipping, nonfree'",
 'smallcap',    "die 'skipping, questionable license, 1996'",
 'softmaker-freefonts', "die 'skipping, requires nonfree fonts'",
 'soulutf8',    "die 'skipping, merged into soul'",
 'soyombo',     "die 'skipping, noinfo license, Mongolian ca.1996'",
 'spanish',     "die 'skipping, complicated collection'",
 'spanish-mx',	"die 'skipping, obsolete on CTAN'",
 'spark-otf',	"&MAKEflatten",
 'splint',      "die 'skipping, binary'",
 'springer',    "die 'skipping, licenses not checked'",
 'sprite',      "die 'skipping, noinfo license'",
 'srbtiks',	"&MAKEflatten",
 'ssqquote',    "die 'skipping, nonfree license'",
 'startlatex2e',"die 'skipping, renamed to yet-another-guide-latex2e'",
 'statrep',     "die 'skipping, only for nonfree sas'",
 'staves',      "&MAKEflatten",
 'stellenbosch',"&MAKEcopy",
 'step',	"&MAKEflatten",
 'stepgreek',	"&MAKEflatten",
 'stickstoo',	"&MAKEflatten",
 'stix',	"&MAKEflatten",
 'stix2-type1',	"&MAKEflatten",
 'stmaryrd',    "&MAKEflatten",
 'stoneipa',	"die 'skipping, nonfree font support'",
 'streetex',    "die 'skipping, nonfree'",
 'studies-lm',  "die 'skipping, nonfree'",
 'style_showcase',      "die 'skipping, until JimH advises it is a good idea'",
 'sueterlin',   "die 'skipping, obsolete on CTAN'",
 'sueterlin',   "die 'skipping, use gothic'",
 'svg',		"&MAKEflatten",
 'switch',		"&MAKEflatten",
 'svjour',      "die 'skipping, license and packaging unclear'",
 'symbol',	"die 'skipping, part of urw-base35, frozen'",
 'symbolindex', "die 'skipping, requires binary'",
 'syntaxdi',	"&MAKEflatten",
 'synthslant',	"&MAKEflatten",
 't2',          "&MAKEt2",
 'tablestyles', "die 'skipping, obsolete on CTAN'",
 'tabto',       "die 'skipping, use tabto-generic or tabto-ltx'",
 'tabulars-e',  "die 'skipping, author request'",
 'tabvar',	"&MAKEflatten",
 'tamethebeast',"&MAKEtamethebeast",
 'tamil-omega', "die 'skipping, supports nonfree ISM fonts'", #"&MAKEflatten",
 'tap',	        "die 'POSTtap should make tap.tfm'",
 'taupin',      "die 'skipping, noinfo license'",
 'taylor',      "die 'skipping, nonfree'",
 'tclldoc',     "die 'skipping, use tcldoc'",
 'technica',    "die 'skipping, generic .sty names'",
 'telugu',	"die 'skipping, old language support, await request'",
 'template',    "die 'skipping, use xpackages'",
 'tengwarscript',"&MAKEflatten",
 'termes-otf',	 "&MAKEflatten",
 'tex-converter',"die 'skipping, old support'",
 'tex_converter',"die 'skipping, old support'",
 'tex-extensions',	"die 'skipping, compiled extensions ca.2003, unknown license'",
 'tex-fpc',		"die 'skipping, alternate implementation'",
 'tex-gpc',		"die 'skipping, alternate implementation'",
 'tex-gyre',            "&MAKEcopy",
 'tex-gyre-math',       "&MAKEflatten",
 'tex-implementors',	"die 'skipping, verbatim mail archive'",
 'tex-in-practice',	"die 'skipping, old book examples'",
 'tex-it',	"die 'skipping, old support'",
 'tex-refs',    "die 'skipping, removed on CTAN'",
 'tex_it',	"die 'skipping, old support'",
 'texdoc',	"&MAKEflatten",
 'texdoctk',    "die 'skipping, moribund, only in tl'",
 'texemplar',   "die 'skipping, await request, 199x'",
 'texgit',	"die 'skipping, per author request'",
 'texinfo',	"die 'skipping, see ~karl/bin/update-texinfo'",
 'texlab',	"die 'skipping, requires rust compilation'",
 'texlipse',    "die 'skipping, plugin for Eclipse'",
 'texlive-dummy',		"die 'skipping, suse placeholder'",
 'texlive-dummy-opensuse',	"die 'skipping, suse placeholder'",
 'texlog-extract',      "die 'skipping, Ruby, not self-locating'",
 'texlog_extract',      "die 'skipping, Ruby, not self-locating'",
 'texmacs',             "die 'skipping, binary'",
 'texpower',    "&MAKEnosymlinks",
 'texsis',      "die 'skipping, needs its own format-level directory, sorry'", #"&MAKEtexsis",
 'texshop',	"die 'skipping, only placeholder on ctan'",
 'texsort',     "die 'skipping, use sttools'",
 'textool',	"die 'skipping, ancient program'",
 'tfrupee',     "&MAKEflatten",
 'tgothic',     "die 'skipping, use bookhands'",
 'thaifonts-arundina',   "die 'skipping, fontforge format only'",
 'thaifonts-scalable',   "die 'skipping, fontforge format only'",
 'thailatex',   "die 'skipping, use babel-thai'",
 'thesis',      "die 'skipping, contradictory licenses'", # texdev.net/2016/12/18/tex-on-windows-tex-live-versus-miktex-revisited/
 'thesis-qom',  "&MAKEflatten",
 'thesis-titlepage-fhAC',"die 'skipping, use ...fhac'",
 'thorshammer', "die 'skipping, adobe required (dps)'",
 'thsmc',       "die 'skipping, requires nonfree font'",
 'thmtools',	"&MAKEflatten",
 'thubeamer',	"&MAKEflatten",
 'ticket',      "&MAKEflatten",
 'ticollege',   "&MAKEflatten",
 'tikz-among-us',"&MAKEflatten",
 'tikz-kalender',"&MAKEflatten",
 'tikz-karnaugh',"&MAKEflatten",
 'tikz-ladder',	 "&MAKEflatten",
 'tikz-mirror-lens',"&MAKEflatten",
 'tikz-osci',	"&MAKEflatten",
 'tikz-relay',	"&MAKEflatten",
 'tikz-sfc',	"&MAKEflatten",
 'tikztosvg',	"&MAKEflatten",
 'time',        "die 'skipping, use piff'",
 'timeline',    "die 'skipping, LaTeX 2.09, never in TL'",
 'times',	"die 'skipping, part of urw-base35, frozen'",
 'timescyr',    "die 'skipping, monotype font is nonfree'",
 'timesnew',    "die 'skipping, monotype/ibm font is nonfree'",
 'timing',      "die 'skipping, noinfo license, 1994 mf'",
 'tipa',        "&MAKEflatten",
 'tipfr',       "&MAKEflatten",
 'tipos',	"die 'skipping, obsolete + nosource'",
 'tiscreen',	"&MAKEflatten",
 'titlepage-uni-dortmund', "die 'skipping, needs graphics (too short names) in .'",
 'titleps',     "die 'skipping, use titlesec'",
 'tkhyph',      "die 'skipping, part of hyph-utf8'",
 'tksbrief',    "die 'skipping, LaTeX 2.09'",
 'tkz',         "die 'skipping, container directory'",
 'tkz-base',    "&MAKEtkz",
 'tkz-doc',	"&MAKEtkz",
 'tkz-elements',"&MAKEtkz",
 'tkz-euclide', "&MAKEtkz",
 'tkz-fct',     "&MAKEtkz",
 'tkz-kiviat',  "die 'skipping, obsolete on ctan'", #"&MAKEtkz",
 'tkz-linknodes',"die 'skipping, obsolete on ctan'",#"&MAKEtkz",
 'tkz-tab',     "&MAKEtkz",
 'tkzexample',	"&MAKEflatten",
 'tlaunch',	"die 'skipping, siep installs by hand'",
 'tlg2latex',   "die 'skipping, not self-locating for default.py?'",
 'tlmgrbasics',	"&MAKEflatten",
 'tolkienfonts',"die 'skipping, cannot easily separate free from nonfree fonts'",
 'tpcmfont',    "die 'skipping, ?'",
 'tpic2pdftex', "die 'skipping, in Build/source, not ready'",
 'tpx',         "die 'skipping, nosource, Windows'",
 'tr2latex',    "die 'skipping, needs compilation, at least'",
 'tracking',    "die 'skipping, nonfree license'",
 'translation-europecv-de',     "&MAKEnosymlinks",
 'translation-footmisc-de',     "die 'skipping, nocommercial'",
 'translation-pst-jtree-de',    "die 'skipping, nocommercial'",
 'translations',"&MAKEflatten",
 'trig',	"die 'skipping, core LaTeX'",
 'tuda-ci', 	"&MAKEflatten",
 'tugboat-toc', "die 'skipping, nonfree, CTAN enough'",
 'turkish',     "die 'skipping, await request, 1989'",
 'turkishintro',"die 'skipping, nosource'",
 'turnstile',   "&MAKEflatten",
 'turnthepage', "&MAKEflatten",
 'txfonts',     "&MAKEflatten",
 'txfontsb',    "&MAKEflatten",
 'txuprcal',     "&MAKEflatten",
 'ty',          "die 'skipping, name too generic'",
 'typedref',    "die 'skipping, nonfree license'",
 'typespec',    "die 'skipping, nonfree font specimens'",
 'typingtex',	"die 'skipping, ancient mac docs'",
 'typog',	"&MAKEflatten",
 'uafthesis',   "&MAKEnosymlinks",
 'uebungsblatt',"&MAKEflatten",
 'ufrgscca',	"&MAKEflatten",
 'uk-faq',      "die 'skipping, use FAQ-en'",
 'uk-tex-faq',  "die 'skipping, use FAQ-en'",
 'ukrhyph',     "&MAKEukrhyph",
 'ulsy',        "die 'skipping, noinfo license, old'",
 'umrand',      "die 'skipping, nonfree'",
 'undertilde',  "die 'skipping, noinfo license, author not responsive'",
 'unimath-plain-xetex',     "MAKEflatten",
 'unitipa',     "die 'skipping, obsolete on CTAN'",
 'unitconv',	"&MAKEflatten",
 'unitsdef',    "&MAKEflatten",
 'univers',     "die 'skipping, nonfree font'",
 'unswthesis',	"die 'skipping, noinfo license'",
 'upgreek',     "die 'skipping, use was'",
 'upmethodology',"&MAKEflatten",
 'uppunctlm',	"&MAKEflatten",
 'urcls',	"&MAKEflatten",
 'urwchancal',  "&MAKEcopy",
 'uspatent',    "&MAKEflatten",
 'utfsym',      "&MAKEflatten",
 'util-half',   "die 'skipping, noinfo license, old Knuthian font'",
 'utopia',	"die 'skipping, frozen'",
 'utorontothesis',      "die 'skipping, noinfo license, 1997'",
 'utthesis',    "die 'skipping, await request, 1995'",
 'variablelm',  "&MAKEflatten",
 'varioref',    "die 'skipping, use latex[-tds]'",
 'vc',		"die 'skipping, intended per-project use, ctan enough?'",
 'vdm',         "die 'skipping, noinfo license, 1994'",
 'vector',      "die 'skipping, noinfo license, 1994'",
 'velthuis',    "&MAKEflatten",
 'venturisadf', "&MAKEflatten",
 'verdana',     "die 'skipping, support for nonfree font'",
 'vertex',      "die 'skipping, noinfo license, aer.sty clash, ancient'",
 'vhistory',    "&MAKEflatten",
 'vicentino',   "die 'skipping, nonfree license'",
 'view_print_ps_pdf', "die 'skipping, three-char cmd name for ruby script?'",
 'viiptar',     "die 'skipping, 1998, await request'",
 'visualFAQ',	"die 'skipping, use visualfaq'",
 'vita',        "die 'skipping, nonfree license'",
 'voss-mathmode',"die 'skipping, obsolete'",
 'vpp',         "die 'skipping, not self-locating, three-char name for ruby script?'",
 'vrb',         "die 'skipping, noinfo license, author does not recall'",
 'vrsion',      "die 'skipping, nonfree license'",
 'vxu',         "die 'skipping, obsolete'",
 'w32tex',      "die 'skipping, whole disttribution'",
 'wadalab',     "&MAKEwadalab",
 'wasy',	"&MAKEflatten",
 'wasy-type1',	"&MAKEflatten",
 'wasy2',       "die 'skipping, use wasy'",
 'wasy2-ps',	"die 'skipping, use wasy-type1'",
 'webomints',	"die 'skipping, nonfree'",
 'wichura-table',"die 'skipping, too-generic name table.tex, awaiting request'",
 'win32-emacs-auctex', "die 'skipping, not for us'",
 'windycity',	"&MAKEflatten",
 'winedt',      "die 'skipping, nonfree license'",
 'winfonts',    "die 'skipping, support for nonfree fonts'",
 'winshell',    "die 'skipping, installed manually by siep?",
 'withesis',    "die 'skipping, thesis package ca.2002, wait for request'",
 'wntamil',     "die 'skipping, nonfree license'",
 'wordcloud',	"&MAKEflatten",
 'worldflags',	"&MAKEflatten",
 'wp-conv',     "die 'skipping, nonfree license'",
 'wp2latex',    "die 'skipping, compilation'",
 'wtref',	"&MAKEflatten",
 'xbase',       "die 'skipping, use xpackages'",
 'xcharter',	"&MAKEflatten",
 'xcoffins',    "die 'skipping, use xpackages'",
 'xeCJK',       "die 'skipping, use xecjk'",
 'xecolour',    "die 'skipping, replaced by xecolor'",
 'xelibertine', "die 'skipping, replaced by libertine'",
 'xetex',	"die 'skipping, binary'",
 'xetex-def',	"die 'skipping, replaced by graphics-def'",
 'xetex-pstricks',"&MAKEcopy",
 'xfakebold',	"&MAKEflatten",
 'xindy-persian',"die 'skipping, do by hand in /texmf-dist/xindy/modules/lang/persian: too painful to preserve rest of xindy'",
 'xinitials',   "die 'skipping, will be in xpackages when ready (Morten says)'",
 'xits',        "&MAKEflatten",
 'xkeyval',     "&MAKExkeyval",
 'xlop',        "&MAKEflatten",
 'xltabular',   "&MAKEflatten",
 'xml2pmx',	"die 'skipping, nontrivial compilation needed'",
 'xmltex',      "&MAKExmltex",
 'xor',         "die 'skipping, will be in xpackages when ready (Morten says)'",
 'xpackages',   "die 'skipping, now l3packages, etc.'",
 'xparse',      "die 'skipping, use xpackages'",
 'xtcapts',     "die 'skipping, noinfo license'",
 'xtheorem',    "die 'skipping, will be in xpackages when ready (Morten says)'",
 'xurl',	"&MAKEflatten",
 'xwatermark',  "&MAKEflatten",
 'xypic',       "&MAKExypic",
 'yi4latex',    "die 'skipping, nosell license'",
 'yfonts-otf',	"&MAKEflatten",
 'yfrak',       "die 'skipping, use gothic'",
 'yinit',       "die 'skipping, use gothic'",
 'yinit-as',    "die 'skipping, wait request, old never-included variant of yinit'",
 'yplan',       "&MAKEnosymlinks",
 'yquant',	"&MAKEflatten",
 'ysabeau',	"&MAKEflatten",
 'yschwab',     "die 'skipping, use gothic'",
 'yt4pdf',      "die 'skipping, per author (dps) request'",
 'ytex',        "die 'skipping, noinfo license'",
 'zapfchan',	"die 'skipping, part of urw-base35, frozen'",
 'zapfding',	"die 'skipping, part of urw-base35, frozen'",
 'zblbuild',	"die 'skipping, await request, zenity?'",
 'zefonts',     "die 'skipping, noinfo license'", #&MAKEflatten",
 'zhmakeindex',	"die 'skipping, go seems too much to ask'",
 'zhmcjk',      "die 'skipping, sorry, 8000 tfm files, (7feb12)'",
 'zhmetrics',   "&MAKEcopy",
 'zhmetrics-uptex',	"&MAKEflatten",
 'zitie',	"&MAKEflatten",
 'zlmtt',	"&MAKEflatten",
 'zwgetfdate',  "&MAKEcopy",
 'zztex',	"&MAKEflatten",
);


%prehook = (
 'a2ping'		=> '&PREHOOK_a2ping',
 'apa6'                 => '&PREHOOK_apa6',
 'apa7'                 => '&PREHOOK_apa7',
# 'bibtexperllibs'       => '&PREHOOK_bibtexperllibs',
 'cals'                 => '&PREHOOK_cals',
 'changes'		=> '&PREHOOK_changes',
 'chess'                => '&PREHOOK_chess',
 'clojure-pamphlet'     => '&PREHOOK_clojure_pamphlet',
 'cluttex'		=> '&PREHOOK_cluttex',
 'cm'			=> '&PREHOOK_cm',
 'cm-super'             => '&PREHOOK_cm_super',
 'cmextra'              => '&PREHOOK_cmextra',
 'concrete'             => '&PREHOOK_concrete',
 'context-handlecsv'	=> '&PREHOOK_context_handlecsv',
 'ctan-o-mat'		=> '&PREHOOK_ctan_o_mat',
 'dynblocks'            => '&PREHOOK_flatten1',
 'easyfloats'		=> '&PREHOOK_flatten1',
 'enctex'		=> '&PREHOOK_flatten1',
 'fixme'                => '&PREHOOK_fixme',
 'font-change-xetex'    => '&PREHOOK_flatten1',
 'fontools'             => '&PREHOOK_fontools',
 'gost'                 => '&PREHOOK_flatten1',
 'gothic'		=> '&PREHOOK_gothic',
 'grotesq'		=> '&PREHOOK_unzip',
 'hagenberg-thesis'	=> '&PREHOOK_hagenberg_thesis',
 'hduthesis'		=> '&PREHOOK_flatten1',
 'ibygrk'               => '&PREHOOK_ibygrk',
 'iodhbwm'		=> '&PREHOOK_flatten1',
 'knuth-local'          => '&PREHOOK_knuth_local',
 'kotex-utf'		=> '&PREHOOK_flatten1',
 'kotex-oblivoir'	=> '&PREHOOK_flatten1',
 'ktv-texdata'          => '&PREHOOK_ktv_texdata',
 'latex-git-log'        => '&PREHOOK_latex_git_log',
 'latexdiff'            => '&PREHOOK_latexdiff',
 'latexindent'          => '&PREHOOK_latexindent',
 'latex2e-help-texinfo-spanish' => '&PREHOOK_latex2e_help_texinfo_spanish',
 'lilyglyphs'           => '&PREHOOK_lilyglyphs',
 'lollipop'             => '&PREHOOK_flatten1',
 'matapli'              => '&PREHOOK_flatten1',
 'mathspic'             => '&PREHOOK_mathspic',
 'movie15'              => '&PREHOOK_flatten1',
 'musixtex-fonts'       => '&PREHOOK_unzip',
 'mp3d'                 => '&PREHOOK_mp3d',
 'numericplots'		=> '&PREHOOK_flatten1',
 'nwejm'		=> '&PREHOOK_flatten1',
 'optex'		=> '&PREHOOK_optex',
 'optexcount'		=> '&PREHOOK_optexcount',
 'pgfornament'		=> '&PREHOOK_flatten1',
 'pdfjam'		=> '&PREHOOK_flatten1',
 'phonetic'		=> '&PREHOOK_flatten1',
 'pictex'               => '&PREHOOK_pictex',
 'pkuthss'              => '&PREHOOK_flatten1',
 'plex-otf'             => '&PREHOOK_flatten1',
 'pax'			=> '&PREHOOK_flatten1',
 'pmx'			=> '&PREHOOK_pmx',
 'prosper'              => '&PREHOOK_prosper',
 'runtexfile'		=> '&PREHOOK_flatten1',
 'skb'                  => '&PREHOOK_flatten1',
 'spectralsequences'	=> '&PREHOOK_spectralsequences',
 'suftesi'              => '&PREHOOK_suftesi',
 'stix'                 => '&PREHOOK_stix',
 'texdraw'              => '&PREHOOK_texdraw',
 'texfot'               => '&PREHOOK_texfot',
 'texlogfilter'         => '&PREHOOK_texlogfilter',
 'tkz-graph'		=> '&PREHOOK_flatten1',
 'tlcockpit'		=> '&PREHOOK_tlcockpit',
 'tudscr'		=> '&PREHOOK_tudscr',
 'tui'                  => '&PREHOOK_tui',
 'typog'                => '&PREHOOK_typog',
 'univie-ling'		=> '&PREHOOK_flatten1',
 'utf8mex'              => '&PREHOOK_flatten1',
 'vhistory'             => '&PREHOOK_vhistory',
 'wasy'                 => '&PREHOOK_wasy',
 'webquiz'		=> '&PREHOOK_webquiz',
 'wsuipa'               => '&PREHOOK_wsuipa',
 'xecyr'	       	=> '&PREHOOK_flatten1',
 'yathesis'		=> '&PREHOOK_flatten1',
 'xebaposter'           => '&PREHOOK_flatten1',
 'xepersian'            => '&PREHOOK_flatten1',
 'xindex'               => '&PREHOOK_flatten1',
 'xsim'                 => '&PREHOOK_xsim',
);


%posthook = (
 'acmart'		=> '&POSTacmart',
 'afperpack'		=> '&POST_onelevel',
 'albatross'		=> '&POST_do_man',
 'amscls-doc'		=> '&POST_rmsymlink',
 'amsrefs'		=> '&POSTamsrefs',
 'amstex'		=> '&POSTamstex',
 'aomart'		=> '&POST_do_man',
 'apalike'		=> '&POSTapalike',
 'arara'		=> '&POST_do_man',
 'asapsym'		=> '&POSTasapsym',
 'attachfile2'		=> '&tl_man_to_pdf',
 'autosp'		=> '&POSTautosp',
 'axodraw2'		=> '&POSTaxodraw2',
 'barracuda'		=> '&POSTbarracuda',
 'beautybook'		=> '&POSTbeautybook',
 'beamertheme-cleaneasy' => '&POST_onelevel',
 'bhcexam'		=> '&POST_rmsymlink',
 'bib2gls'		=> '&POSTbib2gls',
 'biber'		=> '&POSTbiber',
 'biber-ms'		=> '&POSTbiber',
 'biblatex'		=> '&POSTbiblatex',
 'biblatex-dw'		=> '&POST_onelevel',
 'biblatex-ms'		=> '&POSTbiblatex',
 'biblatex-software'	=> '&POST_rmsymlink',
 'bibtex'		=> '&POSTbibtex',
 'bibtexperllibs'	=> '&POSTbibtexperllibs',
 'blopentype'		=> '&POST_onelevel',
 'bonum-otf'		=> '&POST_onelevel',
 'calculatoritems'	=> '&POST_onelevel',
 'cascadiamono-otf'	=> '&POST_onelevel',
 'circularglyphs'	=> '&POST_onelevel',
 'citation-style-language' => '&POST_do_man',
 'cjk-gs-integrate'	=> '&POSTcjk_gs_integrate',
 'cmcyr'		=> '&POSTcmcyr',
 'codedescribe'		=> '&POST_onelevel',
 'coloredbelts'		=> '&POST_onelevel',
 'commalists-tools'	=> '&POST_onelevel',
 'context'		=> '&POSTcontext',
 'context-games'	=> '&POSTcontext_games',
 'context-legacy'	=> '&POSTcontext_legacy',
 'coordsys'		=> '&POSTcoordsys',
 'couleurs-fr'		=> '&POST_onelevel',
 'create-theorem'	=> '&POST_onelevel',
 'creationboites'	=> '&POST_onelevel',
 'crossrefenum'		=> '&POSTcrossrefenum',
 'cs'			=> '&POSTcs',
 'cslatex'		=> '&POST_cstexpkgs',
 'csplain'		=> '&POST_cstexpkgs',
 'cstex'		=> '&POSTcstex',
 'ctanify'		=> '&POST_do_man',
 'culmus'		=> '&POSTculmus',
 'customenvs'		=> '&POST_onelevel',
 'dehyph-exptl'		=> '&POSTdehyph_exptl',
 'digestif'		=> '&POSTdigestif',
 'dlrg-templates'	=> '&POST_onelevel',
 'doipubmed'		=> '&POSTlatex2html',
 'dozenal'		=> '&POSTdozenal',
 'e-french'		=> '&POSTe_french',
 'easydtx'		=> '&POST_do_man',
 'embedfile'		=> '&POSTembedfile',
 'emotion'		=> '&POST_onelevel',
 'encxvlna'		=> '&POSTencxvlna',
 'endofproofwd'		=> '&POSTendofproofwd',
 'enigma'		=> '&POSTenigma',
 'eplain'		=> '&POSTeplain',
 'epspdf'		=> '&POSTepspdf',
 'euromoney'		=> '&POST_onelevel',
 'exam-zh'		=> '&POSTexam_zh',
 'fadingimage'		=> '&POST_onelevel',
 'fenetrecas'		=> '&POST_onelevel',
 'fixme'		=> '&POSTfixme',
 'font-change-xetex'	=> '&POSTfont_change_xetex',
 'fontsetup'		=> '&POST_onelevel',
 'formation-latex-ul'	=> '&POSTformation_latex_ul',
 'fpl'			=> '&POSTfpl',
 'frenchle'		=> '&POST_rmsymlink',
 'genealogy-profiles'	=> '&POST_onelevel',
 'gentium-sil'		=> '&POSTgentium_sil',
 'gentium-tug'		=> '&POSTgentium_tug',
 'ghsystem'		=> '&POSTghsystem',
 'gitinfo-lua'		=> '&POST_onelevel',
 'glossaries'		=> '&POST_do_man',
 'gost'			=> '&POSTgost',
 'grotesq'		=> '&POSTgrotesq',
 'grverb'		=> '&POSTgrverb',
 'guide-latex-fr'	=> '&POST_rmsymlink',
 'haranoaji'		=> '&POST_preserve_postcode',
 'hebdomon'		=> '&POST_onelevel',
 'highlightx'		=> '&POST_onelevel',
 'hmtrump'		=> '&POSThmtrump',
 'huffman'		=> '&POST_onelevel',
 'hyperxmp'		=> '&POST_do_man',
 'hyph-utf8'		=> '&POSThyph_utf8',
 'ibygrk'		=> '&POSTibygrk',
 'impatient'		=> '&POSTimpatient',
 'impatient-fr'		=> '&POSTimpatient_fr',
 'inlinegraphicx'	=> '&POST_onelevel',
 'interactiveworkbook'	=> '&POSTinteractiveworkbook',
 'ipsum'		=> '&POST_onelevel',
 'isodoc'		=> '&POSTisodoc',
 'isosafety'		=> '&POST_onelevel',
 'keytheorems'		=> '&POST_onelevel',
 'knitting'		=> '&POSTknitting',
 'knuth-lib'		=> '&POSTknuth_lib',
 'koma-script'		=> '&POSTkoma_script', #'&POST_rmsymlink',
 'kotex-oblivoir'	=> '&POSTkotex_oblivoir',
 'kotex-utf'		=> '&POSTkotex_utf',
 'l3build'		=> '&POST_do_man',
 'latex-base-dev'	=> '&POSTlatex_base_dev',
 'latex2e-help-texinfo' => '&POSTlatex2e_help_texinfo',
 'latexindent'		=> '&POSTlatexindent',
 'lettrine'		=> '&POST_onelevel',
 'lhcyr'		=> '&POSTlhcyr',
 'libertinus-type1'	=> '&POSTlibertinus_type1',
 'light-latex-make'	=> '&tl_man_to_pdf',
 'lilyglyphs'		=> '&POSTlilyglyphs',
 'listbib'		=> '&POSTlistbib',
 'lithuanian'		=> '&POSTlithuanian',
 'lni'			=> '&POST_rmsymlink',
 'logoetalab'		=> '&POST_onelevel',
 'lollipop'		=> '&POST_otherformat',
 'lua-check-hyphen'	=> '&POST_rmsymlink',
 'lua-physical'		=> '&POSTlua_physical',
 'lua-placeholders'	=> '&POST_onelevel',
 'lua-regression'	=> '&POST_onelevel',
 'luaotfload'		=> '&POST_do_man',
 'luatexja'		=> '&POSTluatexja',
 'm-tx'			=> '&POSTmtx',
 'maritime'		=> '&POST_onelevel',
 'markdown'		=> '&POST_do_man',
 'match_parens'		=> '&POST_do_man',
 'mathdesign'		=> '&POSTmathdesign',
 'memoize'		=> '&POST_do_man',
 'mflogo'		=> '&POST_rmsymlink',
 'mitthesis'		=> '&POSTmitthesis',
 'moderncv'		=> '&POST_deref_symlink',
 'montex'		=> '&POSTmontex',
 'mp-geom2d'		=> '&POST_onelevel',
 'mp-neuralnetwork'	=> '&POST_onelevel',
 'mpfonts'		=> '&POSTmpfonts',
 'mpkiviat'		=> '&POST_onelevel',
 'mptopdf'		=> '&POSTmptopdf',
 'musixtex'		=> '&POSTmusixtex',
 'musixtnt'		=> '&POSTmusixtnt',
 'neoschool'		=> '&POST_onelevel',
 'niceframe'		=> '&POST_rmsymlink',
 'nodepthtext'		=> '&POST_onelevel',
 'non-decimal-units'	=> '&POST_onelevel',
 'novel'		=> '&POST_onelevel',
 'numericplots'		=> '&POSTnumericplots',
 'nwejm'		=> '&POSTnwejm',
 'opbible'		=> '&POSTopbible',
 'openmoji'		=> '&POST_onelevel',
 'optex'		=> '&POSToptex',
 'outilsgeomtikz'	=> '&POST_onelevel',
 'pagelayout'		=> '&POSTpagelayout',
 'panneauxroute'	=> '&POST_onelevel',
 'papiergurvan'		=> '&POST_onelevel',
 'pas-cv'		=> '&POSTpas_vc',
 'pbibtex-base'		=> '&POSTpbibtex_base',
 'pdfextra'		=> '&POSTpdfextra',
 'pdftoolbox'		=> '&POSTpdftoolbox',
 'pedigree-perl'	=> '&POSTpedigreeperl',
 'pgf-go'		=> '&POST_onelevel',
 'pgfkeysearch'		=> '&POST_onelevel',
 'pgfornament'		=> '&POSTpgfornament',
 'pgfplots'		=> '&POSTpgfplots',
 'physics2'		=> '&POST_onelevel',
 'pict2e'		=> '&POSTpict2e',
 'pictochrono'		=> '&POST_onelevel',
 'pixelarttikz'		=> '&POST_onelevel',
 'pkfix-helper'		=> '&POSTpkfix_helper',
 'platex'		=> '&POST_preserve_man',
 'pmhanguljamo'		=> '&POST_onelevel',
 'pmx'			=> '&POSTpmx',
 'pmxchords'		=> '&POST_do_man',
 'postit'		=> '&POST_onelevel',
 'prerex'		=> '&POSTprerex',
 'proflycee'		=> '&POST_onelevel',
 'profmaquette'		=> '&POST_onelevel',
 'profsio'		=> '&POST_onelevel',
 'psnfss'		=> '&POSTpsnfss',
 'pst-cox'		=> '&POSTpstcox',
 'pst-flags'		=> '&POST_onelevel',
 'pst-geo'		=> '&POSTpstgeo',
 'ptex-fontmaps'	=> '&POSTptex_fontmaps',
 'ptex2pdf'		=> '&POST_preserve_postcode',
 'pxbase'		=> '&POSTpxbase',
 'pxchfon'		=> '&POSTpxchfon',
 'pynotebook'		=> '&POST_onelevel',
 'quantum-chemistry-bonn' => '&POST_onelevel',
 'quizztex'		=> '&POST_onelevel',
 'quran-en'		=> '&POST_onelevel',
 'quran-es'		=> '&POST_onelevel',
 'quran-id'		=> '&POST_onelevel',
 'qworld'		=> '&POST_onelevel',
 'randintlist'		=> '&POST_onelevel',
 'recipebook'		=> '&POST_rmsymlink',
 'regulatory'		=> '&POST_onelevel',
 'resolsysteme'		=> '&POST_onelevel',
 'rouequestions'	=> '&POST_onelevel',
 'sanskrit'		=> '&POSTsanskrit',
 'schule'		=> '&POSTschule',
 'scontents'		=> '&POSTscontents',
 'scrabble'		=> '&POST_onelevel',
 'shipunov'		=> '&POSTshipunov',
 'sim-os-menus'		=> '&POST_onelevel',
 'simple-resume-cv'	=> '&POST_simple_rmFonts',
 'simple-thesis-dissertation' => '&POST_simple_rmFonts',
 'splitindex'		=> '&POST_do_man',
 'sqltex',		=> '&POSTsqltex',
 'starray'		=> '&POST_onelevel',
 'startex'		=> '&POST_otherformat',
 'stex',		=> '&POSTstex',
 'superiors'		=> '&POST_onelevel',
 'sympycalc'		=> '&POST_onelevel',
 'tablericons'		=> '&POST_onelevel',
 'tango'		=> '&POST_onelevel',
 'tangramtikz'		=> '&POST_onelevel',
 'tap'			=> '&POSTtap',
 'tds'			=> '&POST_rmsymlink', # no README.html
 'tex-ps'		=> '&POSTtex_ps',
 'texdoc'		=> '&POSTtexdoc',
 'texdraw'		=> '&POSTtexdraw',
 'thematicpuzzle'	=> '&POST_onelevel',
 'thmlist'		=> '&POST_onelevel',
 'thumbpdf'		=> '&POST_preserve_man',
 'tikz-cd'		=> '&POSTtikz_cd',
 'tikz-decofonts'	=> '&POST_onelevel',
 'tikz-ext'		=> '&POSTtikz_ext',
 'tikz-triminos'	=> '&POST_onelevel',
 'tikz2d-fr'		=> '&POST_onelevel',
 'tikz3d-fr'		=> '&POST_onelevel',
 'tikzcalendarnotes'	=> '&POST_onelevel',
 'tikzdotncross'	=> '&POST_onelevel',
 'tikzfxgraph'		=> '&POST_onelevel',
 'tikzquads'		=> '&POST_onelevel',
 'tikzquests'		=> '&POST_onelevel',
 'timeop'		=> '&POST_onelevel',
 'tipa-de'		=> '&POST_rmsymlink',
 'tkz-berge'		=> '&POSTtkz_berge',
 'tkz-bernoulli'        => '&POST_onelevel',
 'tkz-grapheur'		=> '&POST_onelevel',
 'tlc3-examples'	=> '&POSTtlc3_examples',
 'tlcockpit'		=> '&POST_do_man',
 'trivialpursuit'	=> '&POST_onelevel',
 'tudscr'		=> '&POSTtudscr',
 'tutodoc'		=> '&POST_onelevel',
 'unicode-alphabets'	=> '&POST_onelevel',
 'unimath-plain-xetex'	=> '&POSTunimath_plain_xetex',
 'updatemarks'		=> '&POST_onelevel',
 'uplatex'		=> '&POST_preserve_man',
 'upmendex'		=> '&POSTupmendex',
 'vectorlogos'		=> '&POST_onelevel',
 'velthuis'		=> '&POSTvelthuis',
 'webquiz'		=> '&POST_deref_symlink',
 'whatsnote'		=> '&POST_onelevel',
 'wordle'		=> '&POST_onelevel',
 'writeongrid'		=> '&POST_onelevel',
 'xcomment'		=> '&POST_onelevel',
 'xetex-pstricks'	=> '&POSTxetexpstricks',
 'xindex'		=> '&POSTxindex',
 'xint-regression'	=> '&POST_onelevel',
 'xsim'			=> '&POSTxsim',
 'xymtex'		=> '&POSTxymtex',
 'zhmetrics'		=> '&POSTzhmetrics',
);


%specialdest = (
);
$standarddest = "texmf-dist";


%specialfmt = (
 'abbr',        'generic',
 'abstyles',    'generic',
 'amstex',      'amstex',
 'antomega',    'omega',
 'arabxetex',   'xelatex',
 'arrayjob',    'generic',
 'babel',       'generic',
 'barr',        'generic',
 'beebe',	'generic',
 'bghyphen',    'generic',
 'bibtex',      'generic',
 'chronosys',   'generic',
 'circ',        'latex',
 'cirth',       'generic',
 'colorprofiles','generic',
 'compare',	'generic',
 'cyrplain',    'plain',
 'dad',		'lualatex',
 'dehyph',	'generic',
 'dehyph-exptl','generic',
 'dratex',      'generic',
 'e-french',	'generic',
 'edmac',       'generic',
 'eijkhout',    'generic',
 'enctex',      'generic',
 'epigram',     'generic',
 'eplain',      'eplain',
 'epsf',        'generic',
 'esint-type1', 'plain',
 'expex',       'generic',
 'fenixpar',    'generic',
 'fltpoint',    'generic',
 'fontch',      'plain',
 'genmisc',     'generic',
 'german',      'generic',
 'hologo',      'generic',
 'hyphenex',    'generic',
 'hyplain',     'plain',
 'ibygrk',      'generic',
 'iftex',       'generic',
 'ifxetex',     'generic',
 'jadetex',     'jadetex',
 'japanese',    'platex',
 'jlreq-deluxe','platex',
 'knuth-lib',	'plain',
 'knuth-local', 'plain',
 'kotex-plain', 'plain',
 'letterspacing','generic',
 'levy',        'generic',  # one .sty, one .tex
 'lollipop',	'lollipop',
 'ltxcmds',	'generic',
 'luatexja',    'luatex',
 'luapstricks',	'lualatex',
 'luaxml',      'luatex',
 'lyluatex',	'luatex',
 'mathabx',     'generic',
 'mathdots',    'generic',
 'mathlig',	'generic',
 'metatex',     'plain',
 'mfpic',       'generic',
 'midnight',    'generic',
 'mkpattern',   'plain',
 'musixtnt',	'generic',
 'nth',		'generic',
 'oberdiek',    'generic',
 'ocherokee',   'lambda',
 'ofs',         'generic',
 'oinuit',      'lambda',
 'opbible',	'optex',
 'outerhbox',	'generic',
 'passivetex',  'xmltex',
 'pdcmac',      'plain',
 'pdf-trans',   'generic',
 'pdfextra',	'optex',
 'philokalia',  'xelatex',
 'pictex',      'generic',
 'placeins-plain',      'plain',
 'plnfss',              'plain',
 'pmx',                 'generic',
 'pstricks',            'generic',
 'pst-cox',             'generic',
 'ptex-base',		'ptex',
 'pwebmac',		'plain',
 'pxbase',              'platex',
 'pxchfon',             'platex',
 'pxjahyper',           'platex',
 'pxrubrica',           'platex',
 'rsfs',                'plain',
 'ruhyphen',            'generic',
 'ruler',		'generic',
 'shapepar',            'generic',
 'spelling',            'luatex',
 'startex',             'startex',
 'swrule',		'generic',
 'systeme',             'generic',
 'tabto-generic',       'generic',
 'tap',                 'generic',
 'texdate',             'generic',
 'texdraw',             'generic',
 'texsis',              'texsis',
 'textmerg',            'generic',
 'tugboat-plain',       'plain',
 'ulem',                'generic',
 'uptex-base',		'uptex',
 'utf8mex',             'mex',
 'variations',          'generic',
 'vaucanson-g',         'generic',
 'vertex',              'plain',
 'wasy',		'plain',
 'xepersian',           'xelatex',
 'xesearch',            'xetex',
 'xetex-def',           'xelatex',
 'xetexfontinfo',       'xetex',
 'xetexko',             'xetex',
 'xevlna',              'xelatex',
 'xindex',              'lualatex',
 'xint',                'generic',
 'xltxtra',             'xelatex',
 'xstring',             'generic',
 'xunicode',            'xelatex',
 'zhspacing',           'xetex',
);
$standardfmt='latex';


# packages which need special .tex/.sty files installed. Usually .lua
# files are intended for the runtime, but it's not uncommon for them to
# be used just for building/testing, so define variables for both.
$standardtex_no_lua
   = '(\.(.bx|4ht|cls|clo|cmap|(code|lib)\.tex'
    . '|def|dfu|fd|fontspec|ldf|opm|py|sty|trsl)'
    . '|^lbx|.*[^c]\.cfg)$'; # not ltxdoc.cfg
$standardtex = "($standardtex_no_lua" . '|\.lua$)';
#
%specialtex = (
 '2up',         '2up\.tex|' . $standardtex,
 'FAQ-en',      'NULL',
 'abbr',        '\.tex',
 'abstyles',    'apreambl.tex', # not a4c.sty
 'acro',	'definitions\.tex|' . $standardtex,
 'adfsymbols',	'adfsymbols-uni\.tex|' . $standardtex,
 'aeskwadraat',	'logos|' . $standardtex,
 'algxpar',	'\.kw\.tex|' . $standardtex,
 'aobs-tikz',   'tikz.*tex',
 'aomart',	'aom_orcid_logo|' . $standardtex,
 'ae',          '\.fd$|\.sty',
 'alchemist',	'alchemist.sty',	# not manual.sty
 'alertmessage','img|' . $standardtex,
 'amscls-doc',	'NULL',
 'amstex',      '\.st[iy]|ams(ppt1|tex).tex|amstex.bug',
 'apa',         '\.apa|\.cls',  # not endfloat.cfg
 'apa6',        'config|' . $standardtex,
 'apa7',        'config|' . $standardtex,
 'apacite',     '\.apc|' . $standardtex,
 'apnum',	'apnum.tex',
 'arabtex',     '(arab|heb)tex\.tex|' . $standardtex,
 'aramaic-serto',	'\.(fd|sty)',	# not .py
 'autoaligne',  	'\.tex|' . $standardtex,
 'autopuncitems',	'\.lua|' . $standardtex,
 'autotype',		'\.txt|' . $standardtex,
 'axessibility',	'\.lua|' . $standardtex,
 'babel',       	'bl?plain\.tex|' . $standardtex,
 'babel-french',        '\.lua|' . $standardtex,
 'babel-georgian',      'georgiancaps\.tex|' . $standardtex,
 'babel-latin',		'\.lua|' . $standardtex,
 'babelbib',    '\.bdf|\.sty',
 'bagpipe',	'bagpipex?\.(tex|ini)',
 'bangla',	'banglamap\.tex|' . $standardtex,
 'bangtex',     'bangfont\.tex|' . $standardtex,
 'bangorcsthesis',	'Bangor-Logo\.tex|' . $standardtex,
 'bardiag',     '\.bar|\.sty|\.cfg',
 'barr',        'diagxy.tex',
 'base',        'idx.tex|lablst.tex|latexbug.tex|lablst.tex|docstrip.tex|nfssfont.tex|sample2e.tex|small2e.tex|testpage.tex|ltxcheck.tex|\.cfg|\.fd$|\.cls|\.clo|\.ltx|\.sty|\.def|^\.',
 'bbold',       'bbold.sty|\.fd',       # no fonttabl.sty
 'bclogo',      'bc[^l].*\.(tex|pdf|eps|mps)|bclogo\.sty',
 'beamer-rl',	'\.dict|' . $standardtex,
 'beamer2thesis','\.jpg|' . $standardtex,
 'beamertheme-npbt',	'images|' . $standardtex,
 'beamertheme-spectrum',    '\.jpg|' . $standardtex,
 'bezierplot',	'\.lua|' . $standardtex,
 'bghyphen',    '\.tex',
 'biblatex-ext','\.lua|' . $standardtex,
 'biblatex-gost','\.(.bx|def)$',	# not .cfg
 'biblatex-gb7714-2015', '\.(def|[cb]bx)$',	# not .py
 'bibtex',      'apalike\..*|' . $standardtex,
 'bidi',        '^bidi\.tex|' . $standardtex,
 'blockdraw_mp','NULL',                 # skip .sty's
 'bookshelf',	'^bookshelf-svgnam\.tex|' . $standardtex,
 'booktabs-de', 'NULL',                 # doc package
 'booktabs-fr', 'NULL',                 # doc package
 'bmstu',	'img|sty|logo.pdf|' . $standardtex,
 'bussproofs-extra', 'bussproofs-extra.sty',	# not bpextra.sty
 'bracealign',  'bracealign.sty',		# not -doc.sty
 'breqn',       '\.sty|\.sym',
 'buctthesis',	'buct.*cls',
 'c-pascal',    '^[^d].*\.tex|' . $standardtex, # not demo*.tex
 'calcfrac',	'^calcfrac\.tex|' . $standardtex,
 'calxxxx',     'cal.*\.tex',
 'calxxxx-yyyy','cal.*\.tex',
 'captcont',    '\.sty|[^c]\.cfg',      # omit ltxdoc.cfg, would be system-wide
 'captdef',     '^..[^s].*\.sty',       # not miscdoc.sty
 'carlisle',    '\.sty|\.ltx',
 'char2path',	'\.sty',		# not build.lua
 'checkcites',	'NULL',  # all in scripts
 'chemfig',     '(t-)?chemfig(-lewis)?.tex|' . $standardtex,
 'chemformula', '\.sty$',		# not chemformula-manual.cls
 'chemstyle',   '\.jdf|' . $standardtex,
 'chhaya',	'sankshep.tex|' . $standardtex,
 'chickenize',  'chickenize\.tex|\.lua|' . $standardtex,
 'chinese-jfm',	'\.lua',
 'chronosys',   '^(x-)?chronosys',
 'cirth',       'num\.tex',
 'cjw',         '\.tex|' . $standardtex,
 'clock',       '\.sty|clock\.tex',
 'cloze',	'\.tex|' . $standardtex,
 'cluttex',	'NULL', # not build.lua or checkglobal.lua
 'cmap',        '\.cmap|' . $standardtex,
 'codebox',	'\.sty',		# not ctxdoc-en.cls
 'codehigh',	'\.lua$|' . $standardtex,
 'codepage',    '\.sty|\.tex',
 'colorprofiles',	'\.(icc|sty|tex)$',
 'colortab',    'colortab\.tex|' . $standardtex,
 'compare',	'\.tex',
 'components',  'NULL',
 'concepts',    'concepts\.sty',
 'contracard',  "contracard\.(cls|sty)",
 'contour',     '\.cfg|\.sty|\.cnt',
 'cs-techrep',	'\.cls',		# not docstrip.cfg
 'csplain',     '\.tex',
 'ctib',        '\.sty|\.clo|\.ldf|\.cls|\.def|\.fd$|ctib\.tex',
 'custbib',     '\.mbs|\.tex',
 'custom-bib',  '\.mbs|\.tex',
 'cweb-latex',  'cwebbase.tex|' . $standardtex,
 'cyrillic',    '\.tex|\.sty|\.fd$|\.def',
 'cyrplain',    '.',
 'dashundergaps','\.sty', # not .cls
 'dccpaper',    'dccpaper-base.tex|dccpaper-by.(eps|pdf)|' . $standardtex,
 'dehyph',	'.',
 'dehyph-exptl','de.*-x-.*\.tex|\.pat',
 'dialogl',     '[^c]\.sty|listout\.tex', # not dialogl-doc.sty
 'didactic',	'\.sty',	# not .py
 'didec',	'didec\.sty',	# not didec.doc.sty
 'din1505',     'NULL', # no tex files, only natbib.cfg, would be system-wide
 'dirtree',     '\.tex|' . $standardtex,
 'digestif',	'NULL', # script
 'disser',      '\.rtx|' . $standardtex,
 'dlfltxb',     '\.sty', # no sample.cfg
 'docbytex',	'docby\.tex',
 'doclicense',  'images|license-texts|' . $standardtex,
 'ducksay',	'\.tex|' . $standardtex,
 'duckuments',	'example-image.*pdf|' . $standardtex,
 'ean',         'ean[0-9]*\.tex',
 'easy',        'easy.*\.sty',          # no mydoc.sty
 'ecv',         '\.sty|\.cls|\.ldf',    # no docstrip.cfg, else system-wide
 'edmac',       'edmac.tex|edstanza.tex|\.sty',
 'elpres',	'ep-ball-.*|' . $standardtex,
 'els-cas-templates',	'thumbnails|' . $standardtex,
 'emo',		'emo-graphics|emo.sty.ltxml|' . $standardtex,
 'enctex',	'(1250-|852-|csfmacro|enc-u|encmacro|il2-|kam-'
                  . '|mixcodes|noprefnt|plain-|polyset|t1macro|utf8).*\.tex',
 'endfloat',	'\.sty',		# not *.cfg
 'eoldef',	'eoldef\.(tex|sty)$',
 'epsf-dvipdfmx', 'epsf-dvipdfmx\.tex',
 'esami',       '\.sty|\.lng',          # no example .cfg
 'euflag',	'euflag.sty',		# not classpack.sty
 'expex',       '\.tex|' . $standardtex,
 'exsheets',    'dicts|' . $standardtex,
 'eijkhout',    '\.tex',
 'einfuehrung', 'NULL',                 # doc package
 'einfuehrung2','NULL',                 # doc package
 'eltex',       'eltex.*tex',
 'elsarticle',  'elsarticle.cls',       # no rvdtx, pdfwidgets
 'endofproofwd','\.pdf_tex$|endofproofwd\.pdf|' . $standardtex,
 'enigma',      'NULL',
 'epigram',     'epigram.tex',
 'epsf',        'epsf.(tex|sty)',
 'epslatex-fr', 'NULL',
 'esint-type1', 'esint.tex',
 'etdipa',	'NULL',			# doc says "copy all files"
 'europasscv',  '(icon|logo).*\.pdf|' . $standardtex,
 'europecv',    'EuropeFlag|europasslogo|\.cls|\.def',
 'exam-n',	'\.cls',		# not .clo example file
 'expltools',	'NULL',			# doc
 'fancymag',	'img|' . $standardtex,
 'fancyqr',	'\.code|' . $standardtex,
 'fancytooltips',       'fancytipmark[.1-4].*|' . $standardtex,
 'farbe',	'farbe\.tex|' . $standardtex,
 'fewerfloatpages',	'\.sty$',	# not l3doc-TUB.cls
 'figflow',     '\.tex',
 'fistrum',  	'\.ftd|' . $standardtex,
 'fjodor',      'fjodor\.sty',          # not srbook-mem.sty
 'flashmovie',  '\.swf|' . $standardtex,
 'fltpoint',    '\.sty|\.tex',
 'fnpct',	'\.sty',		# not *-manual.cls
 'fntproof',    'fntproof.tex',
 'font-change', 'default-amssymbols.tex|font_.*\.tex',
 'fontawesome',	'fontawesomesymbols-.*\.tex|' . $standardtex,
 'fontawesome5','\.lua|' . $standardtex,
 'fontch',      '\.tex',
 'fontloader-luaotfload',    '\.lua$',
 'fontscale',	'\.sty',		# not beery.cls
 'fontscripts',	'NULL',			# everything in source
 'footnpag',    'footnpag\.sty',
 'fragments',   '\.tex|' . $standardtex,
 'frame',       'frame\.tex|' . $standardtex,
 'francais-bst','francaisbst.tex',
 'frankenstein','\.(sto|stq)|' . $standardtex,
 'gates',       '\.lua|gates.tex|' . $standardtex, # both t-gates and gates
 'genealogytree','code\.tex|' . $standardtex,
 'genmisc',     '\.sty|\.tex',
 'geometry',    '\.sty|\.clo|\.ldf|\.cls|\.def|\.fd$', # not cfg
 'geometry-de', 'NULL',                 # all doc
 'german',      '\.sty',
 'getoptk',     '\.tex',
 'gfdl',	'gfdl-.*1p.\.tex|' . $standardtex,
 'gfnotation',	'notation\.tex',
 'ghsystem',    '\.sty',		# not manual.cls
 'ginpenc',     '\.gie|\.sty',
 'gobble',	'gobble(-user)?\.tex|' . $standardtex,
 'graphics-pln','^[^e].*\.tex|.*\.sty',  # not exmpl*
 'greek-inputenc', '\.def|\.dfu$',
 'hanoi',       'hanoi\.tex',
 'harvmac',     'mac\.tex',
 'hduthesis',   'hdu-.*\.pdf|' . $standardtex, # tex/ subdir, better not to flatten
 'hc',          '\.hld|' . $standardtex,
 'hitszthesis',	'\.(sty|cls)$',		# not .cfg
 'hlist',	'hlist\.tex|' . $standardtex,
 'hobby',       'code\.tex|' . $standardtex,
 'hrefhide',    '\.sty|[^c]\.cfg',        # omit ltxdoc.cfg, would be system-wide
 'huawei',	'.*cover-picture\.pdf|' . $standardtex,
 'hustthesis',	'hust-title.pdf|' . $standardtex,
 'hustvisual',	'hustvisual\.sty|\.def',	# not -doc.sty
 'hvextern',	'hv(?!doctools).*\.sty|\.lua',  # negative lookahead fun
 'hvfloat',	'hvfloat.*\.inc|' . $standardtex,
 'hwemoji',	'hwemoji-assets.pdf|' . $standardtex,
 'hyper',       '^[^d].*\.sty|\.hyp',     # not defpattern.sty
 'hyphenex',    'ushyphex\.tex',
 'hyplain',     '(hyrules|hy.*plain|hylang)\..*',
 'iaria',	'\.cls',		# not docstrip.cfg
 'iaria-lite',	'\.cls',		# not docstrip.cfg
 'ibygrk',      'iby4extr.tex|ibycus4.tex|ibycusps.tex|pssetiby.tex|setiby4.tex|tlgsqq.tex|version4.tex|' . $standardtex,
 'ieejtran',	'NULL',			# not .py
 'ifis-macros',	'ifis[^-].*.tex',	# not ifis-macros-doc
 'ifmslide',    '[^n]\.(eps|pdf|jpg)|' . $standardtex,  # not ifmman.pdf
 'ijsra',	'ijsra_logo.*|' . $standardtex,
 'insbox',      'insbox.tex',
 'install-latex-guide-zh-cn','NULL',		# doc package
 'interactiveworkbook', 'NULL', # done in POSTinteractiveworkbook
 'interpreter', 'interpreter.(tex|lua)|' . $standardtex,
 'iodhbwm',	'logo\.png$|' . $standardtex,
 'ipaex-type1', '\.fdx|' . $standardtex,
 'iso10303',    'a.*tex|b.*tex|e.*tex|stp.*tex|\.sty|\.4ht',
 'isodate',     '\.idf|\.sty',
 'isodoc',      '\.cls|iso.*\.ldf',       # not *.sty
 'jadetex',     '\.ltx|\.def|\.tex|\.ini|\.sty|\.fd',
 'jeuxcartes',	'CaJ.*\.(png|pdf)|' . $standardtex,
 'jieeetran',	'NULL',			# not .py
 'js-misc',     '(cassette|idverb|js-misc|schild|sperr|xfig)\.tex',
 'jslectureplanner', '\.lps|' . $standardtex,
 'jupynotex',	'\.py|' . $standardtex,
 'kanaparser',	'kanaparser.(tex|lua)$',
 'kanbun',	'\.lua$|' . $standardtex,
 'karnaugh',    'kvmacros.tex',
 'kastrup',     'binhex.tex|' . $standardtex,
 'kdpcover',    'kdpcover-(sig|vol).*pdf|' . $standardtex,
 'keystroke',   'keystroke_.*|\.sty',
 'knuth-lib',	'\.tex',
 'knuth-local', '\.tex',
 'koma-script-sfs', '\.lco',
 'kotex-plain', '\.tex',
 'kotex-utf',   'hfontspec.default|\.dfu|' . $standardtex,
 'kpfonts',     '\.sty|\.fd',
 'kuvio',       '\.tex|\.sty',
 'kvoptions',	'kvoptions(-patch)?\.sty$',
 'labyrinth',   '\.sty',        # not .cfg
 'langnames',   'ln_.*tex|' . $standardtex,
 'langsci',	'(langsci(b|_|-[^d])|tbls|.*sp-).*', # not langsci-doc
 'lastpage',    '\.sty',        # not .cfg
 'latex-bib-ex',	'NULL',	# keep doc together
 'latex-bib2-ex',	'NULL', # keep doc together
 'latex-brochure',	'NULL', # keep doc together
 'latex-course',	'NULL', # keep doc together
 'latex-doc-ptr',	'NULL', # keep doc together
 'latex-for-undergraduates', 'NULL', # keep doc together
 'latex-referenz',	'NULL', # keep doc together
 'latex-veryshortguide','NULL', # keep doc together
 'latex4wp',    	'NULL', # keep doc together
 'latex4wp-it', 	'NULL', # keep doc together
 'leadsheets',		'\.library\.|' . $standardtex,
 'lecturer',    	'(t-)?lecturer.(tex|sty)|ltr-',
 'leipzig',     	'leipzig\.tex|' . $standardtex,
 'letterspacing',	'\.tex',
 'lettre',      'default\.ins|\.cls',
 'lettrine',    'contrib|' . $standardtex, # *.cfl
 'levy',        'greekmacros.tex|' . $standardtex,
 'lgrx',        '\.dfu$|' . $standardtex,
 'lhcyr',       'lhcyr.*',
 'librarian',   '(t-)?librarian.(tex|sty)',
 'light-latex-make',	'NULL',	# script package
 'lion-msc',	'-logo.pdf|' . $standardtex,
 'lipsum',	'\.ltd\.tex|' . $standardtex,
 'listbib',     'listbib.tex|' . $standardtex,
 'listings',     '\.prf|' . $standardtex,
 'listings-ext','\.sty',        # not .cfg
 'listofitems',	'listofitems(old)?.tex|' . $standardtex,
 'litetable',	'\.sty',	# not build.lua
 'logic',       'milstd\.tex|' . $standardtex,
 'lollipop',	'\.ini|lollipop\.tex|lollipop-.*tex|lollipop.tex',
 'longmath',	'longmath\.(lua|sty)',	# not -doc
 'lparse',	'lparse.tex|' . $standardtex,
 'lt3luabridge','lt3luabridge\.(tex|sty)$',
 'ltxkeys',     '\.sty|\.clo|\.ldf|\.cls|\.def|\.fd$',  # not cfg
 'lua-uni-algos',    '\.lua|' . $standardtex,
 'lua-check-hyphen', '\.lua|' . $standardtex,
 'lua-ul',	'\.lua|' . $standardtex,
 'lua-visual-debug', '\.lua|' . $standardtex,
 'lua2dox',     'NULL',         # .def is lua code
 'luaaddplot',	'luaaddplot.tex|' . $standardtex,
 'luabidi',	'(arabmaths|footnoterule)|' . $standardtex,
 'luaintro',    'NULL',         # doc pkg
 'luakeys',	'\.lua|luakeys(-debug)?\.tex|' . $standardtex,
 'lualatex-math', '\.sty',      # not phst-doc.cls
 'luamathalign','luam.*\.lua|\.sty',	# not build.lua
 'luamesh',	'\.sty',        # not lltxdoc.cls
 'luaoptions',	'(\.sty|\.lua)$',	# not .cls
 'luapackageloader', '\.lua|' . $standardtex,
 'luaprogtable','\.lua|' . $standardtex,
 'luapstricks',	'\.lua|' . $standardtex,
 'luatexko',    '\.lua|' . $standardtex,
 'luatikz',     '\.lua|' . $standardtex,
 'luatodonotes','\.lua|' . $standardtex,
 'luavlna',	'luavlna.*\.lua|luavlna\.tex|' . $standardtex,
 'luaxml',      '\.lua|' . $standardtex,
 'lutabulartools', '\.lua|' . $standardtex,
 'lyluatex',	'\.sty',	# not *.cls
 'magyar',      'NULL',  # do not install in runtime, conflicts with babel
 'mahjong',	'tiles|' . $standardtex,
 'make4ht',	'NULL',  # all in scripts
 'makelabels',	'\.lco|' . $standardtex,
 'mandi',	'\.sty',	# not .py
 'manjutex',    '\.sty|\.clo|\.ldf|\.cls|\.def|\.fd$|manju.tex',
 'marathi',	'namuna-.*\.tex|' . $standardtex,
 'matapli',	'matapli\.cls',	# not mataplidoc.cls
 'math-e',      'NULL',
 'math-into-latex-4', 'NULL',
 'mathabx',     'mathabx\.(dcl|tex)|' . $standardtex,
 'mathdots',    'mathdots\.tex|' . $standardtex,
 'mathlig',	'\.tex',
 'mathsemantics','mathsemantics(?!-documentation-local).*\.sty',
 'mdframed',    '\.mdf|' . $standardtex,
 'measurebox',	'measurebox\.tex',
 'media4svg',	'\.lua|' . $standardtex,
 'metanorma',	'x?l$|' . $standardtex,
 'metatex',     'metatex.tex',
 'metsymb',	'\.(sty|fd)$',	# not .py
 'mff',         '\.sty|mf[^f].*\.tex',
 'mfpic',       'mfpic.tex|mfpic.sty|mfppatch.tex',
 'mfpic4ode',   'mfpic4ode.tex|' . $standardtex,
 'mhchem',	'hpstatement.inc|' . $standardtex,
 'midnight',    '\.tex',
 'mil3',        'NULL',
 'minim',	'\.(lua|tex|sty|ini)$',
 'minim-math',	'\.(lua|tex)$',
 'minim-mp',	'\.(ini|tex)|' . $standardtex,
 'minim-pdf',	'\.(lua|tex)$',
 'minim-xmp',	'\.(lua|tex)$',
 'minitoc',     '\.ml[do]|' . $standardtex,
 'misc',        '\.sty|\.ltx|\.cls',
 'mkpattern',   'mkpatter.tex',
 'mlawriter',	'mlawriter.tex',
 'mnhyphn',	'mnhyphn.tex',
 'moderncv',	'moderncv.*\.tex|' . $standardtex,
 'montex',      '(mlsgalig|mlstrans|mnhyphex)\.tex|' . $standardtex,
 'mpman-ru',    'NULL',         # doc package
 'msg',         '-msg\.tex|' . $standardtex,
 'msu-thesis',  'gb4e-compat\.tex|' . $standardtex,
 'multirow',    '^..[^s].*\.sty', # not miscdoc.sty
 'musixtex',    'NULL',           # not musixdoc.sty
 'musixtnt',    'musixtnt.tex',
 'mycv',        'mycv.*\.tex|' . $standardtex,
 'mylatex',     	'.*\.ltx',
 'mylatexformat',       '.*\.ltx',
 'nag',         '\.nag|' . $standardtex,
 'navigator',   '(t-)?navigator.tex|' . $standardtex,
 'nchairx',	'.*(logo|header)\.pdf|' . $standardtex,
 'nddiss',      '\.sty|\.clo|\.ldf|\.cls|\.def|\.fd$',
 'newpax',	'.*\.lua|' . $standardtex,
 'newpx',	'.*-subs\.tex|' . $standardtex,
 'newtx',	'.*-subs\.tex|' . $standardtex,
 'nodetree',	'nodetree.(tex|lua)|' . $standardtex,
 'noindentafter',       "noindentafter\.sty",
 'nomencl',	'\.sty',		# not .cfg
 'notebeamer',	'\.sty',		# not build.lua
 'notes',       '[^s]\.(eps|pdf|png)|' . $standardtex,  # not notes.pdf
 'nth',		'\.sty',
 'ntheorem',    '\.sty|\.std',
 'nucleardata',	'\.(csv|hd|pytxcode)|' . $standardtex,
 'nwafuthesis',	'nwafuthesis\.cls', # not *doc.cls
 'nwejm',	'[^c]\.cfg$|\.(.bx|sty|cls)$',	# not ltxdoc.cfg
 'ocgx',        'tikz.*\.code\.tex|' . $standardtex,
 'odsfile',     '\.lua|' . $standardtex,
 'ofs',         '^ofs\.tex|ofsdef\.tex|ofs-.*\.tex|\.sty|a.*\.tex|.*fn\.tex',
 'olsak-misc',	'(booklet|cropmarks|qrcode|scanbase|scancsv|xmlparser)\.tex',
 'omgtudoc-asoiu','\.tpt|' . $standardtex,
 'onedown',	'\.dict|' . $standardtex,
 'optex',	'\.opm|\.ini',
 'outerhbox',	'\.sty',
 'overarrows',	'[^c]\.sty',		# not -doc.sty
 'pageslts',    '\.sty|[^c]\.cfg',      # not ltxdoc.cfg
 'papermas',    '\.sty|[^c]\.cfg',      # not ltxdoc.cfg, would be system-wide
 'passivetex',  '\.xmt|' . $standardtex,
 'patch',       '\.tex',
 'pdf-trans',   'pdf-trans.tex',
 'pdfcprot',    '\.cpa|\.sty',
 'pdfextra',    '\.opm',	# not .sty, done in posthook
 'pdfmanagement-testphase', '\.(lua|ltx)$|' . $standardtex,
 'pdftexcmds',	'\.lua$|' . $standardtex,
 'pdfscreen',   'overlay.*pdf|but.*pdf|left.*pdf|right\.pdf|pdfscreen.sty',
 'pdfmsym',	'pdfmsym\.tex$',
 'pdfslide',    '\.jpg|\.sty|\.clo|\.cfg|meta.*\.pdf',
 'pdfx',        '\.(def|dfu|icc|xmp)$|(glyph|Profiles).*tex|pdfx\.sty|ICC_LIC',
 'pdfxup',	'(template\.tex|\.xup)$',
 'penlight',	'\.lua$|' . $standardtex,
 'petri-nets',  'pnets\.tex|pntext\.tex|\.sty|pndraw\.tex|pnversion\.tex|\.sty|pndraw\.tex',
 'profcollege',	'PfC.*\.tex|' . $standardtex,
 'pfarrei',	'a5toa4\.tex|' . $standardtex,
 'pgf-blur',    'tikzlibraryshadows.blur.code.tex',
 'pgf-periodictable', 'pgfPT\.[bdflnp].*\.tex|pgfPT.*library.*\.tex|pgfPT.coordinates.tex|pgfPT_radio_symbol.pdf|flags|lattice|spectra|translations|' . $standardtex, # not colorSchemes.tex or radio_symbol.tex
 'pgf-spectra', 'pgf-spectra.*(library|data).*tex|' . $standardtex,
 'pgfmolbio',   'pgfmolbio\..*\.|' . $standardtex, # .lua+.tex submodules
 'pgfornament-han', 'han$|' . $standardtex,
 'phonenumbers','[A-Z][A-Z]_.*|Landes.*tex|' . $standardtex,
 'pictex',      '\.sty|\.tex',
 'pictexsum',   'NULL',         # doc pkg
 'pigpen',      'pigpen\.tex|' . $standardtex,
 'pitex',       'pitex\.tex|\.ptx|' . $standardtex,
 'pkgloader',   '^[^t].*\.sty', # not .cls, not test*.sty
 'placeins-plain',      'placeins.tex',
 'plain',	'\.tex',
 'plain-widow',	'pxw.*\.tex',
 'plantuml',,	'\.lua|' . $standardtex,
 'plgraph',     '\.tex',
 'plipsum',     'plipsum.tex',
 'plnfss',      '\.tex|\.pfd',
 'plstmary',    '^stmary.tex',
 'pmx',         'pmx\.tex|' . $standardtex,
 'polexpr',	'polexpr.*\.tex|' . $standardtex,
 'poormanlog',	'poormanlog\.tex|' . $standardtex,
 'poster-mac',  'poster\.tex|' . $standardtex,
 'poetrytex',   'poetrytex\.sty$', # not -style
 'powerdot',    '\.ps|images|' . $standardtex,
 'ppchtex',     'm.*tex|m.*sty',
 'ppt-slides',	'ppt-(schemes|templates)|' . $standardtex,
 'present',     'present.tex',
 'presentations-en',    'NULL', # doc pkg
 'proflycee',	'\.sty',	# not .py
 'projlib',	'old-modules|' . $standardtex,
 'prosper',     '\.ps|\.eps|\.sty|\.cls',
 'pstricks',    'pst-*\.tex',
 'pstricks-examples',   'NULL',
 'pstricks-examples-en','NULL',
 'pst-bspline', 'pst-bspline\.(tex|sty)',
 'pst-cox',     'pst-cox(coor|eterp)\.tex',
 'pst-eucl-translation-bg', 'NULL',
 'pst-geo',     'pst-map.*\.tex|pst-map.*\.sty',
 'pst-infixplot', 'infix-RPN\.tex|pst-infixplot\.tex',
 'pst-poker',   '\.eps|(color|bw)\.pdf|' . $standardtex,
 'pst-text',    'pst-(char|text)\.(tex|sty)',
 'ptex-base',	'\.(ini|lib|src)$|(ascii-jplain|kinsoku|ptex).tex$',
 'ptex-manual', 'NULL', # keep ptex-manual.sty in doc
 'punk',        'NULL', # have separate punk-latex
 'pwebmac',	'pwebmac.tex',
 'pyluatex',	'\.(lua|py)$|' . $standardtex,
 'qobitree',    'qobitree.tex',
 'r_und_s',     '\.tex|\.sty',
 'randomlist',	'randomlist\.tex|' . $standardtex,
 'realcalc',    'realcalc.tex',
 'realhats',	'^hats|' . $standardtex,
 'rerunfilecheck', '\.sty',  # not *example.cfg
 'resumemac',   'resumemac.tex',
 'returntogrid','\.lua|' . $standardtex,
 'reverxii',    '\.tex',
 'revtex',      '\.sty|\.cls|\.rtx',
 'rit-fonts',	'rit-fonts\.sty',	# not rit-doc.sty
 'rlepsf',      'rlepsf.tex',
 'rsfs',        'scrload\.tex|' . $standardtex,
 'ruhyphen',    '\.tex',
 'ruler',	'\.tex',
# 'rutitlepage',	'rutitlepage-logo.*|' . $standardtex, # .tds.zip
 'sa-tikz',     'tikzlib.*tex|' . $standardtex,
 'sansmath',    '^..[^s].*\.sty',	# not miscdoc.sty
 'sapthesis',	'sapienzalogo.pdf|' . $standardtex,
 'scaletextbullet',	'\.sty$',	# not .cls
 'scholax',	'.*-subs\.tex|' . $standardtex,
 'scrhack',	'.hak$|' . $standardtex,
 'scrlttr2copy','\.lco',
 'sdaps',	'\.dict$|code128|' . $standardtex,
 'sduthesis',	'figures|' . $standardtex,
 'seatingchart','\.sc|' . $standardtex,
 'seminar',     '\.bug|\.bg?|\.cls|\.sty|2up.tex',
 'shade',       'shade\.tex',  # not description.tex
 'shortmathj',	'shortmathj\.sty',
 'shadethm',    '\.sth|' . $standardtex,
 'sillypage',	'sillywalk-map.pdf|' . $standardtex,
 'simpleicons',	'glyphs-.*tex|' . $standardtex,
 'simplekv',	'simplekv\.tex|' . $standardtex,
 'simurgh',     '\.lua|' . $standardtex,
 'spanish',     'NULL',  # babel conflict
 'showexpl',    '\.sty|\.clo|\.ldf|\.cls|\.def|\.fd$',  # not cfg
 'skeycommand', '\.sty|\.clo|\.ldf|\.cls|\.def|\.fd$',  # not cfg
 'smartdiagram','code\.tex|' . $standardtex,
 'songproj',	'\.sty',		# not .py
 'splitindex',  'splitindex\.tex|' . $standardtex,
 'spotcolor',   'spotcolor.*\.tex|' . $standardtex,
 'standalone',	'standalone\.tex|' . $standardtex,
 'startex',     '\.(tex|stx|lan)$',
 'stretchy',	'str.*\.tex',
 'stricttex',	$standardtex,
 'struktex',	$standardtex_no_lua,
 'subfigure',   '\.sty|[^c]\.cfg',      # not ltxdoc.cfg, would be system-wide
 'syntax',      'syntax\.tex',
 'systeme',     '^systeme\.tex$|' . $standardtex,
 'tabls',       '^[^m].*\.sty',         # not miscdoc.sty
 'tabto-generic','tabto.tex',
 'tagpdf',      '\.(lua|csv|html|ltx)$|' . $standardtex,
 'tap',         ,'tap.tex',
 'tasks',	'\.(sty|cfg)$',		# not tasks-manual.cls
 'taylor',      'diagrams.tex',
 'tds',		'NULL',			# doc pkg
 'termmenu',    '\.tex',
 'termsim',	'\.sty',		# not ctxdoc-en.cls
 'testidx',	'testidx-glossaries.*\.(bib|tex)$|' . $standardtex,
 'tex-ewd',     'dotnot.tex',
 'tex-ini-files','\.(dat|ini|tex)$',
 'tex-ps',      '\.tex',
 'texapi',      'texapi\.tex',
 'texdimens',	'texdimens\.tex$|' . $standardtex,
 'texdoc',	'NULL',		# not texdoc-doc.cls
 'texdraw',     'tex$|' . $standardtex,
 'texfindpkg',	'\.json.gz$',
 'texosquery',  '\.tex$|' . $standardtex,
 'texproposal', 'NULL',
 'texsis',      '\.txs|TXS.*tex|texsis.tex',
 'thesis-ekf',  'hazy-logo|' . $standardtex,
 'thesis-titlepage-fhac','LOGO.*|' . $standardtex,
 'threeparttable',      '^..[^s].*\.sty',	# not miscdoc.sty
 'thubeamer',	'thulogo.pdf|' . $standardtex,
 'ticket',      '\.tdf|' . $standardtex,
 'tikz-cd',     'tikz-cd.sty|tikzlibrarycd.code.tex',   # not pgfmanual.sty
 'tikz-mirror-lens',	'\.cwl|' . $standardtex,
 'tikz-qtree',  '(pgf|tikz-)(subpic|q?tree(-compat)?)\.(tex|sty)',
 'tikz-sfc',		'\.code\.tex$',
 'tikz-trackschematic',	'\.code\.tex$|tic\.sty$', # not *documentation.sty
 'tikzducks',	'(code|-(generic|plain)).tex$|ducks\.sty|\.mkiv$',
 'tikzposter',  'tikzposter[^-].*\.tex|' . $standardtex,
 # tipa: we want to install all .sty except tipaman|boxchar|codelist.
 # i can't explain why ^(?!...), the "zero-width negative look-ahead
 # assertion", is what works, but it does. found in (and modified from)
 # the perl cookbook,
 # http://docstore.mik.ua/orelly/perl/cookbook/ch06_18.htm,
 # Expressing AND, OR, and NOT in a Single Pattern.  Fun, huh?
 'tipa',        '\.fd$|\.def$|^(?!tipaman|boxchar|codelist).*\.sty$',
 'tipa-de',     'NULL',                 # doc package
 'titleref',    '^..[^s].*\.sty',       # not miscdoc.sty
 'tikz-feynman','\.lua|' . $standardtex,
 'tkz-orm',     'tkz.*\.sty',           # no pgfmanual.sty
 'tlc2',        'NULL',                 # doc package
 'tlmgr-intro-zh-cn', 'NULL',
 'tokcycle',	'tokcycle\.tex|' . $standardtex,
 'tokmap',	'tokmap\.tex|' . $standardtex,
 'tools',       '\.cfg|\.sty|\.clo|\.cls|\.def|\.fd$|.?\.tex|^\.tex$',
 'toptesi',	'toptesi\.cfg|\.sty|\.cls',
 'translator',  '\.dict|translator-language-mappings.tex|' . $standardtex,
 'translation-array-fr',        'NULL', # doc
 'translation-europecv-de',     'NULL', # doc
 'translation-tabbing-fr',      'NULL', # doc
 'treetex',     '(treetex|l_pic|classes)\.tex',
 'trigonometry','\.tex',
 'truncate',    '^..[^s].*\.sty',       # not miscdoc.sty
 'tsvtemplate',	'\.tex|' . $standardtex,
 'tudscr',	'DDC.*|TUD.*|' . $standardtex,
 'tugboat-plain','\.cmn|' . $standardtex,
 'twemojis',	'all-twemojis\.pdf|' . $standardtex,
 'tuple',	'^tuple\.tex|' . $standardtex,
 'typstfun',	'NULL',			# doc pkg
 'uantwerpendocs',	'Images|Logos|\.data|' . $standardtex,
 'ucs',		'data|' . $standardtex,
 'uestcthesis', '\.png|' . $standardtex,
 'udesoftec',   'udesoftec-cover|\.cls|\.def',
 'udiss',	'logos|' . $standardtex,
 'ulthese',     'ulthese.cls|ul_p\.(eps|pdf)', # logo for the university
 'underoverlap','underoverlap\.sty',
 'underscore',  '^..[^s].*\.sty',       # not miscdoc.sty
 'undolabl',    '\.sty|[^c]\.cfg',      # omit ltxdoc.cfg, would be system-wide
 'unibidi-lua',	'unibidi-lua.tex|' . $standardtex,
 'unicode-alphabets',	'\..sv|' . $standardtex,
 'unicode-math-input',	'\.sty|unicode-math-input-table\.tex',	# not .py
 'unicodefonttable',	'(\.sty|unicodefont.tex)$',	# not .cls
 'unimath-plain-xetex',	'unimath-plain-xetex\.tex',
 'uninormalize',	'\.lua|' . $standardtex,
 'unitn-bimrep','\.jpg|' . $standardtex,
 'univie-ling',	'univie.*logo.*.pdf|' . $standardtex,
 'universa',    '\.fd|uni\.sty',        # not unidoc.sty
 'uowthesis',   '\.(eps|png)|' . $standardtex,
 'upca',        '^upca\.tex',
 'uptex-base',	'\.(ini|src|tex)$',
 'url',         '^[^m].*\.sty',         # not miscdoc.sty
 'utf8mex',     '^utf8.*\.(ini|tex)',
 'utfsym',	'\.tikz$|' . $standardtex,
 'variations',  '^variations\.tex|' . $standardtex,  # not docvariations.tex
 'varisize',    '\.tex',
 'varwidth',    '^..[^s].*\.sty',       # not miscdoc.sty
 'vaucanson-g', '\.(def|tex)|' . $standardtex,
 'verifica',	'\.cls',		# not ver-doc.sty
 'vertex',      'vertex\.tex|' . $standardtex,
 'vhistory',    '\.sty',                # not hyperref.cfg
 'visualtoks',  'visualtoks\.tex|' . $standardtex,
 'voss-mathmode','NULL',                # doc
 'vrb',         'vrb\.tex',
 'vruler',      '^..[^s].*\.sty', # not miscdoc.sty
 'wallcalendar','i18n|\.lua$|' . $standardtex,
 'wasy',        'wasyfont\.tex',
 'witharrows',  'witharrows\.tex|' . $standardtex,
 'wordcount',   '\.tex',
 'worldflags',	'worldflag_.*tex$|' . $standardtex,
 'xcharter',	'(-subs\.tex|\.fd|\.def|\.fontspec|\.sty)$', # not .py
 'xcomment',    'xcomment\.tex|' . $standardtex,
 'xduthesis',	'\.eps|' . $standardtex,
 'xepersian',   'xepersian-mathsdigitspec\.tex|' . $standardtex,
 'xepersian-hm','xepersian-.*-kashida\.tex|' . $standardtex,
 'xesearch',    't-.*|' . $standardtex,
 'xetexfontinfo','\.tex',
 'xetexko',     '\.tab$|' . $standardtex,
 'xduts',	'xdulogo.pdf$|' . $standardtex,
 'xintsession',	'\.tex',
 'xkeyval',	'(pst-xkey|xkeyval|xkvltxp|xkvview)\.sty$',
 'xskak',	'^xskak.*sty',		# not UF-.*.sty
 'xwatermark',  '\.sty',                # no .cfg
 'xindex',      '(unicode|xindex)-.*\.lua$',
 'xlop',        'xlop\.(tex|sty)',      # no manual.sty
 'xstring',     'xstring\.tex|' . $standardtex,
 'yamlvars',	'\.lua|' . $standardtex,
 'yathesis',    '\.(sty|cls)$',         # no .cfg
 'yax',         '(t-)?yax\.(sty|tex)|' . $standardtex,
 'yquant',	'\.sty|yquant-.*[^c]\.tex', # not yquant-doc.{tex,pdf}
 'zefonts',     '\.sty|\.fd',
 'zztex',	'\.tex',
);


%specialdocfmt = (
 'a2ping',		'support',
 'abbr',                'generic',
 'abstyles',            'bibtex',
 'apalike',             'bibtex',
 'accfonts',            'fonts',
 'allrunes',            'fonts',
 'amstex',              'amstex',
 'antique-spanish-units',	'generic',
 'antomega',            'omega',
 'apprendre-a-programmer-en-tex', 'plain',
 'arabxetex',           'xelatex',
 'archaic',             'fonts',
 'arev',                        'fonts',
 'around-the-bend',             'generic',
 'arrayjob',                    'generic',
 'ascii-chart',                 'support',
 'astro',                       'fonts',
 'asymptote-faq-zh-cn',         'support',
 'asymptote-by-example-zh-cn',  'support',
 'asymptote-manual-zh-cn',      'support',
 'aurical',                     'fonts',
 'automata',                    'metapost',
 'autosp',			'generic',
 'ascii',                       'fonts',
 'barr',                        'generic',
 'bartel-chess-fonts',          'fonts',
 'bbm',                         'fonts',
 'bengali',                     'fonts',
 'bera',                        'fonts',
 'bghyphen',                    'generic',
 'bib-fr',                      'bibtex',
 'bibhtml',                     'bibtex',
 'blacklettert1',               'fonts',
 'boisik',                      'fonts',
 'bundledoc',                   'support',
 'burmese',                     'fonts',
 'cbfonts',             'fonts',
 'cc-pl',               'fonts',
 'cfr-lm',              'fonts',
 'chicago-annote',      'bibtex',
 'chemarrow',           'fonts',
 'chronosys',           'generic',
 'circ',                'latex',
 'cirth',               'fonts',
 'cjhebrew',            'fonts',
 'cjk-gs-integrate',    'fonts',
 'cm-super',            'fonts',
 'cmarrows',            'metapost',
 'cmexb',		'fonts',
 'colorprofiles',	'generic',
 'components',	        'generic',
 'concmath',            'fonts',
 'concmath-fonts',      'fonts',
 'context-notes-zh-cn', 'context/third',
 'context-top-ten',     'context/third',
 'dad',			'fonts',
 'de-macro',            'support',
 'dehyph-exptl',        'generic',
 'devanagr',            'fonts',
 'dictsym',             'fonts',
 'dingbat',             'fonts',
 'dinat',               'bibtex',
 'doublestroke',        'fonts',
 'doc-pictex',          'generic',
 'dozenal',             'fonts',
 'dratex',              'generic',
 'drawing-with-metapost','metapost',
 'dtk-bibliography',	'bibtex',
 'e-french',		'generic',
 'eco',                 'fonts',
 'economic',            'bibtex',
 'edmac',               'generic',
 'eiad',                'fonts',
 'elhyphen',            'generic',
 'elsevier-bib',        'bibtex',
 'elvish',              'fonts',
 'enctex',              'generic',
 'encxvlna',            'generic',
 'epigrafica',          'fonts',
 'eplain',              'eplain',
 'epsf',                'generic',
 'epspdf',              'support',
 'eurofont',            'fonts',
 'eurosym',             'fonts',
 'expex',               'generic',
 'expressg',            'metapost',
 'exteps',              'metapost',
 'fc',                  'fonts',
 'fenixpar',            'generic',
 'feyn',                 'fonts',
 'fge',                 'fonts',
 'fig4latex',           'support',
 'findhyph',            'support',
 'fltpoint',            'generic',
 'font-change-xetex',	'xetex',
 'fontch',              'plain',
 'fontinstallationguide','fonts',
 'fontools',            'support',
 'fourier',             'fonts',
 'fouriernc',           'fonts',
 'fpl',                 'fonts',
 'fragmaster',          'support',
 'frcursive',           'fonts',
 'genmisc',             'generic',
 'german',              'generic',
 'gfsartemisia',        'fonts',
 'gfsbaskerville',      'fonts',
 'gfsbodoni',           'fonts',
 'gfscomplutum',        'fonts',
 'gfsdidot',            'fonts',
 'gfsneohellenic',      'fonts',
 'germbib',             'bibtex',
 'gnu-freefont',        'fonts',
 'gost',                'bibtex',
 'greenpoint',          'fonts',
 'hieroglf',            'fonts',
 'hologo',		'generic',
 'hyplain',             'plain',
 'ibygrk',              'fonts',
 'iftex',               'generic',
 'ifxetex',             'generic',
 'ijqc',                'bibtex',
 'impatient',           'plain',
 'impatient-cn',        'plain',
 'impatient-fr',        'plain',
 'inconsolata',         'fonts',
 'iopart-num',          'bibtex',
 'jablantile',          'fonts',
 'jadetex',             'jadetex',
 'japanese',            'platex',
 'japanese-otf',        'fonts',
 'japanese-otf-uptex',  'fonts',
 'jlreq-deluxe',	'platex',
 'junicode',            'fonts',
 'kixfont',             'fonts',
 'knitting',            'fonts',
 'knuth-errata',	'generic',
 'knuth-hint',		'generic',
 'knuth-pdf',		'generic',
 'kotex-plain',         'plain',
 'kpfonts',             'fonts',
 'latexmk',             'support',
 'latexmp',             'metapost',
 'leawood',             'fonts',
 'lfb',                 'fonts',
 'lh',                  'fonts',
 'latex-notes-zh-cn',   'generic',
 'lollipop',            'otherformats',
 'ltxcmds',		'generic',
 'lua-alt-getopt',      'support',
 'lua2dox',             'support',
 'luaintro',            'luatex',
 'luapstricks',		'lualatex',
 'luatexja',            'luatex',
 'luaxml',              'luatex',
 'marvosym',            'fonts',
 'mathabx',             'fonts',
 'mathdots',            'generic',
 'mcf2graph',		'metapost',
 'memdesign',           'fonts',
 'mendex-doc',		'support',
 'metafont-beginners',  'fonts',
 'metatex',             'plain',
 'metauml',             'metapost',
 'mfpic',               'generic',
 'midnight',            'generic',
 'mkgrkindex',          'support',
 'mkpattern',           'plain',
 'mkjobtexmf',          'generic',
 'musixtex',            'generic',
 'musixtnt',            'generic',
 'mxedruli',            'fonts',
 'nkarta',              'fonts',
 'npp-for-context',	'context/third',
 'oberdiek',            'generic',
 'ocherokee',           'omega',
 'ofs',                 'generic',
 'oinuit',              'fonts',
 'oldlatin',            'fonts',
 'orkhun',              'fonts',
 'ot2cyr',              'fonts',
 'pacioli',             'fonts',
 'patgen2-tutorial',    'support',
 'pdcmac',              'plain',
 'pdf-trans',           'generic',
 'pdfcrop',             'support',
 'pdfextra',		'optex',
 'pedigree-perl',       'support',
 'persian-bib',         'xelatex',
 'phaistos',            'fonts',
 'philokalia',          'xelatex',
 'phonetic',            'fonts',
 'pictex',              'generic',
 'pkfix',               'support',
 'pkfix-helper',        'support',
 'pl',           	'fonts',
 'plain-doc',           'plain',
 'plnfss',              'plain',
 'pmx',                 'generic',
 'pst-cox',             'generic',
 'ptex-base',		'ptex',
 'ptex-fontmaps',       'fonts',
 'ptex-manual',		'ptex',
 'purifyeps',           'support',
 'pwebmac',		'plain',
 'pxfonts',             'fonts',
 'pxbase',              'platex',
 'pxchfon',             'platex',
 'pxjahyper',           'platex',
 'pxrubrica',           'platex',
 'recycle',             'fonts',
 'rsfs',                'fonts',
 'shapepar',            'generic',
 'skak',                'latex',
 'skaknew',             'fonts',
 'spelling',            'luatex',
 'splines',             'metapost',
 'startex',             'otherformats',
 'staves',              'fonts',
 'stix',                'fonts',
 'systeme',             'generic',
 'tamil-omega',         'omega',
 'tap',                 'generic',
 'tds',			'generic',
 'tex-nutshell',        'plain',
 'tex-refs',            'generic',
 'tex-virtual-academy-pl',	'generic',
 'texbytopic',          'plain',
 'texcount',            'support',
 'texdate',		'generic',
 'texdiff',             'support',
 'texdirflatten',       'support',
 'texdraw',             'support',
 'texloganalyser',      'support',
 'texonly',		'plain',
 'texsis',              'otherformats',
 'textmerg',            'generic',
 'textpath',            'metapost',
 'timing',              'fonts',
 'tlmgr-intro-zh-cn',	'support',
 'tlmgrbasics',		'support',
 'trajan',              'fonts',
 'tugboat-plain',       'plain',
 'txfonts',             'fonts',
 'txfontsb',            'fonts',
 'ulem',                'generic',
 'unimath-plain-xetex',	'xetex',
 'universa',            'fonts',
 'uptex-base',		'uptex',
 'utf8mex',             'mex',
 'vancouver',           'bibtex',
 'variablelm',          'fonts',
 'variations',          'generic',
 'vaucanson-g',         'generic',
 'velthuis',            'generic',
 'vertex',              'plain',
 'xepersian',           'xelatex',
 'xesearch',            'xetex',
 'xetex-devanagari',    'xetex',
 'xetex-itrans',        'xelatex',
 'xetex-pstricks',      'xetex',
 'xetex-tibetan',       'xetex',
 'xetexfontinfo',       'xetex',
 'xetexko',             'xetex',
 'xetexref',            'xetex',
 'xevlna',              'xelatex',
 'xindex',		'lualatex',
 'xint',                'generic',
 'xltxtra',             'xelatex',
 'xq',                  'fonts',
 'xstring',             'generic',
 'xunicode',            'xelatex',
 'zhspacing',           'xetex',
);
$standarddocfmt='latex';


# needs special TeX program to run the doc.
%specialTEX = (
 'arabtex',     'tex',
 'barr',        'latex',
 'bytefield',   'pdflatex',
 'esint-type1', 'pdftex',
 'euro-ce',     'tex',
 'floatrow',    'latex',
 'genealogy',   'tex',
 'insbox',      'tex',
 'iso10303',    'pdflatex',
 'mfpic',       'tex',
 'ofs',         'csplain',
 'pdfscreen',   'pdflatex',
 'pdfslide',    'pdflatex',
 'pl-qx',       'platex',
 'sesamanuel',	'tex',
 'subfig',      'pdflatex',
 'texsis',      'tex',
 'typespec',    'tex',
 'webeq',       'pdflatex',
);

# 
%specialsourcefmt = (
 'allrunes',    'fonts',
 'antomega',    'omega',
 'apl',         'fonts',
 'arabxetex',   'xelatex',
 'archaic',     'fonts',
 'arev',        'fonts',
 'arrayjob',    'generic',
 'bibtexperllibs','support',
 'blacklettert1','fonts',
 'blockdraw_mp','metapost',
 'burmese',     'fonts',
 'cb',          'fonts',
 'chemarrow',   'fonts',
 'circ',        'latex',
 'cirth',       'generic',
 'cjhebrew',    'fonts',
 'cmpica',      'fonts',
 'cryst',       'fonts',
 'dozenal',     'fonts',
 'eplain',      'eplain',
 'epsf',        'generic',
 'eurofonts',   'fonts',
 'eurosym',     'fonts',
 'expressg',    'metapost',
 'fc',          'fonts',
 'feyn',        'fonts',
 'fge',         'fonts',
 'figflow',     'plain',
 'fltpoint',    'generic',
 'fourier',     'fonts',
 'fouriernc',   'fonts',
 'fpl',         'fonts',
 'frcursive',   'fonts',
 'genmisc',     'generic',
 'german',      'generic',
 'germbib',     'bibtex',
 'gost',        'bibtex',
 'greenpoint',  'fonts',
 'hologo',	'generic',
 'hyphenex',    'generic',
 'jadetex',     'jadetex',
 'japanese',    'platex',
 'kixfont',     'fonts',
 'kpfonts',     'fonts',
 'latexmp',     'metapost',
 'leawood',     'fonts',
 'lfb',         'fonts',
 'latexmp',     'metapost',
 'mathdots',    'generic',
 'metatype1',	'metapost',
 'mkjobtexmf',  'generic',
 'mnhyphn',     'generic',
 'mfpic',       'generic',
 'multido',     'generic',
 'oberdiek',    'generic',
 'ofs',         'generic',
 'oinuit',      'lambda',
 'ot2cyr',      'fonts',
 'patch',       'generic',
 'pdcmac',      'plain',
 'philokalia',  'xelatex',
 'pictex',      'generic',
 'pstricks',    'generic',
 'pxbase',      'platex',
 'pxchfon',     'platex',
 'pxjahyper',   'platex',
 'pxrubrica',   'platex',
 'ruhyphen',    'generic',
 'splines',     'metapost',
 'startex',     'startex',
 'stix',        'fonts',
 't2',          'generic',
 'texdate',	'generic',
 'textmerg',    'generic',
 'trajan',      'fonts',
 'universa',    'fonts',
 'variations',  'generic',
 'velthuis',    'fonts',
 'xint',        'generic',
 'xltxtra',     'xelatex',
);
$standardsourcefmt='latex';


$standardsource = '(\.(bat|c|drv|[dem]tx|fea|fdd|ins|mk|sfd)'
                  . '|configure.*|install-sh|Makefile.*|ltxdoc\.cfg)$';
%specialsource= (
 'FAQ-en',              'NULL',
 'ae',                  '\.mtx|\.etx|\.tex|clean|go|install|makepl',
 'amsldoc-vn',          'NULL',
 'apl',                 ".",                    # everything, simplest
 'arabxetex',           'NULL',                 # dtx with others, why not
 'axodraw2',		$standardsource . '|test', # in source/ to remove
 'babelbib',            'NULL',                 # dtx with others, why not
 'bbold',               $standardsource . '|fonttabl.sty',
 'bib2gls',		'src/',
 'biber',               '.',                    # everything, lots done in post
 'biber-ms',            '.',                    # same as biber
 'bibtexperllibs',	'.',			# everything
 'bibtools',		'.',			# everything but one bst
 'bigints',             'NULL',
 'blacklettert1',       '\.dtx|\.ins|\.pl|Makefile',
 'bookshelf',           'NULL',                 # all non-runtime in doc
 'booktabs-de',         'NULL',                 # doc package
 'booktabs-fr',         'NULL',                 # doc package
 'burmese',             '\.pl',
 'carlisle',            'ltxtable\.tex',
 'chemarrow',           '\.mp|\.vfb',
 'chklref',		'NULL',			# leave Makefile
 'circuit-macros',	'NULL',			# leave Makefile
 'cluttex',             'NULL',			# leave Makefile
 'cmextra',             'NULL',
 'codebox',		'NULL',
 'concmath-fonts',      'NULL',
 'crossrefware',	'NULL',
 'crossword',           $standardsource . '|AcrossLite',
 'ctan-o-mat',          'NULL',                 # process .bat
 'cyrplain',            'NULL',                 # all in tex
 'dccpaper',            $standardsource . '|Makefile',
 'docbytex',		'NULL',
 'dtxgallery',		'NULL',
 'epsf',                'NULL',
 'epslatex-fr',         'NULL',
 'epspdf',              'NULL',                 # leave .install
 'eskdx',               'NULL',                 # leave makefiles
 'eurosym',             'NULL',                 # leave makefiles, etc.
 'export',              '\.l$|' . $standardsource,
 'expose-expl3-dunkerque-2019',	'NULL',
 'fancymag',		'fonts',
 'feynmf',              'feynmf\.pl|' . $standardsource,
 'findhyph',            'NULL',                 # leave makefile
 'fmtcount',            'fmtcount.perl|' . $standardsource,
 'fontscripts',		'\.(lua|tex|lvt)$|' . $standardsource, # pdf/README in doc
 'fpl',                 'Add|\.p[es]|' . $standardsource,
 'fullblck',            '\.asc|' . $standardsource,
 'grverb',              '\.vpl|' . $standardsource,
 'geometry-de',         'NULL',                 # keep together
 'grverb',              '\.vpl|' . $standardsource,
 'hypdestopt',		'NULL',
 'hyper',               '\.pl|' . $standardsource,
 'hyphenex',            '.',			# everything
 'impatient',           'NULL',                 # doc package
 'impatient-fr',        'NULL',                 # doc package
 'install-latex-guide-zh-cn','NULL',		# doc package
 'intro-scientific',    'NULL',                 # doc package
 'iwonamath',		'\.sh|' . $standardsource,
 'js-misc',             'NULL',                 # no gain in splitting up
 'kpfonts',             '\.zip',
 'latex-doc-ptr',       'NULL',                 # doc package
 'latex-veryshortguide','NULL', 		# doc package
 'latex2e-help-texinfo','NULL',                 # doc package
 'latex2e-help-texinfo-fr','NULL',              # doc package
 'latex2man',           'NULL',                 # leave Makefile
 'latex4musicians',	'NULL',                 # leave Makefile
 'latexdiff',           'NULL',                 # leave Makefile
 'lettre',              'NULL',
 'lhcyr',               'README',               # historical
 'lua-alt-getopt',      'NULL',
 'lua2dox',             'NULL',                 # process lua2dox_filter.bat
 'mdframed',            'Makefile|' . $standardsource,
 'metatype1',		'.',			# everything
 'mff',                 '\.mfj|\.bat|\.diz',
 'microtype-de',        'NULL',                 # doc package
 'mkjobtexmf',          'Makefile.in|' . $standardsource,
 'mpman-ru',            'NULL', # doc package
 'needspace',           '\.tex|' . $standardsource,
 'nwafuthesis',		'\.sh$|' . $standardsource,
 'optexcount',		'\.(py|sh)$|' . $standardsource,
 'ot2cyr',              '\.afm|\.etx|' . $standardsource,
 'patch',               '\.doc',
 'pax',			'build.xml|lib|license|src|' . $standardsource,
 'pdfx',                'rvdtx\.sty|' . $standardsource,
 'photobook',		'NULL',	# keep together
 'poetrytex',           'Makefile|' . $standardsource,
 'pseudo',		'NULL',	# keep together
 'pst-pdf',		'\.(dtx|ins|e?ps|png)$|CHANGES.tex',
 'pst2pdf',		'NULL',
 'pygmentex',		'NULL',	# keep together
 'rcs',                 'rcs.el|src|' . $standardsource,
 'ruhyphen',            '^[^.]*$|README.ru|hyphen.rules',
 'selnolig',            'NULL',                 # not .fea
 'shipunov',		'NULL',                 # .bat in scripts
 'sqltex',		'.',
 'stex',		'NULL',			# handled in post fn
 'tds',			'NULL',			# doc pkg
 'tex-vpat',		'NULL',
 'texaccents',		'\.inc',
 'texdraw',		'NULL',
 'texfindpkg',		'tfpbuild.lua',
 'texosquery',		'java|\.batch$|' . $standardsource,
 'thailatex',           'NULL',                 # no gain in splitting up
 'tikztosvg',		'NULL',			# not Makefile
 'tlcockpit',		'TODO|build|project|src',
 'translation-array-fr',        'NULL',         # doc
 'translation-chemsym-de',      'NULL',         # doc
 'translation-dcolumn-fr',      'NULL',         # doc
 'translation-filecontents-de', 'NULL',         # doc
 'translation-natbib-fr',       'NULL',         # doc
 'translation-tabbing-fr',      'NULL',         # doc
 'tkz-orm',             'NULL',                 # no gain ...
 'velthuis',		'NULL',
 'xetexref',		'NULL',
 'xindex',		'NULL',
 'xlop',                'manual.sty|' . $standardsource,
);


# special cases of which .ins files to run; used to remove
# normal choices, and get the most general.
%specialins = (
 'aastex',      'NULL',                 # everything is pregenerated
 'autopdf',     'NULL',                 # everything is pregenerated
 'base',        'NULL',
 'booktabs-de', 'NULL',                 # doc, no need to build
 'blacklettert1','NULL',                # don't try to do fontinst
 'carlisle',    '\.ins|ltxtable.tex',
 'cbfonts-fd',  '\.fdd',
 'cmbright',    'NULL',
 'dtxgallery',	'NULL',
# 'gbt7714',	'NULL',			# dtx doesn't work
 'geometry-de', 'NULL',                 # doc, no need to build
 'gloss-occitan','NULL',		# polyglossia installs .ldf now
 'lettre',      'NULL',
 'ltximg',	'NULL',                 # doc, no need to build
 'njuvisual',	'njuvisual.dtx',	# not njuvisual-curves.dtx
 'nwafuthesis',	'nwafuthesis.dtx',
 'paper',       'install',
 'robotarm',	'NULL',                 # dtx is just doc
 'seuthesis',   'NULL',                 # don't want to run iconv, etc.
 'stix2-type1',	'\.ins|\.fdd',
 'tabu',	'NULL',                 # .dtx is not real
 'thesis',      'install.01|install.ndx',
 'translation-filecontents-de', 'NULL', # doc
 'turnstile',   'turnstile-en.ins',     # skip pt since it changes the sty
 'undar-digitacion' => 'NULL',		# spurious .dtx
 'xymtex',      'NULL',                 # already built, too complicated
 'yathesis',	'yathesis.dtx',		# not templates
);
$standardins = '\.ins$';

# if no .ins is present, but a .dtx is present, return a pattern for
# that extension; else return the empty string.  This is only called if
# there was no $specialins for the package.  We do this because more and
# more packages omit the .ins and just put everything in the .dtx, so
# it's nice to recognize that case automatically.
#
sub specialins {
  my ($package) = $_;

  if (exists $specialins{$package}) {
    # sanity check
    warn "\t SPECIALINS called for $package, "
         . "but have specialins=$specialins{$package}\n";
    return "";
  }

  my $raw_dir = "$RAW_DIR/$packagedir";
  return if (-e "$RAW_DIR/$packagedir/TDS_READY");

  my @ins = `find $raw_dir -regex ".*$standardins" -type f -print`;
  if (@ins) {
    print "\t SPECIALINS found normal ins: @ins";
    return "";
  }

  my @dtx = `find $raw_dir -regex '.*\\.dtx\$' -type f -print`;
  if (@dtx) {
    print "\t SPECIALINS no .ins, but found .dtx: @dtx";
    return '\.dtx$';
  }

  # No .dtx's, either.  Presumably this package has no .ins-like file.
  return "";
}

# ltxtable.tex in carlisle uses the {filecontents} environment to write
# ltxtable.sty.  Unfortunately if the file exists anywhere in the input
# tree, it won't be written, and of course TL already has it installed.
# So set TEXINPUTS to only the directories actually needed for the run,
# so that latex will not find our installed ltxtable.sty.
my $core_latex = "$Master/texmf-dist/tex/latex";

%specialinsrunner = (
 'abspos'	=> 'etex',
 'actuarialsymbol' => 'pdflatex-preserve-pdf',# requires interaction
 'aligned-overset' => 'tex',
 'antomega'     => 'latex',  # requires interaction
 'apa6e'        => 'latex',  # requires interaction
 'apa7'		=> 'etex',
 'archaeologie' => 'pdftex', # else doc is generated
 'asciilist'	=> 'latex',  # requires interaction
 'askinclude'	=> 'tex',    # else doc is generated
 'atenddvi'	=> 'etex',
 'atveryend'	=> 'etex',
 'babel'	=> 'etex',
 'babel-belarusian'	=> 'tex -8bit', # do not make doc, no ^^
 'babel-french'		=> 'luatex',
 'babel-greek'		=> 'latex', # requires interaction
 'babel-serbianc'	=> 'latex', # requires interaction
 'babel-ukrainianx'	=> 'etex',  # requires interaction
 'beamersubframe'	=> 'latex', # requires interaction
 'basque-book'  => 'latex',  # requires interaction
 'basque-date'  => 'latex',  # requires interaction
 'bath-bst'	=> 'luatex -interaction=nonstopmode',
 'bbold'	=> 'pdflatex',
 'beamerswitch' => 'tex -8bit',    # no doc remake
 'biblatex-accursius' => 'pdflatex-preserve-pdf --engine xelatex',
 'biblatex-bath'  => 'luatex', # no doc remake
 'biblatex-oxref' => 'luatex', # no doc remake
 'bib2qr'	=> 'etex',
 'bguq'         => 'latex',  # requires interaction
 'bhcexam'      => 'latex',  # requires interaction
 'bnumexpr'	=> 'etex',
 'bosisio'      => 'latex -translate-file=empty.tcx',   # ^^, no 8-bit
 'bullcntr'     => 'latex',  # requires interaction
 'canoniclayout'=> 'tex',
 'cdpbundl'     => 'latex',  # requires interaction
 'chickenize'   => 'luatex',
 'classpack'    => 'latex',  # requires interaction
 'clefval'      => 'latex -translate-file=empty.tcx',   # no 8-bit
 'cleveref'     => 'latex',  # requires interaction
 'clrstrip'	=> 'tex',
 'codebox',	=> 'etex',
 'ctable'       => 'latex',  # requires interaction
 'curve2e'      => 'pdflatex',   # 8bit
 'dateiliste'   => 'latex',  # requires interaction
 'dccpaper'	=> 'etex',   # 8bit
 'defoldfonts'	=> 'etex',
 'denisbdoc' 	=> 'tex -8bit',
 'dotseqn'      => 'latex',  # requires interaction
 'delimtxt'     => 'latex -translate-file=empty.tcx',   # no 8-bit
 'doibanner'	=> 'etex',
 'dramatist'	=> 'latex',  # requires interaction
 'drm'          => 'latex',  # requires interaction
 'duckuments'	=> 'tex',
 'easybook'	=> 'etex',
 'ejpecp'       => 'latex',  # requires interaction
 'ekaia'        => 'latex',  # requires interaction
 'ellipsis'	=> 'tex',
 'elteikthesis' => 'latex',  # requires interaction
 'embedfile'	=> 'etex',
 'emisa'	=> 'pdflatex-preserve-pdf',
 'emo'		=> 'etex',
 'engpron'      => 'latex -translate-file=empty.tcx',   # no 8-bit
 'enverb'	=> 'etex',
 'ecclesiastic' => 'latex',  # requires interaction
 'emisa'	=> 'pdflatex-preserve-pdf',
 'epstopdf-pkg' => 'tex',
 'esint'	=> 'xelatex',
 'etextools'    => 'etex -translate-file=empty.tcx',    # no 8-bit
 'exesheet'	=> 'etex-answer-y',
 'extpfeil'     => 'latex -translate-file=empty.tcx',   # no 8-bit
 'factura'	=> 'pdftex',
 'facture'	=> 'latex', # requires interaction
 'fancytooltips'=> 'latex', # requires interaction
 'fancyvrb'     => 'latex -translate-file=empty.tcx',   # no 8-bit
 'fbithesis'    => 'latex',  # requires interaction
 'fcolumn'	=> 'tex',
 'fei'		=> 'tex',
 'fge'          => 'latex',  # requires interaction
 'fixdif'	=> 'etex-answer-y',
 'floatbytocbasic' => 'etex',
 'floatrowbytocbasic' => 'etex',
 'fontsize'	=> 'latex',
 'g-brief'      => 'latex',  # requires interaction
 'gbt7714'	=> 'xelatex',
 'geometry'     => 'tex',
 'german'       => 'tex',
 'gost'         => 'tex',
 'grabbox'	=> 'tex',
 'grading-scheme' => 'etex-answer-y',
 'graphics-pln' => "env TEXINPUTS=$Master/texmf-dist/source/latex/base: latex",
 'grffile'	=> 'tex',
 'gridset'	=> 'tex',
 'halloweenmath' => 'latex',  # requires interaction
 'hamnosys'	=> 'etex-answer-y',
 'hanzibox'	=> 'etex',
 'hecthese'	=> 'etex',
 'hf-tikz'      => 'tex',
 'hitszbeamer'	=> 'tex',
 'hobby'	=> 'tex',
 'hologo'	=> 'tex',
 'hopatch'	=> 'tex',
 'hrlatex'      => 'latex',  # requires interaction
 'hu-berlin-bundle' => 'luatex',
 'hycolor'	=> 'tex',
 'hypdestopt'	=> 'etex',
 'hypcap'	=> 'tex',
 'hypdoc'	=> 'tex',
 'hyperbar'	=> 'tex',
 'inputnormalization' => 'etex -8bit',
 'intopdf',	=> 'etex-answer-y',
 'icite',	=> 'lualatex',
 'isodoc'       => 'luatex',
 'japanese'     => 'platex',
 'kdgdocs'      => 'latex',  # requires interaction
 'komacv'	=> 'latex',  # requires interaction
 'kvoptions'	=> 'etex',
 'kvsetkeys'	=> 'etex',
 'labelcas'     => 'latex',  # requires interaction
 'langsci-avm'	=> 'pdflatex-preserve-pdf --engine xelatex',
 'lastpage'     => 'tex',
 'latex-veryshortguide' => 'latex',  # requires interaction
 'lcd'          => 'latex -translate-file=empty.tcx',   # no 8-bit
 'leaflet'	=> 'etex',
 'letterswitharrows' => 'etex-answer-y',# docstrip overwrite agony
 'lettrine'	=> 'etex',
 'libgreek'	=> 'etex',
 'listings'     => 'latex',  # requires interaction
 'lmake'        => 'latex',  # requires interaction
 'lni'		=> 'tex --8bit',
 'longtwocolumn'  => 'etex',
 'lscapeenhanced' => 'etex',
 'ltxcmds'	=> 'etex',
 'lua-typo'	=> 'etex',
 'lua-ul'	=> 'etex-answer-y',	# https://github.com/latex3/latex2e/issues/558
 'luacolor'	=> 'etex',
 'luaindex'     => 'lualatex --shell-escape',
 'luamml'	=> 'etex-answer-y',
 'luamathalign'	=> 'etex-answer-y',
 'luatexja'     => 'lualatex',
 'magicwatermark' => 'etex',
 'makelabels'	=> 'tex --8bit',
 'mandi'	=> 'pdflatex-preserve-pdf',
 'marathi' 	=> 'tex -8bit',
 'marginnote'	=> 'etex',
 'mathfont'	=> 'lualatex',
 'mcmthesis'	=> 'tex',    # requires interaction
 'mversion'     => 'latex',  # requires interaction
 'minitoc'      => 'latex',  # requires interaction and 1000q instead of 10q
 'mluexercise'	=> 'tex',
 'mylatexformat'=> 'pdflatex',
 'nameauth'	=> 'pdflatex-preserve-pdf',
 'njuthesis'	=> 'etex',
 'njuvisual'	=> 'etex',
 'notespages'   => 'latex',  # requires interaction
 'nwafuthesis'	=> 'xetex',
 'nwejm'	=> 'tex',
 'nomentbl'     => 'latex -translate-file=empty.tcx',   # no 8-bit
 'outoruby'	=> 'etex-answer-y',
 'pbsheet'      => 'latex',  # requires interaction
 'pdflscape'	=> 'etex',
 'pdfrender'	=> 'etex',
 'penrose'	=> 'etex',
 'physics2'	=> 'etex-answer-y',
 'powerdot'	=> 'latex',
 'pagegrid'	=> 'etex',
 'pagesel'	=> 'tex',
 'pageslts'     => 'tex -translate-file=empty.tcx',     # no 8-bit
 'pangram'	=> 'etex-answer-y',
 'papermas'     => 'tex',
 'pauldoc'      => 'latex',  # requires interaction
 'pdfcol'	=> 'etex',
 'pdfcolfoot'	=> 'etex',
 'pdftexcmds'	=> 'etex',
 'pfarrei'	=> 'etex',
 'picture'	=> 'etex',
 'placeat'      => 'luatex',
 'poemscol'     => 'latex',  # requires interaction
 'pm-isomath'	=> 'etex',
 'polski'	=> 'etex-answer-y',# docstrip overwrite agony
 'psfragx'      => 'latex',  # requires interaction
 'pxrubrica'    => 'platex',
 'rerunfilecheck' => 'etex',
 'schedule'     => 'latex',  # requires interaction
 'schemata'	=> 'tex',
 'scontents'	=> 'etex',
 'scrhack'	=> 'etex-answer-y',
 'scrlayer-fancyhdr' => 'etex-answer-y',
 'scrwfile'	=> 'etex',
 'secnum'	=> 'etex-answer-y',
 'setspaceenhanced' => 'etex-answer-y',
 'silence'      => 'latex -translate-file=empty.tcx',   # no 8-bit
 'sillypage'	=> 'etex',
 'skdoc'        => 'tex',
 'spath3'	=> 'etex',
 'standardsectioning' => 'etex',
 'stix2-type1'	=> 'tex',
 'struktex'	=> 'etex',
 'svg'		=> 'etex',
 'svn-multi'    => 'latex',  # interaction for .pl
 'swfigure'	=> 'etex',
 'teubner'      => 'latex',  # interaction
 'telprint'	=> 'tex',
 'termlist'     => 'tex',    # interaction for .pl
 'termsim',	=> 'etex',
 'thmtools'	=> 'latex',
 'thucoursework' => 'pdflatex-preserve-pdf --engine xelatex',
 'thumb'        => 'latex -translate-file=empty.tcx',   # no 8-bit
 'thubeamer'	=> 'tex -8bit',    # no doc remake, 8-bit name
 'tikz-page'	=> 'tex -8bit',    # no doc remake, 8-bit name
 'tikzmark'	=> 'tex',
 'todonotes'    => 'latex',  # requires interaction
 'tqft'		=> 'etex',
 'transparent'	=> 'etex',
 'tudscr'       => 'tex',
 'uadocs'       => 'latex',  # requires interaction
 'undolabl'     => 'tex',
 'velthuis'     => 'latex',  # requires interaction
 'wheelchart'	=> 'etex',
 'wrapfig2'	=> 'etex',
 'wrapstuff'	=> 'etex',
 'xduthesis'	=> 'tex',
 'xecjk'        => 'xecjk-xelatex',
 'xmuthesis'	=> 'etex',
 'yathesis'	=> 'pdftex',
 'zref'		=> 'etex',
);
$standardinsrunner = "latex -8bit";


%specialmakeindex= (
 'apprends-latex'       => 'NULL',      # doc
 'bigints'              => 'NULL',      # doc
 'bibleref'		=> 'NULL',      # doc
 'einfuehrung'          => 'NULL',      # doc
 'einfuehrung2'         => 'NULL',      # doc
 'expltools'            => 'NULL',      # doc
 'hyperxmp'		=> 'NULL',      # doc
 'istgame'              => 'NULL',      # doc
 'labyrinth'            => 'NULL',      # doc
 'luaintro'             => 'NULL',      # doc
 'minitoc'		=> 'NULL',      # doc
 'mpman-ru'             => 'NULL',      # doc
 'musuos'               => 'NULL',      # gind.ist conflict
 'pgf-periodictable'	=> 'NULL',      # doc
 'pgf-spectra'		=> 'NULL',      # doc
 'pst-eucl-translation-bg' => 'NULL',   # doc
 'seuthesis'            => 'NULL',      # doc
 'synthslant'           => 'NULL',      # doc
 'ticollege'            => 'NULL',      # doc
 'tipfr'                => 'NULL',      # doc
 'tikzpingus'           => 'NULL',      # doc
 'typog'                => 'NULL',      # doc
 'tzplot'		=> 'NULL',      # doc
 'turnthepage'          => 'NULL',      # doc
 'voss-mathmode'        => 'NULL',      # doc
);
$standardmakeindex='\.ist';


# packages which need special MetaPost files
$standardmp = '\.mp$';
%specialmp = (
 'automata',    'automata.mp',  # skip example.mp
 'beuron',	'NULL',		# doc file
 'bpolynomial', 'bpolynomial.mp', # skip examples.mp
 'chemarrow',   'NULL',         # don't install arrow.mp
 'dviincl',     'fix.*mp',      # skip test-bop.mp
 'einfuehrung', 'NULL',         # doc package
 'einfuehrung2','NULL',         # doc package
 'epsincl',     'eps.*mp',      # skip testincl.mp
 'feynmp',      'feynmp.mp',
 'hatching',    '[^e].mp',      # no htchuse.mp
 'latexmp',     'latexmp.mp',
 'latex-graphics-companion', 'NULL',    # doc package
 'luamesh',	'luamesh.mp',		# not doc file fond.mp
 'mcf2graph',	'mcf2graph.mp|main_lib.mcf',	# not the examples
 'metapost-colorbrewer','colorbrewer-[cr].*mp',	# not -sampler
 'metapost-examples',	'NULL',		# doc package
 'minim-hatching',	'.*g\.mp',	# not doc.mp
 'mpattern',    'mpattern.mp',  # don't install test.mp
 'mp3d',        '^(3d|ani)',    # not examples
 'mpman-ru',    'NULL',         # doc package
 'pdfslide',    'NULL',         # not meta.mp
 'polski',      'NULL',         # not sample-*.mp
 'profcollege',	'\.dat|' . $standardmp,
 'semioneside', 'NULL',         # not figure*.mp
 'synthslant',	'NULL',         # doc figures
 'textpath',    'textpath.mp',  # not textpathfigs.mp
 'typog',	'NULL',         # doc figures
);


%specialdvi = ();
$standarddvi = 'NULL';  # rely on authors/CTAN making pdf's.

$standardcsf='\.csf';
%specialcsf = (
 'disser'       => 'cp1251lc.csf',  # cp1251.csf dup with gost
);

$standardbst='\.bst$';
%specialbst = (
 'beebe'		=> '\.bst$',
 'bibtools'		=> 'abstract\.bst',
 'einfuehrung'  	=> 'NULL',
 'einfuehrung2' 	=> 'NULL',
 'feupphdteses' 	=> 'NULL',
 'hindawi-latex-template' => 'NULL',
 'latex-bib-ex' 	=> 'NULL',
 'latex-bib2-ex'	=> 'NULL',
 'latex-referenz'       => 'NULL',
 'mil3'         	=> 'NULL',
 'msu-thesis'   	=> 'NULL',
 'przechlewski-book-examples'   => 'NULL',
 'texproposal'		=> 'NULL',
 'umthesis'     	=> 'NULL',
);

# packages which need special BibTeX data files (not) installed.
$standardbib = 'NULL';  # almost all bib files are for the doc
%specialbib= (
 'ieeetran'             => '\.bib$',
 'amsrefs'              => 'ams.*bib', # not jr.bib
 'archaeologie'         => '\.bib$',
 'beebe'                => '\.bib$',
 'bibtex'               => 'xampl\.bib$',
 'cnltx'                => '\.bib$',
 'dtk-bibliography'	=> '\.bib$',
 'gloss'		=> 'glsbase.bib',
 'nostarch'		=> '\.bib$',
);

# packages which have Metafont sources to run.
$standardmf='[0-9]\.mf';
%specialmf= (
 'aramaic-serto','^[^t].*mf$', # not test.mf
 'asaetr',      'NULL', # cmcscsl10.mf conflict
 'astro',       'astrosym.mf',
 'backgammon',  'bg\.mf',
 'cherokee',    'cherokee.mf',
 'circ',        'csybimos\.mf|csycirc\.mf|csydiod\.mf|csyrest\.mf|csywidko\.mf|csysym\.mf|optic\.mf',
 'cirth',       'cir.*\.mf',
 'clock',       'clock.mf',
 'cm',		'NULL', # don't rebuild 'cminch|' . $standardmf,
 'cmcyr',       'NULL', # already made
 'cmextra',     'cm(man|tim)|' . $standardmf,
 'cookingsymbols', 'cookingsymbols\.mf',
 'cmpica',      'cmpic.*\.mf',
 'dancers',     'dancers\.mf',
 'dice',        'dice3d',
 'dingbat',     '\.mf',
 'drm',		'NULL', # pregen
 'eiad-ltx',    'NULL', # Fr10.mf and Fbf10.mf don't compile (need cmbase)
 'engwar',      'engwar\.mf',
 'euro-ce',     'eu.*\.mf|ce.*\.mf',
 'fetamont',    'NULL', # pregen
 'feynmf',      'feynmf\.mf',
 'gothic',	'(cmfrak|schwell|suet14|yinit(dd)?)\.mf',
 'greenpoint',  'greenpoint\.mf',
 'hands',       'hands\.mf',
 'ibygrk',      'NULL',
 'ifsym',       '\.mf|\.gen',
   # no point in making tfm without pk for (black|gray|slant), is there?
 'knuth-lib',   'manfnt\.mf|' . $standardmf,
 'knuth-local', '(domino|logo.*[0-9]|mfman|random|snfont)\.mf',
 'logic',       'milstd\.mf',
 'mfpic',       'grafbase\.mf',
 'morse',       'morse10.mf|morse.def',
 'niceframe',   'karta15\.mf|umrand[ab]\.mf', # not bbding or dingbat
 'ogham',       'ogham\.mf',
 'pl',		'NULL',
 'skak',        'skak.*[0-9].*\.mf',
 'tengwar',     'tengwar\.mf',
 'umrand',      'umrand[ab]\.mf',
 'xq',          'xq(normal|large)\.mf',
);


%specialfoundry = (
 'adforn'       => 'arkandis',
 'adfsymbols'   => 'arkandis',
 'asapsym'	=> 'omnibus-type',
 'berenisadf'	=> 'arkandis',
 'charter'      => 'bitstrea',
 'fc'           => 'jknappen',
 'gentium-sil'	=> 'SIL',
 'grotesq'	=> 'urw',
 'jetbrainsmono-otf' => 'SIL',
 'manfnt-font'	=> 'hoekwater',
 'mflogo-font'	=> 'hoekwater',
 'mfpic'	=> 'metafont',
 'noto-emoji'	=> 'google',
 'sourcesanspro'=> 'adobe',
);
$standardfoundry='public';

# additional mf files to be installed but not run.
$standardmfinstall = '\.mf$';
%specialmfinstall = (
 'aramaic-serto'=> '^[^t].*mf$', # not test.mf
 'asaetr'       => 'NULL',                              # cmcscsl10.mf conflict
 'astro'        => 'astrosym.(cal|cmn|mac|uni|xtr)',
 'ibygrk'       => 'ibycus4\.map',                      # tex|mf source
 'ifsym'        => $standardmfinstall . '|\.gen',
 'mcf2graph'	=> 'NULL',
 'niceframe'    => '(karta|umrand).*\.mf',              # not bbding or dingbat
 'pl'		=> '\.mf',				# include .mft
 'tipa'         => $standardmfinstall . '|[^c]\.def$',
 'wnri'         => $standardmfinstall . '|wnindic\.map',# mf source
);

# packages which have dvips header files
$standardpro='\.pro$';
%specialpro= (
 'brushscr'     => 'config.pbsi',
 'cm-super'     => 'config.cm-super|cm-super.GS',
 'countriesofeurope' => 'config.*',
 'cyrillic-modern'   => 'config.*',
 'dvipsconfig'  => '.*',   # addpsctrl should be in bin, but oh well
 'epspdf'       => 'NULL', # makegray.pro goes in scripts
 'esint-type1'  => 'config.esint',
 'initials'     => 'config.*',
 'pl'		=> 'config.*',
 'pspicture'    => 'pspicture.ps',
 'tex-ps'       => 'mirr.hd',
 'yfonts-t1'    => 'config.*',
 'zefonts'      => 'slantcm.cfg',
);

$standardmap='\.(map|tec)$';
%specialmap = (
 'adobemapping'     => '.',         # take them all
 'fundus'           => 'NULL',      # skip startrek fonts we don't have
 'ibygrk'           => 'iby\.map',  # not ibycus4.map, which is tex|mf
 'kerntest'         => 'NULL',      # skip test map file
 'pbibtex-manual'   => 'NULL',	    # doc
 'skak'             => 'NULL',      # skip ill-named special.map
 'xetex-devanagari' => 'README|' . $standardmap, # no point in breaking up
);
#
$standardmapdest = "fonts/map/dvips";
%specialmapdest = (
 'adobemapping'         => "fonts/cmap",
 'arabxetex'            => "fonts/misc/xetex/fontmapping",
 'ipaex'                => "fonts/map/dvipdfmx",
 'morisawa'             => "fonts/map/dvipdfmx",
 'unimath-plain-xetex'	=> "fonts/misc/xetex/fontmapping",
 'xepersian'            => "fonts/misc/xetex/fontmapping",
 'xetex-devanagari'     => "fonts/misc/xetex/fontmapping",
 'xetex-itrans'         => "fonts/misc/xetex/fontmapping",
 'xetex-tibetan'        => "fonts/misc/xetex/fontmapping",
);

$standardafm='\.afm';
%specialafm = ();

$standardvmap='\.ali$';
%specialvmap = ();

$standardenc='\.enc';
%specialenc = ();

$standardocp='\.ocp';
%specialocp = ();

$standardofm='\.ofm';
%specialofm = ();

$standardotf='\.(eot|otf|woff2?)$';
%specialotf = (
 'cm-unicode'   => '^[^.]*\.otf',       # not Fontmap.CMU.otf
 'fontsetup'	=> 'NULL',		# intended for system installation
);

$standardotp='\.otp';
%specialotp = ();

$standardovf='\.ovf';
%specialovf = ();

$standardovp='\.ovp';
%specialovp = ( 'psfragx', 'NULL',);

$standardpfb = '\.pfb|\.inf$';
%specialpfb = (
 'brushscr'     => '.*\.pfa',
 'cm-unicode'   => '^[^.]*\.pfb',       # not Fontmap.CMU.pfb
 'dviincl'      => 'NULL',              # skip *.inf, is a README
 'metatype1'    => 'NULL',              # skip *.inf, is a README
 'pigpen'       => 'pigpen.pfa',
);

$standardpfm='\.pfm';
%specialpfm = ();

$standardsfd=NULL;  # subfont definition, not fontforge!
%specialsfd = ();   # only dnp, ttf2pk

$standardttf = '\.ttf|\.TTC';
%specialttf = (
);


# scripts to install under texmf*/.../scripts, but no bindir links.
%specialscripts_nobin = (
 'albatross'		=> '\.jar$',
 'bib2gls'		=> '\.jar$|resources',
 'changes'		=> '\.py$',
 'cloze'		=> '\.lua$',
 'epspdf'               => '(epspdf(|\.help|\.tlu|.*tk.*)|\.rb|makegray\.pro)$',
 'expltools'		=> 'expl.*\.(lua|toml)$',
 'extractbb'		=> 'extractbb-.*\.lua$',
 'latex2nemeth'         => '\.jar$',
 'latex-make'           => '\.py$',
 'latexindent'          => 'LatexIndent|\.yaml$',
 'lilyglyphs'           => 'lilyglyphs_common.py',
 'lua-alt-getopt'       => '\.lua$',
 'lua-tinyyaml'		=> '\.lua$',
 'lua-uca'              => '\.lua$',
 'lua2dox'              => '\.(lua|def)$',
 'luaindex'             => '\.lua$',
 'lualatex-math'        => '\.lua$',
 'luamesh'		=> '\.lua$',
 'luasseq'              => '\.lua$',
 'lyluatex'		=> '\.lua$',
 'make4ht'		=> '(extensions|filters|formats|\.lua)$',
 'minted'		=> '\.whl$',
 'mycv'                 => 'mycv_split_contents\.pl$',
 'pgfmolbio'		=> '\.lua$',
 'pax'			=> 'pax.jar$',
 'placeat'              => '\.lua$',
 'ppmcheckpdf'		=> '\.lua$',
 'pst-pdf'		=> '\.bat(.w95)?$',
 'puyotikz'		=> '\.py$',
 'pythontex'            => '([23]|_.*)\.py$',
 'shipunov'		=> '\.(bat|sh|pl)$',
 'songs'		=> '\.lua$',
 'spelling'             => '\.lua$',
 'texdoc',		=> '[^c]\.tlu$', # luckily that's enough
 'tex4ebook'		=> '\.lua$',
 'texosquery'		=> '\.jar$',
 'tlcockpit'		=> '\.jar$',
);


# scripts that should end up in $bindir too.
%specialscripts_bin = (
 'a2ping'               => '\.pl$',
 'accfonts'             => 'mkt1font|vpl2',
 'adhocfilelist'        => 'adhocfilelist\.sh$',
 'albatross'		=> '\.sh$',
 'aomart'		=> 'aom-fullref\.pl$',
 'arara'                => 'arara\.sh$',
 'attachfile2'		=> 'pdfatfi\.pl$',
 'authorindex'          => 'authorindex$',
 'bib2gls'		=> '\.sh$',
 'bibcop'		=> '\.pl$',
 'bibexport'            => 'bibexport\.sh$',
 'bibtexperllibs'	=> 'ltx2unitxt',
 'bookshelf'		=> 'bookshelf-(listallfonts|mkfontsel)$',
 'bundledoc'            => '(arlatex|bundledoc)$',
 'checkcites'           => '\.lua$',
 'checklistings'        => '\.sh$',
 'chklref'		=> '\.pl',
 'citation-style-language' => 'citeproc-lua\.lua$',
 'cjk-gs-integrate'     => '\.pl$',
 'clojure-pamphlet'	=> 'pamphletangler$',
 'cluttex'		=> 'cluttex\.lua$', # moved by prehook
 'convbkmk'             => '\.rb$',
 'crossrefware'		=> '\.pl$',
 'ctan-o-mat'		=> 'ctan-o-mat\.pl$',
 'ctanbib'		=> 'ctanbib$',
 'ctanify'              => '^ctanify$',
 'ctanupload'           => '\.pl$',
 'de-macro'             => 'de-macro',
 'diadia'		=> '\.lua$',
 'digestif'		=> 'digestif\.texlua$',
 'dosepsbin'            => 'dosepsbin\.pl$',
 'dtxgen'               => 'dtxgen$',
 'dviasm'               => '\.py$',
 'dviinfox'		=> '\.pl$',
 'easydtx'		=> '\.pl$',
 'ebong'                => '\.py$',
 'eolang'		=> '\.pl$',
 'epstopdf'             => 'epstopdf\.pl',      # doscripts() does r*
 'exceltex'             => 'exceltex$',
 'expltools'		=> 'explcheck\.lua$',
 'extractbb'		=> 'extractbb\.lua$',
 'fig4latex'            => 'fig4latex',
 'findhyph'             => 'findhyph$',
 'fragmaster'           => 'fragmaster\.pl$',
 'fontools'             => '(afm2afm|autoinst|ot2kpx)$',
 'getmap' 		=> 'getmapdl.lua',
 'git-latexdiff' 	=> 'git-latexdiff$',
 'glossaries'		=> 'makeglossaries$|makeglossaries-lite\.lua',
 'hyperxmp'		=> '\.pl',
 'installfont'          => 'installfont-tl',
 'jfmutil'		=> '\.pl',
 'ketcindy'		=> 'ketcindy\.pl',
 'kotex-utils'          => '\.pl$',
 'l3build'		=> 'l3build\.lua$',
 'l3sys-query'		=> 'l3sys-query\.lua$',
 'latex-git-log'        => 'latex-git-log$',
 'latex-papersize'	=> '\.py$',
 'latex2man'            => 'latex2man$',
 'latex2nemeth'         => 'latex2nemeth$',
 'latexdiff'            => 'latex(diff|diff-vc|revise)\.pl$',
 'latexindent'          => 'latexindent\.pl$',
 'latexmk'              => '\.pl$',
 'latexfileversion'     => 'latexfileversion$',
 'latexpand'            => 'latexpand$',
 'light-latex-make'	=> 'llmk\.lua$',
 'lilyglyphs'           => 'lily-.*\.py$',
 'listbib'              => 'listbib$',
 'listings-ext'         => '\.sh$',
 'ltxfileinfo'          => 'ltxfileinfo$',
 'ltximg'               => 'ltximg\.pl$',
 'lua2dox'              => 'lua2dox_filter?$',
 'luafindfont'		=> 'luafindfont\.lua$',
 'luaotfload'           => 'luaotfload-tool',
 'lwarp'		=> 'lwarpmk.lua',
 'm-tx'			=> 'm-tx.lua',
 'make4ht'		=> 'make4ht$',
 'makedtx'		=> '^makedtx\.pl$',
 'markdown'		=> '^markdown2tex\.lua$',
 'match_parens'         => '^match_parens$',
 'mathspic'             => '^mathspic\.pl$',
 'memoize'		=> '\.p[ly]$',
 'minted'		=> 'latexminted.py$',
 'multibibliography'    => '\.pl$',
 'mf2pt1'               => '\.pl$',
 'mkgrkindex'           => 'mkgrkindex$',
 'mkjobtexmf'           => 'mkjobtexmf\.pl$',
 'mkpic'	        => '^mkpic$',
 'musixtex'             => '\.lua$',
 'optexcount'           => 'optexcount$',
 'pagelayout',		=> '(pagelayoutapi|textestvis)$',
 'pax'			=> 'pdfannotextractor.pl$',
 'pdfbook2'             => 'pdfbook2$',
 'pdfcrop'              => '\.pl$',             # doscripts() does r*
 'pdfjam'               => '^pdfjam$',
 'pdflatexpicscale'	=> '\.pl$',
 'pdftex-quiet'		=> 'pdftex-quiet$',
 'pdfxup'               => 'pdfxup$',
 'pedigree-perl'        => '\.pl$',
 'perltex'              => '\.pl$',
 'pfarrei'              => '\.tlu$',
 'pkfix'                => '\.pl$',
 'pkfix-helper'         => 'pkfix-helper$',
 'pmxchords'            => 'pmxchords\.lua$',
 'petri-nets'		=> 'pn2pdf',
 'ppmcheckpdf'		=> 'ppmcheckpdf\.lua$',
 'pst-pdf'              => 'ps4pdf$',
 'pst2pdf'              => 'pst2pdf\.pl$',
 'ptex2pdf'             => 'ptex2pdf\.lua$',
 'purifyeps'            => 'purifyeps$',
 'pygmentex',		=> 'pygmentex\.py$',
 'pythontex'            => '(de)?pythontex\.py$',
 'rubik'                => '\.pl$',
 'runtexfile'		=> '\.lua$',
 'runtexshebang'	=> '\.lua$',
 'show-pdf-tags'	=> 'show-pdf-tags\.lua',
 'spix'			=> '\.py$',
 'sqltex'		=> 'sqltex$',
 'srcredact'		=> '\.pl$',
 'splitindex'           => 'splitindex\.pl$',
 'sty2dtx'              => '\.pl$',
 'svn-multi'            => 'svn-multi\.pl$',
 'tex4ebook'		=> 'tex4ebook$',
 'texaccents'		=> 'texaccents.sno',
 'texblend'		=> 'texblend$',
 'texcount'             => '\.pl$',
 'texdef'               => '\.pl$',
 'texdiff'              => 'texdiff$',
 'texdirflatten'        => 'texdirflatten$',
 'texdoc',		=> 'texdoc\.tlu$',
 'texfindpkg'		=> 'texfindpkg\.lua$',
 'texfot'               => 'texfot\.pl$',
 'texliveonfly'         => '\.py$',
 'texloganalyser'       => 'texloganalyser$',
 'texlogfilter'		=> 'texlogfilter$',
 'texlogsieve'		=> 'texlogsieve$',
 'texosquery'		=> 'texosquery(|-jre[5-9])\.sh$',
 'texplate'             => 'texplate\.sh$',
 'typeoutfileinfo'      => '\.sh$',
 'thumbpdf'             => '\.pl$',
 'tikztosvg'		=> '^tikztosvg$',
 'tlcockpit'		=> '\.sh$',
 'typog'		=> 'typog-grep.pl$',
 'ulqda'                => '\.pl$',
 'urlbst'               => 'urlbst$',
 'vpe'                  => '\.pl$',
 'webquiz'		=> '^webquiz\.py.*',
 'wordcount'		=> '\.sh$',
 'wheretotrim'          => '\.pl$',
 'xindex'		=> 'xindex\.lua$',
 'yplan'                => 'yplan$',
);


# scripts that should use the UTF-8 codepage for all text I/O on Windows
%specialscripts_utf8win = (
  "cllualatex"     => 1,
  "cluttex"        => 1,
  "clxelatex"      => 1,
  "extractbb"      => 1,
  "show-pdf-tags"  => 1,
  "xelatex-unsafe" => 1,
  "xetex-unsafe"   => 1,
);


# packages which have info files to install.
%specialinfos = (
 'latex2e-help-texinfo'         => '\.info',
 'latex2e-help-texinfo-fr'	=> '\.info',
 'latex2e-help-texinfo-spanish' => '\.info',
 'latex2man'                    => '\.info',
 'tds'				=> '\.info',
);

# packages which have info files to build and then install.
%specialtexinfos = (
 'epspdf'                       => '.*\.texi',
 'mf2pt1'                       => '.*\.texi',
 'texdraw'                      => '.*\.texi',
);

# packages which have man pages to install - except for packages with
#   .tds.zip, then we have to call POST_do_man.
# autosp has rebar, but we don't install that executable.
# changebar has chbar, but ditto.
%specialmans = (
 'a2ping'               => '\.1$',
 'axodraw2'		=> '\.1$',
 'bib2gls'		=> '\.1$',
 'bibtexperllibs'	=> '\.1$',
 'bibcop'		=> '\.1$',
 'bookshelf'		=> '\.1$',
 'bundledoc'            => '\.1$',
 'chklref'		=> '\.1$',
 'citation-style-language' => '\.1$',
 'clojure-pamphlet'	=> '\.1$',
 'cluttex'		=> '\.1$',
 'crossrefware'		=> '\.1$',
 'ctanbib'              => '\.1$',
 'ctan-o-mat'           => '\.1$',
 'ctanify'              => '\.1$',
 'dosepsbin'            => 'dosepsbin.man',
 'dviasm'		=> '\.1$',
 'easydtx'		=> '\.1$',
 'eolang'		=> '\.1$',
 'epstopdf'             => 'r?epstopdf.1|epstopdf.man1.pdf', # don't keep pdf
 'extractbb'            => '\.1$',
 'findhyph'             => 'findhyph.1',
 'fontools'             => '\.1$',
 'git-latexdiff'	=> '\.1$',
 'glossaries'		=> '\.1$',
 'l3build'		=> '\.1$',
 'l3sys-query'		=> '\.1$',
 'latex-git-log'        => '\.1$',
 'latex2man'            => '\.1$',
 'latexdiff'            => '\.1$',
 'latexmk'              => 'latexmk.1',
 'light-latex-make'	=> '\.1$',
 'ltximg'		=> '\.1$',
 'luafindfont'		=> '\.1$',
 'mathspic'             => 'mathspic.1',
 'minted'		=> 'latexminted.1',
 'mkjobtexmf'           => 'mkjobtexmf.man',
 'musixtnt'		=> '\.1$',
 'optex'		=> '\.1$',
 'pedigree-perl'        => '\.1$',
 'perltex'              => 'perltex.1',
 'pdfbook2'             => '\.1$',
 'pdfjam'               => 'pdfjam\.1$',
 'pdfxup'               => '\.1$',
 'pmx'                  => '\.1$',
 'ppmcheckpdf'          => '\.1$',
 'purifyeps'            => 'purifyeps.1',
 'rubik'		=> '\.1$',
 'runtexfile'		=> '\.1$',
 'spix'			=> '\.1$',
 'show-pdf-tags'	=> '\.1$',
 'splitindex'           => '\.1$',
 'srcredact'            => '\.1$',
 'sty2dtx'              => '\.1$',
 'texaccents'		=> '\.1$',
 'texdiff'              => 'texdiff.1',
 'texdirflatten'        => 'texdirflatten.1',
 'texdoc'               => '\.1$',
 'texfindpkg'		=> '\.1$',
 'texfot'               => '\.1$',
 'texlogfilter'		=> '\.1$',
 'texlogsieve'		=> '\.1$',
 'tikztosvg'		=> '\.1$',
 'tlcockpit'		=> '\.man$',
 'typog'                => '\.1$',
 'webquiz'              => '\.1$',
 'wheretotrim'          => '\.1$',
);


# which suffixes to remove after building.  Checked after runins and at
# the end, in the doc directory.
$standardclean = '(\.head|\.tmp|\.dvi|\.log|\.out|\.aux|\.toc|\.lof|\.lot'
                . '|\.bbl|\.blg|\.idx|\.ind|\.ilg|\.glo|\.gls|\.loa'
                . '|\.bcf|\.ido|\.run\.xml|\.hd|\.slnc|\.listing'
                . '|\.fdb_latexmk|\.fls'
                . ')$';
%specialclean  = (
 'a2ping'       => 'README',		# not worth whole separate doc subdir
 'accfonts'     => $standardclean . '|dvips.enc',       # dup enc
 'acmconf'      => $standardclean . '|flushend.sty',    # dup with sttools
 'apalike'      => "apalike2.bst",                      # does not belong
 'axodraw2'     => 'axohelp.exe',			# in regular build
 'bardiag'      => "example/.*(aux|log)",               # junk on CTAN
 'beebe'	=> '^([^bt].*|bibmods|bibunits)\.sty$|(gut.*|komoedie|litprog|sgml.*)\.bib$|\.ltx$',	# omit some bibs and support files
 'bibarts'      => 'bibsort.exe',			# not installed
 'bibleref'	=> $standardclean . '|sample.tex|sample-.*', # derived uploaded
 'bbm-macros'   => $standardclean . '|^bbm$',           # symlink
 'bundledoc'    => $standardclean . '|\.pdf$',          # regen for a4
 'catoptions'   => $standardclean . '|Thumbs.db',       # bogus file
 'chklref'	=> $standardclean . '|\.tds\.zip',
 'cmbright'     => 'cmbright.pdf',
 'cprotect'     => $standardclean . '|\.cpt',           # temp files for doc
 'dateiliste'   => $standardclean . '|dateiliste.README*', # already in dist
 'elvish'       => '\.pk3',                             # no pk files
 'emisa'	=> $standardclean . '|\.brf$|emisa-instructions',
 'enctex'	=> '\.ch|\.patch',			# binary-related
 'findhyph'     => 'findhyph.pdf',                      # we generate
 'fontsetup'	=> 'cambria|lucida|minion|msgaramond',	# nonfree
 'fundus'       => $standardclean . '|outline.sty',     # in own package
 'gentle'       => 'gentle.ps.gz',                      # pdf is enough
 'hycolor'	=> 'hycolor\.(drv|ins|log)',
 'ibycus-babel' => $standardclean . '|ibyhyph.tex',    # in hyphen-ancientgreek
 'iwonamath'	=> $standardclean . '|.*FAMILY.*.fd',  # intermediate files
 'jadetex'      => $standardclean           # these sty files are in passivetex
                   . '|(dummyels|mlnames|ucharacters|unicode)\.sty',
 'lshort-russian'=>'lshortbk.zip',                      # sources are enough
 'lshort-spanish'=>'lshort-letter.pdf',                 # a4 is enough
 'mandi'	=> $standardclean . '|\.(lol|tcbtemp|tdo)$',# remakes doc
 'mathexam'     => 'sample.tex~',
 'musixtnt'	=> 'msxlint(.exe)?$',    		# extra binaries
 'placeat'      => $standardclean . '|README\.$',
 'psnfss'	=> $standardclean . '|8r\.enc$',	# already in dvips
 'purifyeps'    => 'purifyeps.pdf',
 'revtex'       => '00readme.tex|DOWNLOAD|README',      # already in doc
 'suftesi'      => 'example/MaterialeInizialeFinale/.DS_Store',
 'swfigure'	=> $standardclean . '|#README.txt#',
 'tds'		=> 'NULL',                              # preserve .dvi
 'tlc2'         => 'NULL',                              # doc package
 'tufte-latex'  => $standardclean . '|.tds.zip$',
 'velthuis'	=> $standardclean . '|devnag.c',	# already in source
 'wsuipa'       => $standardclean . '|.*pk$',           # premade pk files
);

# if a hash entry is matched here, README.TEXLIVE is created mentioning
# that the files were removed.  These are checked after runins.
%moreclean = (
 'akktex'        => 'still to do',
 'alkalami'	 => 'Alkalami-.*pdf',			# InDesign source
 'ametsoc'	 => '.*\.pdf',                          # no source
 'ascii-font'    => '.*\.pdf',                          # no source
 'aucklandthesis' => '.*\.pdf',                         # no source, nonfree
 'bbcard'        => 'bbcard.tpm',                       # old TL infra
 'chessfss'      => 'chessfonts_gallery.pdf|chessfss.pdf', # no source
 'comprehensive' => '-letter.pdf',			# have a4, save space
 'culmus'	 => '\.*pfa',				# have pfb
 'dfgproposal'   => '1_02.*\.pdf',                      # nonfree specs
 'din1505'       => '(leitbild3|normpatsoft).pdf',      # no source
 'easy'          => '.*\.pdf|doc.html.tgz',             # no source
 'eczar'	 => 'ttf',				# dup with otf
 'edmaths'       => 'edmaths-docs.pdf',                 # no source
 'ednotes'       => 'perpage.sty',                      # copy from bigfoot
 'epslatex-fr'   => 'R?Danger.eps',                     # unneeded, name clash
 'exceltex'      => 'manpage.pdf',                      # no source
 'facture'	 => 'issue7.pdf',                       # no source
 'flacards'      => 'flacards.pdf',                     # no source
 'gfsartemisia'  => 'A*Specimen.pdf',                   # no source
 'gfsbaskerville'=> 'B*Specimen.pdf',                   # no source
 'gfsbodoni'     => 'B*Specimen.pdf',                   # no source
 'gfscomplutum'  => 'C*Specimen.pdf',                   # no source
 'gfsdidot'      => '.pdf',                             # no source
 'gfsdidotclassic' => '.pdf',                           # no source
 'gfsneohellenic'=> '.pdf',                             # no source
 'ieeetran'	 => 'IEEEtran.*HOWTO.pdf',
 'jknapltx'      => 'ubbold.fd', # clash bbold's Ubbold.fd; sauter bbold fails
 'kinematikz'	 => '.pdf',				# no source
 'maker'	 => 'maker_manual.pdf',			# no source
 'math-into-latex-4' => 'video.*zip|S.*\.pdf',          # nonfree
 'mgltex'	 => '\.(pdf|eps)$|sample.tex',		# cc nc
 'numericplots'  => '.*\.m',                            # matlab
 'oinuit'        => 'cmssbxo10.tfm',                    # should not be here
 'padauk'	 => '\.pdf$',				# no source
 'pas-cours'     => '\.pdf$',                           # no source
 'pas-tableur'   => '\.pdf$',                           # no source
 'pictex'	 => 'manual.pdf$',			# no source
 'piechartmp'    => 'piechartmp.pdf',                   # no source
 'ptptex'        => '(overcite|cite|wrapfig).sty',      # duplicated
 'scientific-thesis-cover' => 'demo.pdf',		# no source
 'sectionbox'    => 'example/lenna.*.jpg',              # nonfree
 'startex'	 => 'epsf.tex',				# stale copy
 'stubs'         => 'stubs.pdf',                        # no source
 'susy'          => 'susy.pdf',                         # no source
 'swimgraf'      => 'swimgraf.pdf',                     # no source
 'sympytexpackage' => '.*\.pdf$',		        # cc-nc
 'table-fct'	 => '.*\.pdf$',			        # no source
 'tikz-layers'	 => '.*\.pdf$',			        # no source
 'tree-dvips'    => 'avm.*',                            # author no response
 'ucs'		 => 'languages.ps.gz',			# no source
 'unifith'	 => 'unifilogo\.pdf$',			# nonfree
 'xymtex'        => 'doc/.*\.pdf$',                     # no source
 'yannisgr'      => '^(digits|gen_acc)\.mf'             # levy dup
);

#  (main program)
# Read from config file to make local adjustments to above.
readconfig();

# command line options
exit 2 unless Getopt::Long::GetOptions (
  "ctan-dir=s",
  "help",
  "test|n!",
  "contrib",
  "version",
);

for (@ARGV) { # we don't actually support multiple packages in one run
  $packagedir = $_;
  if (! -d $packagedir) {
    warn "$0: $packagedir not a directory, skipping.\n";
    next;
  }

  &set_dir_defaults ($opt_ctan_dir);

  my @x = split(/\//, $packagedir);
  $package = pop (@x);
  my $COOKED_PKG = "$COOKED_TOP/$package";  # output directory

  if ($specialscripts_bin{$package}
      # special POSTcases:
      || $package =~ /^(biber|context|hyph-utf8|mptopdf|musixtnt)$/) {
    $BUILDDEST = "$COOKED_PKG/Build/source";
    $TOPDEST = "$COOKED_PKG/Master";
  } else {
    $BUILDDEST = "oops-no-builddest-should-be-needed?!";
    $TOPDEST = $COOKED_PKG;         # that is, Master
  }

  $DEST_TREE = $specialdest{$package} || $standarddest; # usually texmf-dist
  $DEST = "$TOPDEST/$DEST_TREE";  # goes to Master/texmf-dist or whatever

  $whichformat = $specialfmt{$package} || $standardfmt;
  $whichdocformat = $specialdocfmt{$package} || $standarddocfmt;
  print "pkg=$package (fmt=$whichformat docfmt=$whichdocformat)\n";
  print "  DEST=$DEST (DEST_TREE=$DEST_TREE)\n";
  print "  TOPDEST=$TOPDEST\n";
  print "  BUILDDEST=$BUILDDEST\n";

  $inspatt = $specialins{$package} || &specialins($package) || $standardins;
  $insrunner = $specialinsrunner{$package} || $standardinsrunner;
  $invoke_insrunner = "$insrunner"; # $insrunner_opt";

  $Foundry = $specialfoundry{$package} || $standardfoundry;

  if (exists $special{$package}) {
    if ($special{$package} =~ s/^die //) {
      # avoid repeating the die message.
      die "*** $package failed: $special{$package}\n";
    } else {
      print "special: $special{$package}...\n";
      eval $special{$package};
      die "*** $package failed in $special{$package}:\n $@" if $@;
    }
  } else {
    &donormal;
  }
  &sanitize_file_names ($COOKED_PKG);

  &xchdir ($RAW_DIR);  # pop back to top-level raw dir for next package.
}


# We do not want to deal with anything but "normal" characters, a subset
# of 7-bit ASCII.  The file names appear in too many contexts for
# anything else to reliably work.
#
# Nothing in tlpdb itself restricts the characters used (except for
# spaces and newlines), but we want to be cautious here. That
# discrepancy seems ok?
#
sub sanitize_file_names {
  my ($dir) = @_;
  # -0 in case of spaces or other chars in filenames, which would be
  # parsed into words by the shell otherwise, cause trouble with svn, etc.
  if (-d $dir) {
    my $libexec = "$mydir/../libexec";
    my $rename = "$libexec/rename";
    &SYSTEM ("find $dir -print0 "
              . "| xargs -0 $rename 's![^-_A-Za-z0-9.,/+]!!g'");
  } else {
    die "$0:sanitize_file_names: not a directory, goodbye: $dir\n";
  }
}


# Override our default guess of "latex" if we can intuit from the CTAN
# path, which ctan2tl kindly passes us.
#
sub set_dir_defaults {
  my ($ctan_dir) = @_;
  my $guess = "";

  if ($ctan_dir =~ m!/(CTAN|tex-archive)/biblio/bib!) {
    $standarddocfmt = $standardsourcefmt = "bibtex";
    $guess = "$standarddocfmt for docfmt/srcfmt";

  } elsif ($ctan_dir =~ m!/(CTAN|tex-archive)/fonts/!) {
    $standarddocfmt = $standardsourcefmt = "fonts";
    $guess = "$standarddocfmt for docfmt/srcfmt";

  } elsif ($ctan_dir =~ m!/(CTAN|tex-archive)/(graphics|info)/metapost/!) {
    $standarddocfmt = $standardsourcefmt = "metapost";
    $guess = "$standarddocfmt for docfmt/srcfmt";

  } elsif ($ctan_dir =~ m!/(CTAN|tex-archive)/macros/context/!) {
    $standarddocfmt = $standardsourcefmt = $standardfmt = "context";
    $guess = "$standarddocfmt for fmt/docfmt/srcfmt";

  } elsif ($ctan_dir =~ m!/(CTAN|tex-archive)/macros/(jptex/)?generic/!) {
    $standarddocfmt = $standardsourcefmt = $standardfmt = "generic";
    $guess = "$standarddocfmt for fmt/docfmt/srcfmt";

  } elsif ($ctan_dir =~ m!/(CTAN|tex-archive)/macros/luatex/generic/!) {
    $standarddocfmt = $standardsourcefmt = $standardfmt = "luatex";
    $guess = "$standarddocfmt for fmt/docfmt/srcfmt";

  } elsif ($ctan_dir =~ m!/(CTAN|tex-archive)/macros/luatex/latex/!) {
    $standarddocfmt = $standardsourcefmt = $standardfmt = "lualatex";
    $guess = "$standarddocfmt for fmt/docfmt/srcfmt";

  } elsif ($ctan_dir =~ m!/(CTAN|tex-archive)/macros/plain/!) {
    $standarddocfmt = $standardsourcefmt = $standardfmt = "plain";
    $guess = "$standarddocfmt for fmt/docfmt/srcfmt";

  } elsif ($ctan_dir =~ m!/(CTAN|tex-archive)/macros/xetex/latex/!) {
    $standarddocfmt = $standardsourcefmt = $standardfmt = "xelatex";
    $guess = "$standarddocfmt for fmt/docfmt/srcfmt";

  } elsif ($ctan_dir =~ m!/(CTAN|tex-archive)/macros/xetex/plain/!) {
    $standarddocfmt = $standardsourcefmt = $standardfmt = "xetex";
    $guess = "$standarddocfmt for fmt/docfmt/srcfmt";

  } elsif ($ctan_dir
       =~ m!/(CTAN|tex-archive)/(indexing|support|web|graphics/.*/scripts)/!) {
    $standarddocfmt = $standardsourcefmt = "support";
    $guess = "$standarddocfmt for docfmt/srcfmt";

  } elsif ($ctan_dir =~ m!/babel[-/]contrib/!) {
    # this can be removed when Catalogue is complete.
    $standarddocfmt = $standardsourcefmt = $standardfmt = "generic";
    $guess = "$standarddocfmt for fmt/docfmt/srcfmt (babel)";
  }

  print "\t guessing $guess (based on $ctan_dir)\n" if $guess;
}



sub xchdir {
  my ($dir) = @_;
  chdir ($dir) || die "chdir($dir) failed: $!";
  my $pwd = getcwd ();
  print "\t CHDIR $dir (now $pwd)\n";
}

sub xmkdir {
  my (@dirs) = @_;
  &SYSTEM ("mkdir -p @dirs");
}

# mv multiple things into one final (possibly new) destination directory.
sub mv_with_mkdir {
  my @args = @_;
  my $destdir = pop (@args);
  &xmkdir ($destdir);
  &SYSTEM ("$MV @args $destdir");
}

# mv a single thing to another name, ensuring the parent of the
# destination exists. If the destination itself exists and is an empty
# directory, rmdir it. Otherwise it's an error.
sub rename_with_mkdir {
  my ($from,$to) = @_;
  die "rename_with_mkdir needs exactly two args (got @_)" if @_ != 2;
  if (-e $to) {
    rmdir ($to); # ignore errors.
    die ("rename_with_mkdir destination exists: $to\n"
         . `ls $to`)
      if -e $to;
  }
  (my $parent = $to) =~ s,/[^/]*$,,;
  &xmkdir ($parent);
  &xsystem ("$MV $from $to");
}

# run a shell command, ignoring return status (historic,
# calls should be changed).
#
sub SYSTEM {
 my ($job) = @_;
 if ($opt_test) {
   print "\t SYSTEM $job # test\n";
 } else {
   print "\t SYSTEM $job\n";
   system ($job);
 }
}

# system but abort if the command fails.
#
sub xsystem {
  my ($cmd) = @_;

  print "\t XSYSTEM $cmd\n";

  unless ($opt_test) {
    my $ret = system ($cmd);
    $ret /= 256;
    die "`$cmd' failed, status=$ret, goodbye\n" if $ret != 0;
  }
}

# Return .exe or empty string, as required by PLATFORM.
#
sub exeext {
  my ($platform) = @_;
  my $ext = $platform =~ /^(windows.*|.*-cygwin)$/ ? ".exe" : "";
  return $ext;
}

# copy man pages matching PKG from runtime to new stage directory,
# so they won't appear to be deleted.
#
sub preserve_man_pages {
  my (@mans) = @_;

  print " preserve_man_pages(@mans)\n";
  for my $man (@mans) {
    print " preserve_man_pages - doing $man\n";
    my $mandest = "$TOPDEST/texmf-dist/doc/man/man1";
    &xmkdir ($mandest);
    &SYSTEM ("$CP $Master/texmf-dist/doc/man/man1/$man.* $mandest/");
  }
}



# some packages need to intervene at the beginning.
sub run_prehook {
  my $prehook = $prehook{$package};
  if ($prehook) {
    print "\t PREHOOK: running $prehook in " . `pwd`;
    eval $prehook;
    die "$package failed in $prehook: $@" if $@;
    print "\t PREHOOK: finished $prehook\n";
  }
}



# some packages (e.g., vntex) are tl-ready (or near enough).
#
sub MAKEcopy {
  my $dest = $_[0] || $DEST;
  my $pdir = $packagedir;

  chomp (my $abspackagedir = `cd $pdir && pwd`);
  print "\t COPY from $abspackagedir to $dest\n";

  &xchdir ($pdir);
  &SYSTEM ("mkdir -p $dest");

  # do the copy.
  &SYSTEM ("$CP -r * $dest");

  # allow for playing around after the copy. The prehook stuff was
  # invented after the following special cases; not worth cleaning up.
  # Many of them would be better as posthooks anyway.
  &xchdir ($dest);
  &run_prehook ();

  my $docdir = "$dest/doc/$whichdocformat/$package/";
  &xmkdir ($docdir);

  # for arev et al., remove symlinks.
  &SYSTEM ("find $dest -type l | xargs --no-run-if-empty $RM");

  # remove __MACOSX (and report to CTAN).
  &SYSTEM ("find $dest -name __MACOSX | xargs --no-run-if-empty $RM -r");

  # ditto assorted other for lm (files are in doc subtree already).
  -r "$dest/MANIFEST.txt"
  && &SYSTEM ("cd $dest && $RM GUST*.txt MANIFEST.txt README.eng");

  # move README for encxvlna and others.
  -r "$dest/README"
  && &SYSTEM ("$MV $dest/README $docdir/");

  # move manifest.txt for droid.
  -r "$dest/manifest.txt"
  && &SYSTEM ("$MV $dest/manifest.txt $docdir/");

  # move CHANGELOG for stellenbosch.
  -r "$dest/CHANGELOG"
  && &SYSTEM ("$MV $dest/CHANGELOG $docdir/");

  # move README.eulervm for eulervm.
  -r "$dest/README.eulervm"
  && &SYSTEM ("$MV $dest/README.eulervm $docdir/");

  # for tex-gyre, rename context subdir.  (shouldn't be needed next time.)
  if (-d "$dest/fonts/map/pdftex/context") {
    print "$package: rename context map dir.\n";
    &SYSTEM ("$MV $dest/fonts/map/pdftex/context $dest/fonts/map/pdftex/tex-gyre");
  }

  # for velthuis, remove bin dir (with warning).
  if ($package eq "velthuis" && -d "$dest/bin") {
    warn "WARNING: removing bin/ dir in $dest\n";
    warn " -- YOU must deal with it!\n";
    &SYSTEM ("rm -rf $dest/bin");
  }

  # preserve the lm sources.
  if ($package eq "lm") {
    my $srcdir = "$dest/source/fonts/$package/";
    &SYSTEM ("mkdir -p $srcdir");
    &SYSTEM ("$MV $dest/lm*mt1.zip $srcdir/");
  }

  &xchdir ($DEST);
  &killfiles ($specialclean{$package} || $standardclean);
  &killfiles ($moreclean{$package}, "more") if $moreclean{$package};

  # horrible special case to avoid listing every context-* package again.
  if ($package =~ /^context-/ && ! $posthook{$package}) {
    $posthook{$package} = "POST_context_contrib";
  }

  &do_posthook ();
}

sub do_posthook {
  my $posthook = $posthook{$package};
  if ($posthook) {
    print "\t POSTHOOK running $posthook\n";
    eval ($posthook);
    die "$package failed in $posthook: $@" if $@;
    print "\t POSTHOOK done with $posthook\n";
  }
}


# 
# For most packages, this is the first thing called.  It copies
# everything from $packagedir to the doc directory of the package.
#
sub setup {
  my ($ctl) = @_;

  print "doing setup($ctl)...\n";
  # precreate the directories we might need.
  $DOCDIR = "$DEST/doc/$whichdocformat/$package";
  &SYSTEM ("mkdir -p $DOCDIR");
  &SYSTEM ("mkdir -p $DEST/tex/$whichformat/$package");
  &SYSTEM ("mkdir -p $DEST/source/$whichdocformat/$package");

  # remove README symlinks.
  &SYSTEM ("test -h $packagedir/README && $RM $packagedir/README");

  # remove .DS_Store files
  &SYSTEM ("find -name .DS_Store | xargs $RM");

  return if $ctl eq "nocopytodoc";
  # copy everything to the doc directory
  # and work in there.
  &SYSTEM ("$CP -r $packagedir/* $DEST/doc/$whichdocformat/$package");
}

sub donormal {
   my ($ctrl) = @_;
   
   print "doing donormal($ctrl) with DEST=$DEST\n";

   # Check for tds-ready packages
   if (-e "$RAW_DIR/$packagedir/TDS_READY") {
     print "using TDS_READY tree\n";
     &SYSTEM ("$RM $RAW_DIR/$packagedir/TDS_READY");
     &SYSTEM ("mkdir -p $DEST");
     &xchdir ($DEST);
     &SYSTEM ("$CP -r $RAW_DIR/$packagedir/* .");

     my $scriptdir = "$DEST/scripts/$package";
     if (-d $scriptdir) {
       &xchdir ($scriptdir);
       &doscripts;
       &xchdir ($DEST);
     }

     my @docdirs = glob ("doc/*/*/");
     if ($moreclean{$package} && @docdirs) {
       &xchdir ($docdirs[0]);
       &killfiles ($moreclean{$package}, "more");
     }

   } else {
     # Use the normal procedure, not TDS.

     &setup unless $ctrl eq "nosetup";
     &xchdir ("$DEST/doc/$whichdocformat/$package");
     &run_prehook ($package) unless $ctrl eq "nosetup";

     &buildfilelist;

     # run the .ins files (if any) supplied
     &runins($inspatt);

     &killfiles ($moreclean{$package}, "more") if $moreclean{$package};

     # rebuild the list of files in the directory
     &buildfilelist;

     if ($Foundry eq "metafont") {
       &dosimplemf;
     } else {
       &domf;
     }

     &dodvi;
     # rebuild again, as we have .dvi files now
     &buildfilelist;
     &doscripts; # scripts first since otherwise may match tex
     &dobst;
     &domp;
     &dobib;
     &dotex;
     &runfonts;
     &domakeindex;
     &doomega;
     &dosource;
     &dotype1;
     &dotexinfos;
     &doinfos;
     &domans;
     &killfiles ($specialclean{$package} || $standardclean);
   }

   # do the postaction in any case (we need to adapt some tds zips).
   &do_posthook ();

   # remove ._ files left in tarballs by careless authors.
   &SYSTEM ("find $DEST -name '._*' | xargs --no-run-if-empty $RM");

   # Delete empty directories; assume GNU find, to make it easy.
   print "\t DONORMAL removing empty directories from dest: $DEST\n";
   &SYSTEM ("find $DEST -type d -empty -delete -print");
}

sub runins {
  my ($thispatt) = @_;
  print "\t RUNINS $thispatt\n";
  # @filenames is just in the current directory, not recursive.
  for (grep (/$thispatt/, @filenames)) {
    my $env_mktex = "env MKTEXTFM=0 MKTEXMF=0 MKTEXPK=0";
    # do not infinite loop on docstrip "output directory", e.g., fltpoint.
    #&runjob ("yes | sed 1000q | $env_mktex $insrunner $_");
    &runjob ("$invoke_insrunner $_");

    # bbold.dtx generates bbold.ins, and then does "low level hacks" to
    # run the .ins itself. mathfont.dtx and gridset.dtx generate
    # .ins files to no purpose (and they don't work). We don't want to
    # do anything in these cases.
    next if $package =~ /^(bbold|mathfont|gridset)$/;

    # in the case of fullblck (et al.), the .dtx creates the .ins (so the
    # .ins is not in @filenames), and the .ins creates the .sty.
    # So we have to run the .ins.
    if (! grep (/$package\.ins$/, @filenames) && -r "$package.ins") {
      #&runjob ("yes | sed 10q | $env_mktex $insrunner $package.ins");
      &runjob ("$invoke_insrunner $package.ins");
      # and this will normally create .drv and .ins files,
      # which don't need to be distributed.
      $specialclean{$package}
        = $standardclean . "|$package\.(drv|ins)\$" # made from dtx
        if ! exists $specialclean{$package};
      warn "set specialclean{$package} = $specialclean{$package}\n";
    }
  }

  &killfiles ($specialclean{$package} || $standardclean);
}

# Install files into DESTDIR matching THISPATT.
#
sub install {
  my ($destdir,$thispatt) = @_;
  return unless $thispatt;

  my @files = grep (/$thispatt/, @filenames);  # ugh, @filenames global
  return unless @files;  # avoid lots of useless output

  print "\t INSTALL $thispatt to $destdir\n";
  &xmkdir ($destdir) unless -d $destdir;

  for my $file (@files) {
    next if $file eq "dtx-style.sty";  # this should never be in runtime
    next if $file =~ /-doc-settings.sty$/;  # ditto
    &SYSTEM ("$MV $file $destdir");
  }
}



# build the documentation files (we don't any more).
#
sub dodvi {
  # packages which are doc themselves rarely rebuild cleanly,
  # and aren't worth it.
  $dvipatt = $specialdvi{$package} || $standarddvi;
  unless ( "$dvipatt" eq "$standarddvi" ) {
    warn "$0: Building doc: shouldn't need to do that. Please check.";
    &rundvi ($dvipatt);
  }
}

# move the runtime files
sub dotex {
  my $texpatt = $specialtex{$package} || $standardtex;
  print "\t DOTEX $texpatt\n";
  &install("$DEST/tex/$whichformat/$package", $texpatt);
}

# move the makeindex runtime files
sub domakeindex {
   $makeindexpatt = $specialmakeindex{$package};
   if ($makeindexpatt eq "") { $makeindexpatt=$standardmakeindex; }
   print "\t DOMAKEINDEX $makeindexpatt\n";
   &install("$DEST/makeindex/$package",$makeindexpatt);
}

# BibTeX style files:
sub dobst {
   print "\t DOBST\n";
   $csfpatt = $specialcsf{$package};
   if ($csfpatt eq "") { $csfpatt=$standardcsf; }
   &install("$DEST/bibtex/csf/$package",$csfpatt);
   $bstpatt = $specialbst{$package};
   if ($bstpatt eq "") { $bstpatt=$standardbst; }
   &install("$DEST/bibtex/bst/$package",$bstpatt);
}

# simple MF files, e.g., if specialfoundry eq "metafont".
sub dosimplemf {
   my $mfpatt = $specialmf{$package} || $standardmf;
   print "\t DOSIMPLEMF $mfpatt\n";
   &install ("$DEST/metafont/$package", $mfpatt);
}

# MetaPost files:
sub domp {
   $mppatt = $specialmp{$package} || $standardmp;
   print "\t DOMP $mppatt\n";
   &install("$DEST/metapost/$package", $mppatt);
}

# BibTeX bibliography files:
sub dobib {
  $bibpatt = $specialbib{$package} || $standardbib;
  print "\t DOBIB $bibpatt\n";
  &install("$DEST/bibtex/bib/$package", $bibpatt);
}

# source files:
sub dosource {
  $sourceformat = $specialsourcefmt{$package} || $standardsourcefmt;
  # default to using specialdocfmt, as we do in setup?
  $sourcepatt = $specialsource{$package} || $standardsource;
  print "\t DOSOURCE $sourcepatt\n";
  &install("$DEST/source/$sourceformat/$package", $sourcepatt);
}

# omega files:
sub doomega {
   print "\t DOOMEGA\n";
   $ovfpatt = $specialovf{$package};
   if ($ovfpatt eq "") { $ovfpatt=$standardovf; }
   &install("$DEST/fonts/ovf/public/$package",$ovfpatt);
   $ofmpatt = $specialofm{$package};
   if ($ofmpatt eq "") { $ofmpatt=$standardofm; }
   &install("$DEST/fonts/ofm/public/$package",$ofmpatt);
   $ovppatt = $specialovp{$package};
   if ($ovppatt eq "") { $ovppatt=$standardovp; }
   &install("$DEST/fonts/ovp/public/$package",$ovppatt);
   $otppatt = $specialotp{$package};
   if ($otppatt eq "") { $otppatt=$standardotp; }
   &install("$DEST/omega/otp/$package",$otppatt);
   $ocppatt = $specialocp{$package};
   if ($ocppatt eq "") { $ocppatt=$standardocp; }
   &install("$DEST/omega/ocp/$package",$ocppatt);
}

# the dvips and font mapping files:
sub dotype1{
   print "\t DOTYPE1\n";
   my $encpatt = $specialenc{$package} || $standardenc;
   &install("$DEST/fonts/enc/dvips/$package", $encpatt);

   my $mappatt = $specialmap{$package} || $standardmap;
   my $mapdest = $specialmapdest{$package} || $standardmapdest;
   &install ("$DEST/$mapdest/$package", $mappatt);

   my $vmappatt = $specialvmap{$package} || $standardvmap;
   &install("$DEST/fonts/map/vtex/$package", $vmappatt);

   my $propatt = $specialpro{$package} || $standardpro;
   &install("$DEST/dvips/$package", $propatt);

   my $foundry = $specialfoundry{$package} || $standardfoundry;

   my $pfbpatt = $specialpfb{$package} || $standardpfb;
   &install("$DEST/fonts/type1/$foundry/$package", $pfbpatt);

   my $afmpatt = $specialafm{$package} || $standardafm;
   &install("$DEST/fonts/afm/$foundry/$package", $afmpatt);

   my $pfmpatt = $specialpfm{$package} || $standardpfm;
   &install("$DEST/fonts/type1/$foundry/$package", $pfmpatt);

   my $otfpatt = $specialotf{$package} || $standardotf;
   &install("$DEST/fonts/opentype/$foundry/$package", $otfpatt);

   my $ttfpatt = $specialttf{$package} || $standardttf;
   &install("$DEST/fonts/truetype/$foundry/$package", $ttfpatt);

   my $sfdpatt = $specialsfd{$package} || $standardsfd;
   &install("$DEST/fonts/sfd/$package", $sfdpatt);
}



# scripts.  Make them executable even if it isn't always necessary.
# Build/source/tex/texlive/linked_scripts/Makefile.am installs symlinks
# in the bin directories where needed.  That Makefile is independently
# maintained, and needs to be updated by hand when new user-visible scripts
# are added.  We add/update the script itself under linked_scripts.
# We also make the symlinks/w32-wrapper-copy in Master/bin.
#
sub doscripts {
  print "\t DOSCRIPTS\n";
  my $pwd = getcwd();
  my $scriptsdir = "$DEST/scripts/$package";

  # in the .tds.zip case, we will already be in the scripts dir
  # and they will already be installed, ipso facto.
  my $tds_zip = $pwd eq $scriptsdir;

  my @scripts = ();
  # first do the user-visible bindir entries.
  $scriptpatt = $specialscripts_bin{$package};
  if ($scriptpatt) {
    print  " doing bindir pattern $scriptpatt...\n";
    if (! $tds_zip) {
      &install ($scriptsdir, $scriptpatt);
      &SYSTEM ("chmod a+x $scriptsdir/*");
    }
    # determine list of scripts from scriptpatt, since a .tds.zip (e.g.,
    # adhocfilelist) might have unpacked others into the scripts/ dir.
    chomp (@scripts = grep (/$scriptpatt/, `ls $scriptsdir`));
    #
    # update the copy in Build (the reason we do the bindir ones first).
    for my $s (@scripts) {
      &build_scripts_copy ("$scriptsdir/$s");
    }
  }

  # then do the ones that go only under scripts/ and not in the bindirs.
  # (and hence also not in Build.)
  my $nobin_scriptpatt = $specialscripts_nobin{$package};
  if ($nobin_scriptpatt) {
     print  " doing nobin pattern $nobin_scriptpatt...\n";
    if (! $tds_zip) {
      &install ($scriptsdir, $nobin_scriptpatt);
      &SYSTEM ("chmod a+x $scriptsdir/*");
    }
  }

  # List of scripts we just copied in for installing in the bindirs.
  return unless @scripts;

  # If not already present, create the platform-specific bindir entries.
  #
  my $build_tldir = "texk/texlive";
  chomp (my @platforms = `cd $Master/bin && ls | grep -vw man`);
  print  " linking in platforms: @platforms\n";
  #
  for my $s (@scripts) {
    (my $linkname = $s) =~ s/\..*$//;
    print  " beginning linking script $s to $linkname\n";

    if ($package =~ /^(memoize|listings-ext)$/) {
      # memoize requires preserving the .pl/.py extensions,
      # ditto listings-ext.sh.
      $linkname = $s;
      print "  package $package special case: linking to $linkname\n";
    }

    for my $p (@platforms) {
      my $platdir = "$TOPDEST/bin/$p";
      &xmkdir ($platdir);
      #
      if ($p !~ /win32|windows/) {
        my $linktarget = "../../$DEST_TREE/scripts/$package/$s";
        &SYSTEM ("ln -s $linktarget $platdir/$linkname");
        #
        # Scripts with multiple links.
        # xxqqq should merge with bin_links in
        # Build/source/texk/texlive/linked_scripts/Makefile.am.
        &SYSTEM ("ln -s $linkname $platdir/cllualatex")
          if $linkname eq "cluttex"; # cluttex->cllualatex
        &SYSTEM ("ln -s $linkname $platdir/clxelatex")
          if $linkname eq "cluttex"; # cluttex->clxelatex
        #
        &SYSTEM ("ln -s $linkname $platdir/ebb")
          if $linkname eq "extractbb"; # ebb->extractbb
        #
        &SYSTEM ("ln -s $linkname $platdir/r$linkname")
          if $linkname =~ /^(pdfcrop|epstopdf)$/; # rpdfcrop ->pdfcrop, ...
        #
        &SYSTEM ("ln -s $linkname $platdir/latexdef")
          if $linkname eq "texdef"; # latexdef->texdef

      } else {
        # Windows.  If a shell script, usually skip, except for Java
        # programs.  Else copy the wrapper.
        if ($s !~ /albatross|arara|bib2gls|convertgls2bib|datatool2bib
                   |texosquery|texplate|tlcockpit/x) {
          next if $s =~ /\.sh$/ && $s !~ /-sys\.sh$/;
        }
        #
        # Other shell scripts whose names don't end in .sh.  We need to
        # change this to match texmf_dist_shell_scripts in
        # linked_scripts/Makefile.am, or rather read that list.  xxxqqq
        next if $s =~ /dtx(file)?gen/;
        next if $s =~ /(git-latexdiff|latexfileversion|ltxfileinfo)$/;
        next if $s =~ /pdf(book2|xup)/;
        next if $package eq "pagelayout";
        next if $package eq "pdfjam";
        next if $package eq "pdftex-quiet";
        next if $package eq "tikztosvg";
        #
        if ($s eq "ps4pdf") {  # package pst-pdf
          # handwritten special .bat
          &SYSTEM ("$CP $s.bat.noMiKTeX $platdir/$s.bat");
          # keep copy in scripts/ too, for clarity?
          &SYSTEM ("$MV $s.bat.noMiKTeX $scriptsdir");
          # best to have wrapper also, maybe?

        } elsif ($s eq "latexindent.pl") {
          # provided .exe (made with par::packer)
          &SYSTEM ("$MV bin/windows/latexindent.exe $platdir/");
          next; # no wrapper

        } elsif ($s eq "lua2dox_filter") { # package lua2dox
          # handwritten .bat
          &SYSTEM ("$MV $s.bat $platdir/");
          next; # no wrapper

        } elsif ($s eq "texaccents.sno") {
          # provided .exe
          &SYSTEM ("$MV texaccents.exe $platdir/");
          next; # no wrapper
        }

        # next bit of ugliness: can be better to use the GUI wrapper
        # wrunscript.exe (which only exists in Master/bin/win32) instead
        # of the usual runscript.exe
        my $w32_wrapper_exe = $s eq "tlcockpit.sh" ?
            "wrunscript.exe" : "runscript.exe";

        # Handle the UTF-8 wrappers
        if ($specialscripts_utf8win{$linkname}) {
            $w32_wrapper_exe = "utf8runscript.exe";
        }

        my $w32_wrapper = "$Master/bin/windows/" . $w32_wrapper_exe;
        #
        # xx here too, should merge with bin_links in
        # Build/source/texk/texlive/linked_scripts/Makefile.am,
        # or at least with above duplicated code.
        &SYSTEM ("$CP $w32_wrapper $platdir/$linkname.exe");
        &SYSTEM ("$CP $w32_wrapper $platdir/r$linkname.exe")
          if $linkname =~ /^(pdfcrop|epstopdf)/; # r{pdfcrop,epstopdf}.exe
        &SYSTEM ("$CP $w32_wrapper $platdir/latexdef.exe")
          if $linkname eq "texdef"; # latexdef->texdef
        if ($linkname eq "cluttex") {
          &SYSTEM ("$CP $w32_wrapper $platdir/cllualatex.exe");
          &SYSTEM ("$CP $w32_wrapper $platdir/clxelatex.exe");
        }
      }
    }
  }
}

# Called from doscripts: Update copy of EXEC under
# # Build/.../linked_scripts. If second arg INTERMEDIATE_DIRS is given
# (used to be done by ConTeXt), that path is appended under
# linked_scripts/. In any case, just the basename of EXEC is used in the
# destination, and the full EXEC, whatever it is, is used for the source
# of the copy.
#
sub build_scripts_copy {
  my ($exec,$intermediate_dirs) = @_;

  # prepend / to INTERMEDIATE_DIRS if given.
  $intermediate_dirs = ($intermediate_dirs ? "/$intermediate_dirs" : "");

  my $build_tldir = "texk/texlive";
  my $build_scriptsdir = "$build_tldir/linked_scripts";
  my $build_subdir = "$package$intermediate_dirs";
  my $builddir = "$BUILDDEST/$build_scriptsdir/$build_subdir";
  &xmkdir ($builddir);
  #
  &SYSTEM ("$CP $exec $builddir/");

  # Warn if missing from the Makefile.am in the sources.
  # (but not for mptopdf, since peb unified it.)
  return if $exec =~ /mptopdf/;
  (my $exec_basename = $exec) =~ s,^.*/,,;
  my $pattern = "\\b$build_subdir/$exec_basename\\b";
  #
  my $scripts_Makefile = "$Build/$build_scriptsdir/Makefile.in";
  system ("grep '$pattern' $scripts_Makefile >/dev/null");
  if ($? != 0) {
    print "*** $build_subdir/$exec_basename not in $scripts_Makefile\n";
  }
  # scripts.lst is superseded with scripts-targets.lst,
  # but keep them both for build procedures. Unfortunately,
  # scripts-targets.lst has to be updated after "place",
  # by running make -C .../Work/texk/texlive/linked_scripts install,
  # before committing.
  for my $scripts_lst ("$Build/$build_scriptsdir/scripts-targets.lst",
                       "$Build/$build_scriptsdir/scripts.lst") {
    system ("grep '$pattern' $scripts_lst >/dev/null");
    if ($? != 0) {
      print "*** $build_subdir/$exec_basename not in $scripts_lst\n";
    }
  }
}


# info files.  We put these in texmf-dist/doc/info, which is where we keep
# the info files for the programs, too.  Having an info dir in
# texmf-dist also would imply lots of changes in the installer, and
# there seems to be no gain.
#
sub doinfos {
   my $infopatt = $specialinfos{$package};
   return unless $infopatt;
   print "\t DOINFOS $infopatt\n";
   &install ("$TOPDEST/texmf-dist/doc/info/", $infopatt);
}


# generate info files from .texi.
#
sub dotexinfos {
  my $texipatt = $specialtexinfos{$package};
  return unless $texipatt;
  print "\t DOTEXINFOS $texipatt\n";

  local *DOT;
  opendir (DOT, ".") || die "opendir(.) failed: $! in " . `pwd`;
  my @files = readdir (DOT);
  my @texi_files = grep (/$texipatt/, @files);
  die ("dotexinfos: no texi files match $texipatt (@files) in " . `pwd`)
    if ! @texi_files;

  closedir (DOT) || die "closedir(.) failed: $! in " . `pwd`;

  print "tl_texi_to_info for: @texi_files\n";
  &SYSTEM ("$MAKEINFO --force --no-split @texi_files");

  # install() needs the @filenames global set (ugh).
  local @filenames = <*.info>;
  &install ("$TOPDEST/texmf-dist/doc/info/", '.info');
}


# man pages.  We put these in texmf-dist/doc/man/man1, a la info (see above).
#
sub domans {
  my $manpatt = $specialmans{$package};
  return unless $manpatt;
  print "\t DOMANS $manpatt\n";
  &install ("$TOPDEST/texmf-dist/doc/man/man1/", $manpatt);
  &tl_man_to_pdf ();  # make pdfs for them
}

# When a package has man pages, we want to update the pdf versions of
# them that we distribute using our Makefile setup, so that they are
# all consistent.  So we copy over our Makefiles, run make, and then
# remove them. The .1 file has to be added to specialmans.
#
sub tl_man_to_pdf {
  my ($secnum) = @_;
  $secnum = 1 unless $secnum;
  my $manN = "man$secnum";

  my $Master_man = "$Master/texmf-dist/doc/man";
  my $pkg_man = "$TOPDEST/texmf-dist/doc/man";
  print "tl_man_to_pdf for: " . join (" ", <$pkg_man/$manN/*>) . "\n";

  my $man_makefiles = "Makefile $manN/Makefile";
  &xmkdir ("$pkg_man/$manN");
  &SYSTEM ("cd $Master_man && $CP --parents $man_makefiles $pkg_man/");

  # Extra complication: we don't want to rebuild everything, only those
  # that have changed.  Therefore, also copy in the pdfs for the package
  # being updated from the Master man dir.
  for my $man (<$pkg_man/$manN/*>) {
    if ($man =~ /\.man$/) {  # rename from .man to .1
      (my $this_man = $man) =~ s/\.man$/\.$secnum/;
      &SYSTEM ("$MV $man $this_man");
      $man = $this_man;
    }
    (my $pdf_man = $man) =~ s,^.*/,,;  # just foo.1, no directories
    $pdf_man =~ s/$secnum$/$manN.pdf/; # foo.1 -> foo.man1.pdf
    #
    my $Master_pdf_man = "$Master_man/$manN/$pdf_man";
    if (-r $Master_pdf_man) {
      &SYSTEM ("$CP $Master_pdf_man $pkg_man/$manN/");  # copy existing
    }
  }

  &SYSTEM ("cd $pkg_man && make DIR=$manN");               # build new pdfs
  &SYSTEM ("cd $pkg_man && $RM Makefile $manN/Makefile");  # rm Makefiles
}


# build the font files
sub domf {
  $mfpatt = $specialmf{$package} || $standardmf;
  &runmf ($mfpatt);

  my $mfdir = "$DEST/fonts/source/$Foundry/$package";
  #
  # don't use $mfpatt since that's only the tfm-able mf files; just
  # install all the .mf files.
  my $mf_inst_patt = $specialmfinstall{$package} || $standardmfinstall;
  print "\t DOMF for package $package ($mf_inst_patt)\n";
  &install ($mfdir, $mf_inst_patt);
}

sub runmf {
  my ($mfpatt) = @_;
  print "\t RUNMF for package $package ($mfpatt)\n";
  print "\t   against filenames: @filenames\n";
  for my $file (grep (/$mfpatt/, @filenames)) {
    ($FileBase,$Filepath,$Filesuffix) = fileparse ($file, "\.[A-z]*");
    if (! -e "$FileBase.tfm") {
      print "\t\t Make TFM from $file\n";
      &runjob ("mktextfm --destdir=`pwd` $FileBase.tfm");
      &SYSTEM ("$RM *pk");  # not worth the space
    }
  }
}

sub rundvi {
   local($thispatt) = @_;
   $TEX = $specialTEX{$package};
   if ($TEX eq "") {
       if ($whichformat eq 'latex') { $TEX="pdflatex"; }
       else { $TEX=$whichformat; }
   }
   if ($TEX eq "generic") { $TEX="pdflatex"; }
   print "\t MAKEDVI $thispatt using $TEX (@filenames)\n";
   for (grep(/$thispatt/,@filenames)) {
     ($FileBase,$Filepath,$Filesuffix) = fileparse($_,"\.[A-z]*");
     print "found $FileBase\n";
      if (-r "$FileBase.drv" && $Filesuffix eq ".dtx" )
          { $Filesuffix=".drv" ; }
      print "\t DOC: run $TEX on $FileBase$Filesuffix\n";
      open(TMP,">$FileBase.aux");
      close(TMP);
      &runjob("TEXMFLOCAL=. $TEX '\\nonstopmode\\input $FileBase$Filesuffix'");
      &runjob("bibtex $FileBase");
      &runjob("TEXMFLOCAL=. $TEX '\\nonstopmode\\input $FileBase$Filesuffix'");
      if ($Filesuffix eq ".drv" || $Filesuffix eq ".dtx" ) {
        &runjob("$CP $RAW_DIR/gind.ist .");
        &runjob("makeindex -s gind.ist $FileBase");
        unlink "gind.ist";
      } else {
        &runjob("makeindex $FileBase");
      }
      &runjob("$TEX '\\nonstopmode\\input $FileBase$Filesuffix'");
   }
   print "\t MAKEDVI done\n";
}

# run a &SYSTEM job, and append stderr output to log file
#
sub runjob {
  my ($job) = @_;
  my $status = 0;

  if ($opt_test) {
    print "WOULDRUNJOB $job\n";
  } else {
    my $Jobid = "_$$";
    chomp (my $PWD = `pwd`);
    &SYSTEM ("$job</dev/null >$PWD/$Jobid.log 2>&1");  # '\\end'
    $status = $?;
    local *TMP;
    open (TMP, "$Jobid.log") || die "open($Jobid.log) failed: $!";
    my @output = (<TMP>);
    if ($job =~ /^mktextfm/) {
      my $lastline = $output[$#output-1];
      print "runjob mktextfm last output line: $lastline\n";
      # it's too verbose to print the full mf run of every font.
      # but if mktextfm failed, show it.
      print `cat $Jobid.log` if $status != 0;
      $status = 0; # do not worry if the bitmap failed, e.g., grtt10.mf.
    } else {
      print `cat $Jobid.log`;
    }
    close (TMP);
    system ("$RM -f /tmp/$Jobid.log; mv $Jobid.log /tmp"); # save last log

    die "*** goodbye, exit status $status for $job\n"
      if $status != 0;
    die "*** goodbye, files could not be generated for $job\n"
      if "@output" =~ /can't write on file/;
  }
  return $status;
}

# Remove all files matching something in $KILLPATT.
# Also remove .ps files for which we have a .pdf.
#
# if MORE is true, remove additional files matching something in
# $moreclean and create a README.TEXLIVE which lists the removed files.
# As a kludge (once used for rangen and marvosym, now for sectionbox and
# xymtex), if KILLPATT starts with a directory path (e.g., doc/), we cd
# to that directory before globbing (and cd back at the end).
#
# The NOTCTAN argument is used for microtype, where we have to remove
# derived files which don't exist on CTAN.
#
# (Switching all the kill patterns to globs, so we could just use the
# glob function, seemed too ugly.  And removing the file in a posthook
# would have meant a separate fn for README.TEXLIVE, also ugly.)
#
sub killfiles {
   my ($killpatt,$more,$notctan) = @_;

   print "killfiles($killpatt,$more,$notctan)\n";
   return unless $killpatt;

   # cd to a leading directory name in KILLPATT.
   my $origdir = "";
   if ($killpatt =~ m,^(.*/),,) {
     $origdir = getcwd ();
     &xchdir ($1);
     $killpatt =~ s,^$1,,;
   }

   local *DOT;
   opendir (DOT, ".") || die "opendir(.) failed: $! in " . `pwd`;

   my @delfiles = ();
   for (grep (/$killpatt/, readdir (DOT))) {
     if (unlink ($_)) {
       print "\t Removing $_\n";
       push (@delfiles, $_);
     } else {
       warn "unlink($_) failed: $!";
     }
   }
   for (grep (/\.ps$/, @filenames)) {
     (my $pdf = $_) =~ s/ps$/pdf/;
     next unless grep (/$pdf/, @filenames);
     print "\t Removing ps $_ (since have $pdf)\n";
     unlink ($_) && push (@delfiles, $_);
   }

   if ($more && @delfiles) {
     # create/update README.TEXLIVE.
     open (RTL, ">README.TEXLIVE") || warn "open(>README.TEXLIVE) failed: $!";
     print RTL <<"EOF";
The files below have been removed in the TeX Live installation of
the current package, possibly because of missing source (e.g., a
PDF with no source), possibly because their only purpose is to support
nonfree fonts or other software, possibly for other reasons.
More info: https://tug.org/texlive/pkgcontrib.html#requirements

If this is a concern, please contact the package maintainer.

EOF
     if (! $notctan) {
       # get package url on CTAN
       my $ctan_url = '.';
       chomp (my $ctan_dir = `tlpkginfo --ctan-dir $packagedir`);
       if (not $?) {
         $ctan_dir =~ s!$ctan_root/!!;
         $ctan_url = " at\n\thttps://mirror.ctan.org/$ctan_dir";
       }
       print <<CTAN;
You can find these files on CTAN$ctan_url.

CTAN
     }
     for my $f (@delfiles) {
       print RTL "\t$f\n";
     }
     close RTL;
   }

   # if we cd'd, cd back.
   &xchdir ($origdir) if $origdir;

   &buildfilelist();
}

# rebuild list of input files, e.g., after flattening
sub buildfilelist {
  print "doing buildfilelist()...\n";
  opendir (DIR ,'.') || die "opendir(.) failed: $!";
  @filenames = grep (!/^\.\.?$/, readdir (DIR));
  closedir (DIR);
}

sub runfonts {
   $Foundry = $specialfoundry{$package} || $standardfoundry;
   for (grep(/\.vf$/, @filenames)) {
      $needdir=1;
      print "\t\t install VF $_\n";
($FileBase,$Filepath,$Filesuffix) = fileparse($_,"\.[A-z]*");
      if ($needdir) {
         &SYSTEM("mkdir -p $DEST/fonts/vf/$Foundry/$package");
         $needdir=0;
         }
         &SYSTEM("$MV $FileBase.vf $DEST/fonts/vf/$Foundry/$package  ");
    }
   for (grep(/\.tfm$/,@filenames)) {
      $needdir=1;
      print "\t\t INSTALL tfm $_\n";
($FileBase,$Filepath,$Filesuffix) = fileparse($_,"\.[A-z]*");
      if ($needdir) {
         &SYSTEM("mkdir -p $DEST/fonts/tfm/$Foundry/$package");
         $needdir=0;
         }
         &SYSTEM("$MV $FileBase.tfm $DEST/fonts/tfm/$Foundry/$package");
    }
}


sub MAKEflatten {
  # don't do this in a tds-ready tree...
  -e "$RAW_DIR/$packagedir/TDS_READY"
   && die "$0: using MAKEflatten with TDS_READY tree $RAW_DIR/$packagedir.\n";

  &setup;
  &xchdir ("$DEST/doc/$whichdocformat/$package");

  &flatten_dirtree ($package);

  # do the usual.
  &buildfilelist;
  &donormal ("nosetup");
}

# Flatten the directory tree (for PACKAGE) under the cwd.
#
sub flatten_dirtree {
  my ($package) = @_;

  print "\t SPECIAL flatten $package\n";

  # cm-super et al. need to intervene at this point.
  &run_prehook ($package);

  # we never want to end up with symlinks.
  &SYSTEM ("find . -type l | xargs --no-run-if-empty $RM");

  # mv foo/README to README.foo.  README.txt is for psfragx.
  # LISEZ-MOI is for bclogo.  Makefile and 00README are for tipa.
  # Obviously should be generalized to non-README files.
  my $findcmd = "find . -mindepth 2 '(' "
                . "-name README -o -name README.txt -o -name LISEZ-MOI "
                . "-o -name Makefile -o -name 00README "
                . "')'";
  &SYSTEM ("for r in `$findcmd`; do"
           . ' mv $r $r.`basename \`dirname $r\``; done');

  # move all non-directories to top level, but don't accidentally
  # overwrite one with another.
  &SYSTEM ("yes n | find . -mindepth 2 -not -type d -exec mv -i '\{\}' . \\;");

  # remove newly empty directories.
  &SYSTEM ($RMDIR_EMPTY);
}

sub MAKEunzipandflatten {
  &setup;
  chdir("$DEST/doc/$whichdocformat/$package");
  my $archive = -r "$package.zip" ? "$package.zip" : "$package.tar.gz";
  my $unarchiver = &unarchiver ($archive);
  &SYSTEM ("$unarchiver $archive; $RM $archive");

  &flatten_dirtree ($package);

  &buildfilelist;
  &donormal ("nosetup");
}

sub MAKEnosymlinks {
  &setup;
  &xchdir ("$DEST/doc/$whichdocformat/$package");

  print "\t SPECIAL nosymlinks $package\n";
  &SYSTEM ("find . -type l | xargs --no-run-if-empty $RM");

  &buildfilelist;
  &donormal ("nosetup");
}

sub MAKEaqcm {
  print "\t SPECIAL $package";

  # sort of flatten, but not completely (keep the 'examples' subdir)
  &xchdir($packagedir);
  &SYSTEM('mv latex/* . && rmdir latex');
  &SYSTEM('mv doc/README README.doc');
  &SYSTEM('mv doc/* . && rmdir doc');

  # now do the normal thing
  &xchdir($RAW_DIR);
  &donormal();
}

sub MAKEarabi {
  &xchdir ("$packagedir/arabi/texmf");  # author will remove these next time
  #
  print "\t SPECIAL $package - removing microsoft and nonfree\n";
  &SYSTEM('find -name microsoft -o -name nonfree | xargs rm -rf');
  #
  print "\t SPECIAL $package - rearranging for tds\n";
  &SYSTEM ("mkdir -p tex; mv latex tex");
  &SYSTEM ("$RM tex/latex/arabi/updmap.cfg");
  &SYSTEM ("$MV tex/latex/arabi/poetry.sty tex/latex/arabi/arabipoetry.sty");
  &SYSTEM ("$MV tex/latex/arabi/bblopts.cfg doc/latex/arabi");
  &SYSTEM ("rm -rf dvips");
  #
  print "\t SPECIAL $package - copying to $DEST\n";
  &SYSTEM ("mkdir -p $DEST");
  &SYSTEM ("$CP -r * $DEST/");
}

sub MAKEarabtex {
  &xchdir ($packagedir);
  #
  print "\t SPECIAL $package: removing top-level links\n";
  &SYSTEM('for f in apatch.sty arabtex.tex hebtex.tex hepatch.sty; do test -h $f && rm -v $f; done');
  #
  print "\t SPECIAL $package: removing top-level tgz's\n";
  &SYSTEM('for f in *.tgz; do rm -v $f; done');
  #
  print "\t SPECIAL $package: removing bitmap fonts\n";
  &SYSTEM("rm -rf laser.pk");
  #
  print "\t SPECIAL $package: renaming arabtex.htm\n";
  &SYSTEM('mv doc/html/arabtex.htm arabtex1.htm');
  &SYSTEM('mv doc/txt/arabtex.htm arabtex2.htm');
  #
  print "\t SPECIAL $package: flatten\n";
  &xchdir ("..");
  &MAKEflatten ();
  #
  print "\t SPECIAL $package: removing redundant files\n";
  &SYSTEM("rm -rf doc texinput");
}

sub MAKEarphic {
  # tds-ready tarballs with a top-level dir name.  copy all into new/.
  &SYSTEM ("mkdir -p new");
  for my $tar (<*.tar.*>) {
    (my $tarbase = $tar) =~ s/\.tar.*//;
    &SYSTEM ("tar xf $tar "
             . "&& (cd $tarbase && cp -arf * ../new)"
             . "&& rm -rf $tar $tarbase");
  }
  # move everything from new to the top level.
  &SYSTEM ("mv new/* . && rmdir new");
  #
  # move docs to subdir.
  &SYSTEM ("mv arphic-sampler* doc/fonts/arphic");
  #
  # copy to dest.
  &xchdir ("..");
  &MAKEcopy ();
}

sub MAKEaurical {
  &xchdir ($packagedir);
  #
  # basically have a tds hier to unzip, with some cleanups.
  &SYSTEM ("unzip -q aurical_texmf.zip");
  &SYSTEM ("mkdir -p fonts/source/public/aurical/");
  &SYSTEM ("$MV $DEST/README doc/latex/aurical/");
  &SYSTEM ("$MV aurical_source.zip fonts/source/public/aurical/");
  &SYSTEM ("$RM aurical.pdf aurical_texmf.zip");
  #
  &xchdir ("..");
  &MAKEcopy ();
}

sub MAKEborceux {
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package/user-guides");
 &SYSTEM("$MV -f * $DEST/doc/$whichdocformat/$package");
 chdir("$DEST/doc/$whichdocformat/$package/diagram");
 &SYSTEM("$MV -f * $DEST/tex/$whichformat/$package");
}

sub MAKEeskdx {
 &setup;
 &xchdir ("$DEST/doc/$whichdocformat/$package");
 print "\t SPECIAL $package: flatten unpacked/ dir (only)\n";
 &SYSTEM ("$MV unpacked/Makefile Makefile.unpacked");
 &SYSTEM ("$MV unpacked/* .");
 &SYSTEM ("rmdir unpacked");
 &buildfilelist;
 &donormal;
}

sub MAKEfp {
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &runjob("mkdir -p $DEST/tex/plain/fp; $CP fp.tex $DEST/tex/plain/fp");
 &donormal;
}

sub MAKElh {
  &setup ();
  &xchdir ($DOCDIR);
  #
  # basically have several tds hiers to unzip, with some cleanups.
  print "\t SPECIAL $package: unzip etc.\n";
  for my $zip (<*.zip>) {
    &SYSTEM ("cd $DEST && unzip -q -o $DOCDIR/$zip; $RM $DOCDIR/$zip");
  }
  # they had wrong texmf level in zip; can't mv since dirs exist
  &SYSTEM ("cd $DEST/texmf && cp -arf . .. && rm -rf $DEST/texmf");
}

sub MAKEmetauml {
 &setup;
 &xchdir ("$DEST/doc/$whichdocformat/$package");
 &SYSTEM ("$MV doc/* examples/* inputs/* .");
 &SYSTEM ("rmdir doc examples inputs");
 &buildfilelist;
 &donormal;
}

sub MAKEgermbib {
  &xchdir ($packagedir);
  #
  print "\t SPECIAL $package remove symlinks\n";
  &SYSTEM ("find . -type l | xargs --no-run-if-empty rm");
  #
  # we can't conflict with standard apalike.sty.
  print "\t SPECIAL $package rename second apalike.sty\n";
  &SYSTEM ("$MV styles/apalike.sty styles/apalike.germbib_sty");
  #
  &xchdir ("..");
  &MAKEflatten ();
}

sub MAKEgnu_freefont {
  &xchdir ($packagedir);
  #
  # Let's not include the woff files.
  &SYSTEM ("$RM *woff*"); # rm remainder
  #
  # both tars and zips with a common top-level dir name.
  # will overwrite some common files, but hopefully they are identical.
  for my $zip (<*20120503*.zip>) {
    &SYSTEM ("unzip -o -q $zip && $RM $zip");
  }
  for my $tar (<*20120503*.tar.gz>) {
    &SYSTEM ("tar xf $tar && $RM $tar");
  }
  &SYSTEM ("$RM *.sig *.zip *.tar.gz"); # rm remainder
  #
  # move everything out of the subdir to the doc dir,
  # to get ready for setup.
  my $docdir = "$DEST/doc/$whichdocformat/$package";
  &SYSTEM ("mkdir -p $docdir/");
  &SYSTEM ("$MV freefont-*/* $docdir/ && rmdir freefont-*");
  #
  # Move sfd files to source subtree.
  my $sourcetree = "$DEST/source/$whichdocformat";
  &SYSTEM ("mkdir -p $sourcetree/");
  &SYSTEM ("$MV $docdir/sfd $sourcetree/$package");
  #
  &donormal ("nosetup");
}

sub MAKEnewsletr {
  &setup;
  chdir("$DEST/doc/$whichdocformat/$package");
  &SYSTEM ("$MV newsletr.tex $DEST/tex/$whichformat/$package");
  &SYSTEM ("$RM *.dvi");
}

sub MAKEnotes {
  &setup;
  &xchdir ($DOCDIR);
  &SYSTEM ("make eps png pdf");
  &donormal;
}

sub MAKEpbdiagram {
 &setup;
 chdir("$DEST/doc/latex/$package");
 &SYSTEM("rm -rf mf tfm");
 &buildfilelist;
 &donormal;
}

sub MAKExkeyval {
  # needs files in both latex and generic.
  &MAKEflatten ();
  print "\t SPECIAL $package moving .tex\n";
  my $generic = "$DEST/tex/generic/$package/";
  &mv_with_mkdir ("*key*.tex xkvutils.tex xkvtxhdr.tex", $generic);
}

sub MAKExypic {
  # Copy source files per INSTALL instructions.
  &xchdir ($packagedir);
  my $Foundry = "public";
  &SYSTEM ("mkdir -p $DEST/doc/generic/xypic");
  &SYSTEM ("$CP [A-Z]* $DEST/doc/generic/xypic/");
  &SYSTEM ("$CP doc/*.* $DEST/doc/generic/xypic");
  &SYSTEM ("$CP -r support/ $DEST/doc/generic/xypic");  # copy dir as dir
  #
  &SYSTEM ("mkdir -p $DEST/tex/generic/xypic");
  &SYSTEM ("$CP texinputs/* $DEST/tex/generic/xypic/");
  #
  &SYSTEM ("mkdir -p $DEST/fonts/tfm/$Foundry/xypic");
  &SYSTEM ("$CP texfonts/* $DEST/fonts/tfm/$Foundry/xypic/");
  #
  &SYSTEM ("mkdir -p $DEST/fonts/afm/$Foundry/xypic");
  &SYSTEM ("$CP afm/* $DEST/fonts/afm/$Foundry/xypic/");
  #
  &SYSTEM ("mkdir -p $DEST/fonts/map/dvips/xypic");
  &SYSTEM ("$CP map/* $DEST/fonts/map/dvips/xypic/");
  #
  &SYSTEM ("mkdir -p $DEST/fonts/enc/dvips/xypic");
  &SYSTEM ("$CP enc/* $DEST/fonts/enc/dvips/xypic/");
  #
  &SYSTEM ("mkdir -p $DEST/fonts/source/$Foundry/xypic");
  &SYSTEM ("$CP mfinputs/* $DEST/fonts/source/$Foundry/xypic/");
  #
  &SYSTEM ("mkdir -p $DEST/fonts/type1/$Foundry/xypic");
  &SYSTEM ("$CP type1/* $DEST/fonts/type1/$Foundry/xypic/");
  &SYSTEM ("$CP pfm/* $DEST/fonts/type1/$Foundry/xypic/");
  #
  &SYSTEM ("mkdir -p $DEST/dvips/xypic");
  &SYSTEM ("$CP ps/* $DEST/dvips/xypic/");
}

sub MAKEplqx {
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &SYSTEM("$MV tex/* .");
 &SYSTEM("$MV doc/* .");
 &SYSTEM("rmdir doc tex");
 &buildfilelist;
 &donormal;
}

sub MAKEaugie {
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &SYSTEM("$MV dvips/* .");
 &SYSTEM("$MV tfm/* .");
 &SYSTEM("$MV afm/* .");
 &SYSTEM("$MV doc/* .");
 &SYSTEM("$MV vf/* .");
 &SYSTEM("$MV tex/* .");
 &SYSTEM("$MV type1/* .");
 &SYSTEM("rmdir type1 tex vf afm dvips doc tfm");
 &buildfilelist;
 &donormal;
}

sub MAKEae {
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &SYSTEM("$MV tfm/* .");
 &SYSTEM("$MV vf/* .");
 &SYSTEM("$MV src/* .");
 &SYSTEM("$MV tex/* .");
 &SYSTEM("rmdir tex vf src tfm");
 &buildfilelist;
 &dosource;
 &dotex;
   &domakeindex;
 &runfonts;
}

sub MAKEdevanagr {
 &xchdir ($packagedir);
 #
 print "\t SPECIAL $package: renaming README files\n";
 &SYSTEM('for f in *; do test -r $f/README && mv $f/README README.$f; done');
 #
 print "\t SPECIAL $package: moving .c and .exe to /tmp\n";
 &SYSTEM('mv bin/devnag.c bin/devnag.exe /tmp');
 #
 print "\t SPECIAL $package: flatten\n";
 &xchdir ("..");
 &MAKEflatten;
 print "YOU-MUST-DO! update /tmp/devnag.c and devnag.exe into Build\n";
}

# We don't want to flatten the templates, only the source.
#
sub MAKEdisser
{
  &setup;
  &xchdir ("$DEST/doc/$whichdocformat/$package");
  print "\t SPECIAL $package\n";
  &SYSTEM ("$MV -f src/* .");
  &buildfilelist;
  &donormal ("nosetup");
}

sub MAKEeasy {
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &SYSTEM("$MV doc/* $DEST/doc/$whichdocformat/$package");
   &buildfilelist;
   &dotex;
   &domakeindex;
   &dosource;
   &killfiles ($moreclean{$package}, "more") if $moreclean{$package};
}

sub MAKEfootnpag {
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &SYSTEM("$MV src/* .");
   &buildfilelist;
   &dodvi;
# rebuild again, as we have .dvi files now
   &buildfilelist;
   &dotex;
   &domakeindex;
   &dosource;
}


sub MAKEfeynmf
{
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &SYSTEM("gunzip manual.ps");
 &buildfilelist;
 &runins('feynmf.ins');
 &buildfilelist;
 &dosimplemf;
 &dodvi;
 &buildfilelist;
 &domp;
 &dotex;
 &domakeindex;
 &dosource;
 killfiles($standardclean);
}

sub MAKEchangebar {
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &buildfilelist;
 &donormal;
}

sub MAKEsiam
{
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &buildfilelist;
 &dodvi;
 &buildfilelist;
 &dobst;
 &dotex;
   &domakeindex;
 &dosource;
 &SYSTEM("mkdir -p $DEST/doc/plain/siam");
 &SYSTEM("mkdir -p $DEST/doc/amstex/siam");
 &SYSTEM("mkdir -p $DEST/tex/plain/siam");
 &SYSTEM("mkdir -p $DEST/tex/plain/amstex");
 &SYSTEM("$MV plain/*doc* $DEST/doc/plain/siam");
 &SYSTEM("$MV plain/* $DEST/tex/plain/siam");
 &SYSTEM("$MV amstex/*doc* $DEST/doc/amstex/siam");
 &SYSTEM("$MV amstex/* $DEST/tex/amstex/siam");
 killfiles($standardclean);
}

sub MAKEmisc {
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &buildfilelist;
 &dotex;
   &domakeindex;
 killfiles($standardclean);
}

sub MAKEmv_doctex {
  # move files in tex to runtime, and doc/* up a level.
  &donormal ();
  #
  my $texdest = "$DEST/tex/$whichformat/$package";
  &xmkdir ($texdest);
  &SYSTEM ("$MV `find tex -type f` $texdest/");
  &SYSTEM ("$RM -r tex");  # rm now-empty dir
  &SYSTEM ("$MV doc/* .");
  #
  # remove newly empty directories.
  &SYSTEM ($RMDIR_EMPTY);
}

sub MAKEtamethebeast {
  my $destdir = "$DEST/doc/bibtex/$package";
  &SYSTEM("mkdir -p $destdir");
  &SYSTEM("$CP -r $packagedir/* $destdir");
}

sub MAKEexpressg {
 &setup;
chdir("$DEST/doc/$whichdocformat/$package");
&buildfilelist;
   $inspatt = $specialins{$package};
   &buildfilelist;
   if ($inspatt eq "") {
        $inspatt=$standardins;
        }
&runins($inspatt);
 &SYSTEM("mpost expeg.mp");
# rebuild the list of files in the directory
 &buildfilelist;
 &dodvi;
# rebuild again, as we have .dvi files now
 &buildfilelist;
 &runfonts;
&dobst;
 &dobib;
&dotex;
   &domakeindex;
 &dosource;
 &dotype1;
#
# this is a bit weird, but its an easy way to remove
# empty directories that we never used.
#
   &SYSTEM("rmdir $DEST/tex/$whichformat/$package 2> /dev/null");
   &SYSTEM("rmdir $DEST/doc/$whichdocformat/$package 2> /dev/null");
   &SYSTEM("rmdir $DEST/source/$whichformat/$package 2> /dev/null");
   killfiles($standardclean);
}

sub MAKEpslatex
{
  &xchdir ($packagedir);
  $Foundry = $specialfoundry{$package} || $standardfoundry;
  #
  &runjob("mkdir -p $DEST/tex/latex/pslatex");
  &runjob("$CP latex/* $DEST/tex/latex/pslatex");
  #
  &runjob("mkdir -p $DEST/fonts/tfm/$Foundry/pslatex");
  &runjob("$CP tfm/* $DEST/fonts/tfm/$Foundry/pslatex");
  #
  &runjob("mkdir -p $DEST/fonts/vf/$Foundry/pslatex");
  &runjob("$CP vf/* $DEST/fonts/vf/$Foundry/pslatex");
  #
  &runjob("mkdir -p $DEST/fonts/map/dvips/pslatex");
  &runjob("$CP dvips/* $DEST/fonts/map/dvips/pslatex");
  #
  &runjob("mkdir -p $DEST/source/latex/pslatex");
  &runjob("$CP -r fontinst $DEST/source/latex/pslatex");
  &runjob("$CP -r shell $DEST/source/latex/pslatex");
}

sub MAKEeco {
  # this simply copies source files
  chdir($packagedir) || die ("ERROR: cannot open directory");
  &runjob("mkdir -p $DEST/fonts/tfm/$Foundry/eco");
  &runjob("mkdir -p $DEST/fonts/vf/$Foundry/eco");
  &runjob("mkdir -p $DEST/tex/latex/eco");
  &runjob("mkdir -p $DEST/dvips/eco");
  &runjob("mkdir -p $DEST/doc/fonts/eco");
  &runjob("mkdir -p $DEST/source/fonts/eco");
  &runjob("$CP src/*sty $DEST/tex/latex/eco");
  &runjob("$CP fd/* $DEST/tex/latex/eco");
  &runjob("$CP tfm/* $DEST/fonts/tfm/$Foundry/eco");
  &runjob("$CP vf/* $DEST/fonts/vf/$Foundry/eco");
  &runjob("$CP -r [A-Z]* $DEST/doc/fonts/eco");
  &runjob("$CP src/*x src/*.sh $DEST/source/fonts/eco/");
}

sub MAKEelhyphen {
 &setup;
 &buildfilelist;
 &donormal;

 print "\t SPECIAL $package: lowercase names\n";
 &SYSTEM('for f in GR*hyph*.tex; do mv $f `echo $f | tr A-Z a-z`; done');

 print "\t SPECIAL $package: install gr*hyph.tex files\n";
 my $generichyphdir = "$TOPDEST/texmf-dist/tex/generic/hyphen";
 &SYSTEM("mkdir -p $generichyphdir");
 &SYSTEM("$MV gr*hyph*.tex $generichyphdir");

 print "YOU-MUST-DO! $package: update texmf/tex/generic/config/language.gr.dat\n";
 print "YOU-MUST-DO! $package: update texmf/tpm/hyphen-greek.tpm\n";
 print "YOU-MUST-DO! $package: add to texmf/tpm/collection-langgreek.tpm\n";
}

# all the lshort translations are pretty similar.
sub MAKElshort {
  print "MAKElshort $package\n";
  (my $lang = $package) =~ s,.*-,,;  # lshort-english -> english
  my $destdir = "$DEST/doc/latex/$package";
  &SYSTEM ("mkdir -p $destdir");
  &SYSTEM ("$CP -r $packagedir/* $destdir");
  # keep only the main pdf to save space.
  &SYSTEM ("cd $destdir && $RM lshort*.ps *lshort*.ps.*z* lshort*.dvi");
  &SYSTEM ("cd $destdir && $RM *lshort*-a5.pdf lshort*-letter.pdf");
  &SYSTEM ("cd $destdir && $RM lshort-*-book.zip");
  # remove symlinks such as README.
  &SYSTEM ("cd $destdir && find -type l | xargs --no-run-if-empty rm");
}

sub MAKEltt {
# this simply copies source files
   chdir($packagedir) || die ("ERROR: cannot open directory");
  &runjob("mkdir -p $DEST/doc/ltt");
  &runjob("$CP * $DEST/doc/ltt");
 }

# pstricks packages usually support both plain and latex.
#
sub MAKEpst {
  print "\t SPECIAL MAKEpst - starts for $package";
  # pst-laboObj.tex, pst-fp.sty, pst-vehicle need special cases:
  $standardtex = qq!^(($package(Obj)?)|pst-fp|ListVehicles)\.(tex|sty)!;
  $whichformat='generic';
  $whichdocformat='generic';
  $specialsourcefmt{$package}='generic';
  $specialsource{$package} = "Makefile|$standardsource";
  &setup;
  &xchdir("$DEST/doc/$whichdocformat/$package");
  &buildfilelist;

  $inspatt=$standardins if ! $inspatt;
  &runins($inspatt);
  &buildfilelist;
  &dosource;
  &dotex;
  &dotype1;
  &killfiles ($standardclean);
  &killfiles ($moreclean{$package}, "more") if $moreclean{$package};

  my @cfg = glob ("$DEST/doc/generic/$package/*cfg");
  @cfg = () if $package eq "pst-pad"; # its showexpl.cfg is for the doc
  &mv_with_mkdir (@cfg, "$DEST/tex/latex/$package") if @cfg;

  my @dvips = glob ("dvips/*");
  &mv_with_mkdir (@dvips, "$DEST/dvips/$package") if @dvips;

  my @plain = glob ("tex/*");
  &mv_with_mkdir (@plain, "$DEST/tex/generic/$package") if @plain;

  my @sty = glob ("$DEST/tex/generic/$package/*sty");
  push (@sty, "latex/*") if -d "latex";  # in case the source has a subdir
  &mv_with_mkdir (@sty, "$DEST/tex/latex/$package") if @sty;

  &SYSTEM("$MV doc/* .") if -d "doc";

  my $postaction = $posthook{$package};
  eval ($postaction) if $postaction;
}

sub MAKEpstricks {
  # move the directories.
  &xchdir ($packagedir);
  &xmkdir ("$DEST/doc/generic");
  #
  my $docdir = "$DEST/doc/generic/pstricks";
  &SYSTEM ("$MV doc $docdir");
  &SYSTEM ("$MV README $docdir");
  #
  # move multiple Changes files out of runtime.
  &SYSTEM("$MV generic/Changes $docdir/Changes.generic");
  &SYSTEM("$MV latex/Changes $docdir/Changes.latex");
  &SYSTEM("$MV dvips/Changes $docdir/Changes.dvips");
  #
  &xmkdir ("$DEST/dvips");
  &SYSTEM ("$MV dvips $DEST/dvips/pstricks");
  #
  &xmkdir ("$DEST/tex/generic");
  &SYSTEM ("$MV generic $DEST/tex/generic/pstricks");
  &SYSTEM ("$MV config $DEST/tex/generic/pstricks/");
  #
  &xmkdir ("$DEST/tex/latex");
  &SYSTEM ("$MV latex $DEST/tex/latex/pstricks");
  &SYSTEM ("$MV $docdir/pst-doc.cls $DEST/tex/latex/pstricks");
}

sub MAKEwilson {
 &setup;

 my $docdir = "$DEST/doc/$whichdocformat/$package";
 &xchdir ($docdir);

 my $mapdir = "$DEST/fonts/map/dvips/$package";
 -d $mapdir || &SYSTEM ("mkdir -p $mapdir");
 &SYSTEM ("$MV *.map $mapdir");  # archaicprw.map

 opendir (DIR, '.') || die "opendir(.) failed: $!";
 @dirnames = grep (!/^\.\.?$/, readdir (DIR));
 closedir (DIR);

 for my $d (@dirnames) {
   if ($d =~ /\.zip$/) {
     unlink ("$docdir/$d");
     next;
   }

   # phaistos and linearA are nothing to do with Wilson's archaic, but
   # are separate packages created by AS.
   if ($d =~ /^(phaistos|linearA)$/) {
     &SYSTEM ("rm -rf $d $docdir/$d");
     next;
   }

   my $target = "$docdir/$d";
   next if ! -d $target;  # samples/readme files
   print "\t PROCESS Wilson subdir $d\n";
   &xchdir ($target);

   for my $f (glob ("try*"), glob ("*.pdf"), "README") {
     next unless -f $f;  # trysqrcaps.pdf matches both, can only mv once
     my $dest = "$docdir/";
     $dest .= "$d-" if $f !~ /$d/;
     $dest .= $f;
     &runjob("$MV $f $dest");
   }

   &buildfilelist;
   # run the .ins files (if any) supplied
   $inspatt = $specialins{$package} || $standardins;
   &runins($inspatt);
   unlink ("auncial.sty", "allauncl.sty");  # in auncial-new package

   &dodvi;
   &domf;
   &dodvi;
   # rebuild again, as we have .dvi files now
   &buildfilelist;
   &runfonts;
   unlink ("$DEST/fonts/tfm/$Foundry/$package/auncl10.tfm",
           "$DEST/fonts/tfm/$Foundry/$package/aunclb10.tfm");
   &dobst;
   &dobib;
   &dotex;
   &domakeindex;
   &dosource;
   &dotype1;
   killfiles($standardclean);
 }
 killfiles($standardclean);
 &SYSTEM ("find $docdir -name \*.ps | xargs gzip");  # compress big output
}


sub MAKEt2 {
  &xchdir ($packagedir);
  &xmkdir ("$DEST/tex/plain");
  &runjob ("$MV cyrplain $DEST/tex/plain");
  #
  &xmkdir ("$DEST/tex/generic/t2");
  &runjob ("$MV cyrfinst $DEST/tex/generic/t2");
  #
  &xmkdir ("$DEST/fonts/enc/t2");
  &runjob ("$CP enc-maps/encfiles/* $DEST/fonts/enc/t2");
  #
  &xmkdir ("$DEST/doc/generic/t2");
  &runjob ("$MV enc-maps/*.* enc-maps/[MR]* $DEST/doc/generic/t2");
  &runjob ("$MV etc examples $DEST/doc/generic/t2");
  #
  &xchdir ("$DEST/doc/generic/t2/etc");
  &xmkdir ("$DEST/tex/latex/t2");
  &runjob ("latex mathtext.ins");
  &runjob ("rm *log; mv *sty $DEST/tex/latex/t2");
}

sub MAKEtkz {
  # move files in latex to runtime, and doc/* or latex/* or both up a level.
  &donormal ();
  #
  my $texdest = "$DEST/tex/$whichformat/$package";
  &xmkdir ($texdest);
  &SYSTEM ("$MV `find latex -type f` $texdest/");
  &SYSTEM ("$RM -r latex");  # rm now-empty dir
  &SYSTEM ("$MV doc/latex/* doc/* latex/* .");
  #
  # remove newly empty directories.
  &SYSTEM ($RMDIR_EMPTY);
}

# wadalab provides nearly TDS-ready .tar.gz with additional stuff
#
sub MAKEwadalab {
  print "MAKEwadalab $package - munge tds-ready tarballs\n";
  &setup;
  &xchdir ("$DEST/doc/$whichdocformat/$package");

  # each XX.tar.gz contains a tds-ready tree under XX/texmf: use it
  opendir (HERE, ".") || die "opendir(.) failed: $!";
  my @tarfiles = grep /\.tar\.gz$/, readdir HERE;
  closedir (HERE);
  #
  my $destfonts = "$DEST/fonts";
  &SYSTEM ("mkdir -p $destfonts");
  foreach my $tarfile (@tarfiles) {
    &SYSTEM ("tar xzf $tarfile && rm $tarfile");
    $tarfile =~ s/\.tar\.gz$//;
    &SYSTEM ("cp -r $tarfile/texmf-dist/* $DEST");
    &SYSTEM ("rm -r $tarfile/texmf && rmdir $tarfile");
  }
  #
  # except the mincho-1-8-* tarball misses the doc/fonts level.
  &SYSTEM ("$MV $DEST/doc/wadalab/* $DEST/doc/fonts/wadalab/");
  #
  # wadalab has a dir of xdelta from the original fonts.  Remove it.
  -d "xdelta" && &SYSTEM ("rm -rf xdelta");
  #
  # rm unused directories.
  &SYSTEM ("rmdir $DEST/*/$whichformat/$package 2>/dev/null");
}

sub MAKEukrhyph {
  chdir($packagedir) || die ("ERROR: cannot open directory");
  &runjob("mkdir -p $DEST/tex/generic/ukrhyph");
  &runjob("mkdir -p $DEST/doc/generic/ukrhyph");
  &runjob("$CP README $DEST/doc/generic/ukrhyph");
  &runjob("$CP *.* $DEST/tex/generic/ukrhyph");
  &runjob("$MV $DEST/tex/generic/ukrhyph/*.pdf $DEST/doc/generic/ukrhyph");
  &runjob("rm $DEST/tex/generic/ukrhyph/*.ps");
 }

# The jadetex distribution is a mess.  Last updated in 2003, so no point in
# trying to push changes upstream that I can see, though.
sub MAKEjadetex
{
  # Unpack the tarball.
  &SYSTEM ("cd $packagedir && tar xf jadetex*.tar.gz && mv jadetex-*/* .");
  &SYSTEM ("cd $packagedir && (rm -rf jadetex-3* doc/.cvsignore)");

  # Get rid of the useless doc/ dir.
  &MAKEflatten ();

  # Rename resulting jadetex/jadetex dirs to jadetex/base.
  &xchdir ($DEST);
  for my $dir ("doc", "source", "tex") {
    &SYSTEM ("$MV $dir/jadetex/jadetex $dir/jadetex/base");
  }

  # This didn't get flattened since there's a name clash.
  &SYSTEM ("$MV doc/jadetex/base/doc/Makefile doc/jadetex/base");

  # Their pdfjadetex.ini predates pdftexconfig.tex.
  my $pdfini = "tex/jadetex/base/pdfjadetex.ini";
  &SYSTEM ("(echo '\\input pdftexconfig.tex'; cat $pdfini) >/tmp/pj$$;
           mv /tmp/pj$$ $pdfini");
}

sub MAKElfb
{
  # remove pregenerated pk files.
  &MAKEflatten ();
  print "\t SPECIAL removing lfb PK files\n";
  &SYSTEM("rm *pk");
}

sub MAKEliterat {
  &xchdir($packagedir);
  &runjob("mkdir -p $DEST/fonts/tfm/paragrap/literat");
  &runjob("mkdir -p $DEST/fonts/vf/paragrap/literat");
  &runjob("mkdir -p $DEST/fonts/type1/paragrap/literat");
  &runjob("mkdir -p $DEST/fonts/afm/paragrap/literat");
  &runjob("mkdir -p $DEST/tex/latex/literat");
  &runjob("mkdir -p $DEST/dvips/literat");
  &runjob("mkdir -p $DEST/doc/fonts/literat");

  &runjob("$CP dvips/* $DEST/dvips/literat");
  &runjob("$CP tex/*tex $DEST/doc/fonts/literat");
  &runjob("$CP psfonts/*pfb $DEST/fonts/type1/paragrap/literat");
  &runjob("$CP psfonts/*inf $DEST/fonts/type1/paragrap/literat");
  &runjob("$CP psfonts/*afm $DEST/fonts/afm/paragrap/literat");
  &runjob("$CP tex/*sty tex/*fd $DEST/tex/latex/literat");
  &runjob("$CP tfm/* $DEST/fonts/tfm/paragrap/literat");
  &runjob("$CP tfm-raw/* $DEST/fonts/tfm/paragrap/literat");
  &runjob("$CP vf/* $DEST/fonts/vf/paragrap/literat");
  &runjob("$CP [A-Z]* insta* license $DEST/doc/fonts/literat");
 }

sub MAKExmltex {
  &xchdir ($packagedir);

  my $basedir = "$DEST/tex/xmltex/base";
  &xmkdir ($basedir);
  &runjob("$CP xmltex.tex *xmt xmltex.cfg $DEST/tex/xmltex/base");
  &SYSTEM ("$RM -f $basedir/tei.xmt"); # the one in passivetex is newer

  my $docdir = "$DEST/doc/otherformats/xmltex/base";
  &xmkdir ($docdir);
  &runjob("$CP manual* *xml test* *txt $docdir");
}

sub MAKEtexsis {
 die "doesn't work, sorry";
 &setup;
 chdir("$DEST/doc/texsis/$package");
 &SYSTEM("make TXSsite.tex");
 &buildfilelist;
 &donormal;
 &SYSTEM("rm *.ps");
}

sub MAKEjapaneseotf {
 &setup;
 &xchdir ("$DEST/doc/fonts/$package");
 for my $i (qw/vf tfm ofm ovp/) {
   if (-d $i) {
     &xmkdir ("$DEST/fonts/$i/public/$package");
     &SYSTEM ("$MV $i/* $DEST/fonts/$i/public/$package/; rmdir $i");
   }
 }
 if (-d "sty") {
   &xmkdir ("$DEST/tex/platex/$package");
   &SYSTEM ("$MV sty/* $DEST/tex/platex/$package/; rmdir sty");
 }
 if (-d "TeXLive-maps") {
   &xmkdir ("$DEST/fonts/map/dvipdfmx/$package");
   &SYSTEM ("$MV TeXLive-maps/* $DEST/fonts/map/dvipdfmx/$package/; rmdir TeXLive-maps");
 }
 #
 # remove the fontmap dir as it contains files with parenthesis
 &SYSTEM("$RM -rf fontmap");
 #
 my $dstdir = "$DEST/source/fonts/$package";
 &SYSTEM ("rmdir $dstdir");   # no extra src/ level
 &SYSTEM ("$MV src $dstdir");
}

sub MAKEieeetran {
 print "\t SPECIAL $package - renaming README files, then flatten\n";
 chdir ($packagedir) || die "chdir($packagedir) failed: $!";
 &SYSTEM('for f in *; do test -r $f/README && mv $f/README README.$f; done');
 chdir ("..");
 &MAKEflatten;
 # let's not worry about the fact that the tex run on testflow fails (it
 # wants a paper size); we still get the distributed pdf, which is good enough.
}

sub MAKEbardiag {
 &setup;
 &xchdir ("$DEST/doc/latex/$package");
 print "\t SPECIAL $package - no symlinks, one-level flattening of doc dir\n";
 &SYSTEM ("find . -type l | xargs --no-run-if-empty rm");
 &SYSTEM ("$MV doc/* .");
 &buildfilelist;
 &donormal;
}

sub MAKEmathpazo {
 &setup;
 chdir("$DEST/doc/latex/$package");
 &SYSTEM("$MV latex/* type1/* afm/* vf/* tfm/* dvips/* .; rmdir latex type1 afm vf tfm dvips");
 &buildfilelist;
 &donormal;
}

sub MAKEhaprosper {
 print "\t SPECIAL copying HA-prosper\n";
 &setup ("nocopytodoc"); # create dirs but that's all
 &xchdir("$packagedir");
 &SYSTEM("mkdir -p $DEST");
 &SYSTEM("$CP -r README Doc/* $DEST/doc/latex/$package");
 &SYSTEM("$CP -r Run/* $DEST/tex/latex/$package");
 &SYSTEM("$CP -r Source/* $DEST/source/latex/$package");
}

sub MAKEpclnfss {
 chdir("$packagedir");
 &SYSTEM("mkdir -p $DEST/source/fonts/pclnfss");
 &SYSTEM("mkdir -p $DEST/doc/fonts/pclnfss");
 &SYSTEM("$CP -r [A-Z]* $DEST/doc/fonts/pclnfss");
 &SYSTEM("$CP -r fonts $DEST");
 &SYSTEM("$CP -r tex $DEST");
 &SYSTEM("$CP -r src/* tests $DEST/source/fonts/pclnfss");

}

sub MAKEpdf_forms_tutorial
{
  # called for both the en and de versions.  both are the same catalogue
  # entry, which is rather excruciating for us.
  &xchdir ($packagedir);

  my $lang;
  my $ll = substr ($package, -2);  # en or de
  if ($ll eq "en") {
    $lang = "english";
  } elsif ($ll eq "de") {
    $lang = "german";
  } else {
   die "unexpected language code for $package: $ll";
  }

  my $dest_lang = "$DEST/doc/$lang";
  my $dest_pkg = "$dest_lang/pdf-forms-tutorial-$ll";
  &SYSTEM ("mkdir -p $dest_lang");
  &SYSTEM ("$CP -r $ll $dest_pkg");
  &SYSTEM ("$CP README fdl.txt $dest_pkg");
}

sub MAKEbeamer {
 &xchdir ($packagedir);
 my $destdoc = "$DEST/doc/latex/beamer";
 &SYSTEM ("mkdir -p $destdoc");
 &SYSTEM ("$CP -r * $destdoc");
 &xchdir ($destdoc);

 my $desttex = "$DEST/tex/latex/beamer";
 &SYSTEM("mkdir -p $desttex");
 &SYSTEM("$MV base/* $desttex");
}

sub MAKEfontinst {
  &xchdir ($packagedir);
  &runjob("mkdir -p $DEST/tex/latex/fontinst");
  &runjob("mkdir -p $DEST/tex/fontinst");
  &runjob("mkdir -p $DEST/source/fontinst");
  &runjob("mkdir -p $DEST/doc/fonts/fontinst");
  &runjob("$CP -r examples test $DEST/doc/fonts/fontinst");
  &runjob("$CP -r doc/* README test $DEST/doc/fonts/fontinst");
  &runjob("$CP -r source $DEST/source/fontinst/base");
  &runjob("$CP -r latex/* $DEST/tex/latex/fontinst");
  &runjob("$CP -r inputs/* $DEST/tex/fontinst");
  print "\t YOU-MUST-DO $package copy fontinst.bat to bin/windows\n";
}


# CJK (from Werner Lemberg)

sub I {
  my ($s, $d) = @_;
  &SYSTEM ("$INSTALL $s $DEST/$d");
}

sub MAKEcjk_common {
  print "\t SPECIAL $package wholesale rearranging for cjk\n";

  &xchdir ($packagedir);
  # also need cjk doc tarball. would be nice if they were combined.
  my $cjkdoc = "cjk-?.?.?-doc.tar.gz";
  &SYSTEM ("tar -C cjk-?.?.? -xf $cjkdoc --strip-components=1");

  # remove the version number top-level directory.
  &SYSTEM ("$RM *.tar.gz && $MV cjk-?.?.?/* . && rmdir cjk-?.?.?");
}

sub MAKEcjk {
  &MAKEcjk_common ();
  require "cjk.pl";   # in tlpkg/libexec
}

sub MAKEcjkutils {
  &MAKEcjk_common ();
  require "cjkutils.pl";
}

sub MAKEc90 {
  &MAKEcjk_common ();
  require "c90.pl";
}

sub MAKEdnp {
  &MAKEcjk_common ();
  require "dnp.pl";
}

sub MAKEgaruda_c90 {
  &MAKEcjk_common ();
  require "garuda-c90.pl";
}

sub MAKEnorasi_c90 {
  &MAKEcjk_common ();
  require "norasi-c90.pl";
}

sub MAKEcmlgc {
 &setup;
 chdir("$DEST/doc/$whichdocformat/$package");
 &SYSTEM("rm -rf vtex");
 &MAKEflatten;
}


sub PREHOOK_a2ping {
  print "PREHOOK_$package - make .1 with pod2man\n";
  &prehook_pod2man ("Peter Szabo", "$package.pl");
}

sub PREHOOK_apa6 {
  print "PREHOOK_$package - subdirectories needed for dtx\n";
  &SYSTEM ("mkdir config pseudoTeX");
}

sub PREHOOK_apa7 {
  print "PREHOOK_$package - subdirectories needed for dtx\n";
  &SYSTEM ("mkdir config");
}

sub PREHOOK_bibtexperllibs {
  print "PREHOOK_$package - move .1\n";
  &SYSTEM ("$MV LaTeX-ToUnicode/ltx2unitxt.1 .");
  &SYSTEM ("$RM LaTeX-ToUnicode/ltx2unitxt.pdf");
}

sub PREHOOK_cals {
  print "PREHOOK_$package - flatten only cals subdir\n";
  &SYSTEM ("$MV cals/* .");
}

sub PREHOOK_changes {
  print "POST$package - regression/ subdir needed\n";
  &xmkdir ("regression");
}

sub PREHOOK_chess {
  print "PREHOOK_$package - no babel inputs or pk fonts\n";
  &SYSTEM ("$MV inputs/chess.sty .");
  &SYSTEM ("$RM -rf inputs pkfonts.zip");
}

sub PREHOOK_clojure_pamphlet {
  print "PREHOOK_$package - make .1 with pod2man\n";
  &prehook_pod2man ("Ernesto Lanchares", "pamphletangler");
}

sub PREHOOK_cluttex {
  print "PREHOOK_$package - mv */cluttex for specialscripts and doc/*.1\n";
  &SYSTEM ("$MV bin/cluttex cluttex.lua");
  &SYSTEM ("$MV doc/cluttex.1 .");
  &preserve_man_pages ("cllualatex", "clxelatex"); # .so man pages
}

sub PREHOOK_cm {
  print "PREHOOK_$package - remove cmex9.mf\n";
  &SYSTEM ("$RM cmex9.mf"); # because it's really an amsfonts file
}

sub PREHOOK_cm_super {
  print "PREHOOK_$package - remove dvipdfm map files\n";
  # We generate our own dvipdfm (not to mention pdftex) map files.
  &SYSTEM ("$RM -rf dvipdfm");
}

sub PREHOOK_cmextra {
  print "PREHOOK_$package - knuth/local/cm is our cmextra\n";
  #
  # remove concrete since we have always had that separately.
  &SYSTEM ("rm cm/cc* cm/odigs.mf");
  &SYSTEM ("rm cm/ebigop.mf");        # ditto old cmex for euler
  &SYSTEM ("rm -rf [^c]*");           # ditto everything non-cm
  &SYSTEM ("$MV cm/* .");             # flatten for normal setup
}

sub PREHOOK_concrete {
  print "PREHOOK_$package - instantiate symlinks from symlink\n";
  # would be better done in tlpkginfo --prepare.
  &xchdir ("mf");
  for my $mf (glob ("*.mf")) {
    &SYSTEM ("$CP $ctan_root/systems/knuth/local/cm/$mf ..");
  }
  &xchdir ("..");
  # symlinks will get removed afterward by MAKEflatten.
}

sub PREHOOK_context_handlecsv {
  print "PREHOOK_$package - remove top level\n";
  &SYSTEM ("$MV handlecsv-context-suite/* .");
}

sub PREHOOK_ctan_o_mat {
  print "PREHOOK_$package - make .1 with pod2man\n";
  &prehook_pod2man ("Gerd Neugebauer", "$package.pl");
  #&SYSTEM ("$RM $package.pdf");
}

sub PREHOOK_enctex {
  print "PREHOOK_$package - up a level\n";
  &SYSTEM ("$MV enctex/* .");
}

sub PREHOOK_fixme {
  print "PREHOOK_$package - create dtx subdirs\n";
  &xmkdir ("themes", "layouts", "layouts/env", "layouts/target");
}

sub PREHOOK_flatten1 {
  print "PREHOOK_$package - move all files up one level\n";
  &SYSTEM ("$MV */* .");
}

sub PREHOOK_fontools {
  print "PREHOOK_$package - make .1 with pod2man\n";
  &xchdir ("bin");
  &prehook_pod2man ("Marc Penninga", qw(afm2afm autoinst ot2kpx));
  &xchdir ("..");
  &SYSTEM ("$RM -rf doc"); # remove distributed pdf's
}

sub PREHOOK_gothic {
  print "PREHOOK_$package - rm blacklettert1 oldlatin etc.\n";
  &SYSTEM ("$RM -rf blacklettert1 oldlatin ps yinit-as yinit-otf"); # own packages
  &SYSTEM ("$RM corkpaper.tex *.zip"); # symlink
}

sub PREHOOK_hagenberg_thesis {
  print "PREHOOK_$package - flatten doc and latex, not others\n";
  # doc (but not examples/) files at top, move latex/ files to be installed
  &SYSTEM ("$MV doc/* latex/* .");
}

sub PREHOOK_ibygrk {
  print "PREHOOK_$package - handle ibycus4.map\n";
  # ibygrk has two instances of the same file ibycus4.map; it is
  # both tex source and mf source.  the usual method cannot deal, of course.
  &SYSTEM ("$MV fonts/source/public/ibycus4/ibycus4.map .");
  &SYSTEM ("$RM tex/generic/ibycus4/ibycus4.map");
}

sub PREHOOK_knuth_local {
  print "PREHOOK_$package - extract some local/lib/*.mf, xepsf.tex\n";
  &SYSTEM ("$RM -rf [^l]*");   # remove everything but lib

  &SYSTEM ("$MV lib/xepsf.tex ."); # exactboundingbox support

  &SYSTEM ("$MV lib/*.mf .");  # keep lib/*.mf files
  my $mft_dir = "$DEST/mft/knuth-local";
  &mv_with_mkdir ("lib/e.mft", $mft_dir);  # install e.mft

  &SYSTEM ("$RM -rf lib");     # remove rest of lib
  &SYSTEM ("$RM -f lcirc* line*");  # dek does not maintain latex fonts
  &SYSTEM ("$RM -f amsmodes.mf");   # or ams files
}

sub PREHOOK_ktv_texdata {
  print "PREHOOK_$package - eliminate redundant latex dir\n";
  &SYSTEM ("$RM -rf latex");
}

sub PREHOOK_latex_git_log {
  print "PREHOOK_$package - make .1 with pod2man\n";
  &prehook_pod2man ("Robin Schneider", "$package");
  &SYSTEM ("$RM $package.pdf");
}

sub PREHOOK_latex2e_help_texinfo_spanish {
  print "POST$package - include only spanish translation\n";
  &SYSTEM ("$RM *"); # do not remove subdirs
  &SYSTEM ("$RM -rf graphics latex2e-figures");
  &SYSTEM ("$MV spanish/* .");
}

sub PREHOOK_latexdiff {
  print "PREHOOK_$package - rename $package-so to $package.pl, etc.\n";
  # Consistently use *.pl to avoid special case in w32 wrapper
  &SYSTEM ("$MV latexdiff-so latexdiff.pl");
  &SYSTEM ("$MV latexrevise  latexrevise.pl");
  &SYSTEM ("$MV latexdiff-vc latexdiff-vc.pl");
}

sub PREHOOK_latexindent {
  print "PREHOOK_$package - mv documentation/* doc\n";
  &SYSTEM ("$MV documentation/* .");
}

sub PREHOOK_lilyglyphs {
  print "PREHOOK_$package - mv */*.py scripts for specialscripts, rm ~\n";
  &SYSTEM ("$MV scripts/* .");
  &SYSTEM ("find -name \*~ | xargs $RM");
}

sub PREHOOK_mathspic {
  print "PREHOOK_$package - eliminate version from mathspicNNN.pl\n";
  # the w32 wrapper can only find foo.pl from foo, not fooNNN.pl.
  &SYSTEM ("$MV mathspic*.pl mathspic.pl");
}

sub PREHOOK_mp3d {
  print "PREHOOK_$package - rm 1.0\n";
  &SYSTEM ("$RM -rf v1.0");
}

sub PREHOOK_optex { # must do early to be found by the normal install
  print "PREHOOK_$package - man page\n";
  &SYSTEM ("$MV doc/optex.1 .");
}

sub PREHOOK_optexcount { # make executable zip, from their install.sh
  print "PREHOOK_$package - make executable zip\n";
  &xsystem ("cp -p src/optexcount.py src/__main__.py");
  &xsystem ("zip -j tmp.zip src/*.py");
  &xsystem ("echo '#!/usr/bin/env python3' | cat - tmp.zip >optexcount");
  chmod (0755, "optexcount") || die "chmod(optexcount) failed: $!";
  unlink ("tmp.zip");
  unlink ("src/__main__.py");
}

sub PREHOOK_pictex {
  print "PREHOOK_$package - rm autoarea\n";
  &SYSTEM ("$RM -rf addon/autoarea*");
}

sub PREHOOK_pmx {
  print "PREHOOK_$package - rm prebuilt binaries, up one level\n";
  &SYSTEM ("$RM -rf OSX Windows* source");
  &SYSTEM ("$MV doc/* tex/* .");
}

sub PREHOOK_prosper {
  print "PREHOOK_$package - handle image conflicts\n";
  # some files different between img/ and contrib/img; prefer
  # those in img.  Also flatten doc/doc-examples.
  &SYSTEM ("$MV contrib/img/* .");
  &SYSTEM ("$MV img/* doc/*/* doc/* designer/* contrib/*.* .");
}

sub PREHOOK_spectralsequences {
  print "PREHOOK_$package - move src/* subdir up\n";
  # leave examples/ and manual/ doc subdirs separate
  &SYSTEM ("$MV src/* .");
}

sub PREHOOK_suftesi {
  print "PREHOOK_$package - move doc/latex subdirs\n";
  # not example/, then get logo.png clash
  &SYSTEM ("$MV doc/* latex/* .");
}

sub PREHOOK_stix {
  print "PREHOOK_$package - run tex stix.fdd since latex breaks on it\n";
  &SYSTEM ("cd latex && tex stix.fdd");
}

sub PREHOOK_texdraw {
  print "PREHOOK_$package - mv manual/* files\n";
  &SYSTEM ("$MV manual/* .");
}

sub PREHOOK_texlogfilter {
  print "PREHOOK_$package - make .1 with pod2man\n";
  &prehook_pod2man ("Julien Labbe", "texlogfilter");
}

sub PREHOOK_tlcockpit {
  print "PREHOOK_$package - flatten only jar/ and scripts/\n";
  &SYSTEM ("$MV jar/* .");
  &SYSTEM ("$MV scripts/* .");
}

sub PREHOOK_tudscr {
  print "PREHOOK_$package - cd\n";
  &xchdir ("source");
}

sub PREHOOK_tui {
  print "PREHOOK_$package - flatten only doc/ and tex/\n";
  &SYSTEM ("$MV doc/* tex/* .");
}

sub PREHOOK_typog {
  print "PREHOOK_$package - make script and man page\n";
  # clever build-time substitutions
  &SYSTEM ("make typog-grep.pl typog-grep.1");
}

sub PREHOOK_unzip {
  print "PREHOOK_unzip - $package\n";
  &SYSTEM ("unzip -q -o -d $DEST *.zip && $RM *.zip");
}

sub PREHOOK_vhistory {
  print "PREHOOK_$package - rm dup file\n";
  &SYSTEM ("$RM doc/sets.sty");
}

sub PREHOOK_wasy {
  print "PREHOOK_$package - downcase wasyfont macro files\n";
  &SYSTEM ("rename tr/A-Z/a-z/ WASYFONT.*");
}

sub PREHOOK_webquiz {
  print "PREHOOK_$package - mv dirs so specialscripts can work\n";
  &mv_with_mkdir ("scripts/*" => "$DEST/scripts/$package");
  &mv_with_mkdir ("latex/*" => "$DEST/tex/latex/$package");
  &SYSTEM ("$MV doc/* .; rmdir latex scripts doc");
}

sub PREHOOK_wsuipa {
  print "PREHOOK_$package - rearrange directories, except for doc\n";
  # we can't use flatten because we want to preserve the subdirs inside doc.
  # annoyingly, the same filenames are repeated.
  &SYSTEM ("$MV changes/* doc/* macros/* mf/* pk/* tfm/* .");
}

sub PREHOOK_xsim {
  print "PREHOOK_$package - flatten doc, but not others\n";
  # we want doc files at top, but keep examples/ and code/ subdirs
  &SYSTEM ("$MV doc/* .");
}


sub prehook_pod2man {
  my ($author,@scripts) = @_;
  for my $script (@scripts) {
    my $pod2man = qq(pod2man --center="$author" --release="$package")
                  . ' --section=1';
    (my $base = $script) =~ s,\.pl$,,;
    &SYSTEM ("$pod2man $script - >$base.1");
  }
}


sub POSTacmart {
  print "POST$package - generate samples from .ins\n";
  # no reasonable way to do this with runins, since it's in a subdir.
  &SYSTEM ("cd samples && latex samples.ins </dev/null && rm samples.log");
}

sub POSTamsrefs {
  print "POST$package - mv amsrefs.faq\n";
  &SYSTEM ("cd $DEST "
           . " && $MV source/latex/amsrefs/amsrefs.faq doc/latex/amsrefs/");
}

sub POSTamstex {
  print "POST$package - cleanup, base subdir\n";
  #die "not done -- doc format, man page, goodbye"; # but pretty close
  #
  &SYSTEM ("$RM amssym.tex amssym.def"); # in amsfonts
  #
  my $configdir = "$DEST/tex/amstex/config/";
  &xmkdir ($configdir);
  &SYSTEM ("$MV amstex.ini $configdir/");
  #
  &xchdir ($DEST);
  for my $dir ("doc", "tex") {
    &SYSTEM ("$MV $dir/$package/$package $dir/$package/base");
  }
  &preserve_man_pages ($package);
}

sub POSTapalike {
  print "POST$package - move apalike.tex to runtime\n";
  # can't use specialtex because we also need apalike.sty in latex.
  my $src = "$DEST/doc/$whichdocformat/$package/apalike.tex";
  my $dstdir = "$DEST/tex/plain/$package";
  &xmkdir ($dstdir);
  &SYSTEM ("$MV $src $dstdir/");
}

sub POSTasapsym {
  print "POST$package - move TeX files to specific subdirs\n";
  #
  my $plainfile = "$DEST/tex/latex/$package/$package.code.tex";
  my $plaindir = "$DEST/tex/plain/$package";
  &mv_with_mkdir ($plainfile, $plaindir);
  #
  my $genericfile = "$DEST/doc/$whichdocformat/$package/$package-generic.tex";
  my $genericdir = "$DEST/tex/generic/$package";
  &mv_with_mkdir ($genericfile, $genericdir);
}

sub POSTautosp {
  print "POST$package - remove binaries, up a level, man pages\n";
  &SYSTEM ("$RM -r source MacOSX Windows*");
  &SYSTEM ("$MV doc/* .; rmdir doc");
  &SYSTEM ("$RM autosp.pdf tex2aspc.pdf");
  &SYSTEM ("$MV rebar.1 rebar.x1"); # kludge so POST_do_man doesn't see it
  &POST_do_man ();
  &SYSTEM ("$MV rebar.x1 rebar.1");
}

sub POSTaxodraw2 {
  print "POST$package - remove sources since in Build\n";
  &SYSTEM ("$RM -r $DEST/source/latex/$package");
}

sub POSTbarracuda {
  print "POST$package - src dir to scripts\n";
  &mv_with_mkdir ("src/*", "$DEST/scripts/$package");
}

sub POSTbeautybook {
  print "POST$package - stys to runtime\n";
  my $dstdir = "$DEST/tex/latex/$package";
  &xsystem ("$MV stys $dstdir/");
}

sub POSTbib2gls {
  print "POST$package - resources xml, src dir\n";
  my $resources_dir = "$DEST/scripts/$package/resources";
  &mv_with_mkdir ("$package-en.xml", $resources_dir);
  #
  my $source_dir = "$DEST/source/support/$package";
  &SYSTEM ("$MV src $source_dir");
}

# biber and biber-ms are both handled here.
sub POSTbiber {
  print "POST$package - unpack and install binaries\n";
  # we've started with everything under source/.
  &xchdir ("$DEST/source/bibtex/$package");

  # move doc pdf.
  &mv_with_mkdir ("$package.pdf", $DOCDIR);

  # biber uses different platform names.
  my %tl_platform = (
    "MSWIN32"               => "win32",
    "MSWIN64"               => "windows",
    "amd64-freebsd"         => "amd64-freebsd",
    "cygwin_i386"	    => "i386-cygwin",
    "cygwin_x86_64"	    => "x86_64-cygwin",
    "darwin_x86_64"         => "universal-darwin",
    "darwin_universal"      => "universal-darwin",
    "darwinlegacy_x86_64"   => "x86_64-darwinlegacy",
    "freebsd_amd64"         => "amd64-freebsd",
    "freebsd_i386"	    => "i386-freebsd",
    "i386-freebsd"          => "i386-freebsd",
    "i386-pc-solaris2"      => "i386-solaris",
    "linux-aarch64"         => "aarch64-linux",
    "linux_armel"           => "armel-linux",
    "linux_x86_32"          => "i386-linux",
    "linux_x86_64"          => "x86_64-linux",
    "linux-musl_x86_64"     => "x86_64-linuxmusl",
    "x86_64-pc-solaris2.11" => "x86_64-solaris",
  );

  # handle the prebuilt binaries, which are zipped or tarred.
  for my $archive (sort (<$package-*>)) {
    next if $archive =~ /MSWIN32/;        # only 64-bit windows

    # Put the executable in the Master bin directory.
    # biber-2.18-1-MSWIN64.zip       -> MSWIN64
    # biber-linux_x86_32.tar.gz      -> linux_x86_32
    # etc.
    # hopefully biber won't have any platform names starting with a numeral.
    # $1 = possible version number
    # $2 = biber platform name, with trailing -
    # $3 = archive extension
    $archive =~ m/^$package-([0-9.-]+-)?([a-zA-Z].*?)\.(zip|tar(\..z|$))/;
    my $biber_platform = $2;
    #(my $biber_platform = $archive) =~ s/$package.*-(.*?)\.(zip|tar\..z)/$1/;
    die "failed to get biber platform name from $archive, goodbye"
      if ! $biber_platform;
    print "\t *** got biber_platform=$biber_platform from archive=$archive\n";
    #
    my $tl_platform = $tl_platform{$biber_platform};
    die "unknown biber platform $biber_platform (from $archive), goodbye"
      if ! $tl_platform;
    print "\t got tl_platform=$tl_platform\n";

    my $unarchiver = &unarchiver ($archive);
    &xsystem ("$unarchiver $archive");

    # each .tar.gz unpacks into a single file named biber,
    # .zip unpacks into biber.exe.
    my $biber_binary = $package;
    $biber_binary .= ".exe" if $archive =~ /MSWIN|cygwin/i;

    # really need to do svn cp for this (in place, can't do it here).
    my $bindir = "$TOPDEST/bin/$tl_platform";
    &xsystem ("mkdir -p $bindir/");
    &xsystem ("$MV $biber_binary $bindir/");
  }

  # don't keep binary archives around in Master tree.
  &xsystem ("$RM biber[-.]*");
}

# biber binaries are distributed in a variety of ways.  The idea here is
# to specify the commands that will get from the archive file on CTAN to
# a binary named "biber". Although this function is generic, and merely
# returns the command based on the extension of ARCHIVE.
#
sub unarchiver {
  my ($archive) = @_;
  my $unarch;

  if ($archive =~ /\.tar(\.|$)/) {
    $unarch = "tar xf";
  } elsif ($archive =~ /\.zip$/) {
    $unarch = "unzip -q";
  } else {
    die "do not know unarchiver for $archive";
  }
  return $unarch;
}

sub POSTbiblatex {
  print "POST$package - move whole directories around, doc up a level\n";

  my $dest_bib = "$DEST/bibtex/bib";
  my $dest_bst = "$DEST/bibtex/bst";
  my $dest_csf = "$DEST/bibtex/csf";
  my $dest_latex = "$DEST/tex/latex";
  &xmkdir ($dest_bib, $dest_bst, $dest_csf, $dest_latex);

  &SYSTEM ("$MV bibtex/bib $dest_bib/$package");
  &SYSTEM ("$MV bibtex/bst $dest_bst/$package");
  &SYSTEM ("test -d bibtex/csf && $MV bibtex/csf $dest_csf/$package");
  &SYSTEM ("$MV latex $DEST/tex/latex/$package");
  &SYSTEM ("$MV doc/* .");
}

sub POSTbibtex {
  print "POST$package - switch to base/\n";
  &SYSTEM ("cd $DEST && $MV bibtex/bst/bibtex bibtex/bst/base");
  &SYSTEM ("cd $DEST && $MV bibtex/bib/bibtex bibtex/bib/base");
  &SYSTEM ("cd $DEST && $MV doc/bibtex/bibtex doc/bibtex/base");
  &SYSTEM ("$RM bibtex.web"); # handle separately
  &preserve_man_pages ($package);
}

sub POSTbibtexperllibs {
  print "POST$package - move modules to scripts/, man pages to doc/, etc.\n";
  &xchdir ("$DEST/source/support/$package/");
  &mv_with_mkdir ("*/lib/*", "$DEST/scripts/$package/");
  #
  # The man page is in a subdir.
  &xchdir ("LaTeX-ToUnicode");
  @filenames = glob ("*.1"); # have to reset @filenames for install()
  &domans ();
  &SYSTEM ("$RM ltx2unitxt.pdf"); # rm man page pdf, we rebuild
  #
  # The user-level script is in a subdir of that.
  &xchdir ("script");
  @filenames = glob ("*"); # have to reset @filenames for install()
  &doscripts ();
}

sub POSTcfr_lm {
  print "POST$package - move directories around\n";
  &rename_with_mkdir ("vf", "$DEST/fonts/vf/public/$package");
  &rename_with_mkdir ("tfm", "$DEST/fonts/tfm/public/$package");
  &rename_with_mkdir ("enc", "$DEST/fonts/enc/dvips/$package");
  &rename_with_mkdir ("map", "$DEST/fonts/map/dvips/$package");
  &SYSTEM("$MV source/* $DEST/source/fonts/$package");
  # the source/fonts package is already created???
  #&rename_with_mkdir ("source", "$DEST/source/fonts/$package");
  &rename_with_mkdir ("tex", "$DEST/tex/latex/$package");
  &SYSTEM("$MV doc/* .");
  &SYSTEM("rmdir doc");
}

sub POSTcjk_gs_integrate {
  print "POST$package - move database/ -> fonts/misc/PKGNAME/\n";
  my $destdir = "$DEST/fonts/misc";
  &xmkdir ($destdir);
  &SYSTEM ("$MV database $destdir/$package"); # rename to pkgname
}

sub POSTcmcyr {
  print "POST$package - exclude cmcsc{8,9,10}.mf from runtime\n";
  # because they are duplicates of the standard files
  # It is probably possible to achieve this with a
  # negative look-ahead assertion, but this seems more understandable.
  # assuming brace expansion in the shell ...
  &SYSTEM ("$MV $DEST/fonts/source/public/cmcyr/cmcsc{8,9,10}.mf .");
}

## ConTeXt is complicated. Procedure for updating:
## 0. ctxversion=`sed -n 's/^ *# *define *luametatex_version_string *//p' \
##                source/luametatex.h | sed 's/"//g'` # in unpacked tree
## 0b. echo $ctxversion    # something like 2.11.07
## 1. c2l context          # change code here until good
##                           (all files match, no mkii, etc.), then:
## 2. tl-update-lmtx-bin   # download luametatex binaries (check this first);
##                         # possibly no_lmtx_platforms in
##                         #   00texlive.autopatterns.tlpsrc
##                         # will need to be updated.
## 3. c2l context p   # place new files in svn. Then we can commit:
## 4. tlcom "context $ctxversion" $tlroot/Master/bin # commits runtime too
## 5. tl-update-tlpdb -v --fix-reverse-revisions  # must clean new context for:
## 6. c2l context-legacy  # until good, then:
## 6b. c2l context-legacy p
## 7. tlcom "context-legacy $ctxversion"
## 8. If needed, other context-legacy updates by hand.
## 9. svn revert tlpkg/texlive.tlpdb # revert interim texlive.tlpdb and let the
##                                   # nightly build do the full update.
## 10. tar cJf Master/source/luametatex-$ctxversion.tar.xz luametatex
##
#sub POSTprevcontext {
#  print "POST$package - remove context-legacy etc. files, rearrange for TL\n";
#  print "*** See POSTcontext in ctan2tds for ConTeXt update procedure.\n";
#  &xchdir ($DEST);
#
#  &context_common_removals ();
#
#  print "still POST$package - make README.TEXLIVE\n";
#  my $RTL = "doc/context/README.TEXLIVE";
#  open (RTL, ">$RTL") || die "open(>$RTL) failed: $!";
#  print RTL <<END_RTL;
#For TeX Live, some files are (re)moved from the ConTeXt distribution.
#
#Files relating to ConTeXt MkII are in the context-legacy package.
#Files relating to mptopdf are in the mptopdf package.
#LuaMetaTeX's compiled sources are in Master/source/luametatex-*.tar.xz.
#
#The list of removed files follows; most relate to nonfree fonts. Others
#relate to the standalone ConTeXt distribution and would cause trouble
#within TeX Live. For the code implementing all this and more details,
#see the POSTcontext routine in the Master/tlpkg/libexec/ctan2tds script.
#
#END_RTL
#  close (RTL) || die "close(>$RTL) failed: $!";
#  #
#  my $before_rm = "/tmp/$<.ctx.before.rm";
#  my $after_rm = "/tmp/$<.ctx.after.rm";
#  &SYSTEM ("cd $RAW_DIR/$packagedir && find . -type f | sort >$before_rm");
#  &SYSTEM ("find . -type f | sort >$after_rm");
#  &SYSTEM ("comm -23 $before_rm $after_rm >>$RTL");
#
#  # remove the mkii files we put into context-legacy; don't list these
#  # in README.TEXLIVE. Hopefully there will be no new mkii files.
#  &remove_files_of_pkg ("context-legacy");
#  #
#  # Ditto mptopdf. Although mptopdf is removed from both context and
#  # context-legacy, we don't do it in context_common_removals because we
#  # don't want to list its files in README.TEXLIVE, for consistency with
#  # how context-legacy is handled.
#  &remove_files_of_pkg ("mptopdf");
#
#  # Remove two more mptopdf doc formats there's no need to distribute.
#  &SYSTEM ("$RM -rf doc/context/scripts/mkii/");
#
#  # No more removals after this, just copying and moving around.
#
#  # move some files to context subdirs for tl.
#  &mv_with_mkdir ("colors/icc/context", "tex/context/colors/icc");
#  &mv_with_mkdir ("context-readme.txt", "doc/context");
#
#  print "still POST$package - copy user-level .lua to platforms\n";
#  # discern which platforms don't have a luametatex binary from the tlpsrc.
#  my $ap = "$Master/tlpkg/tlpsrc/00texlive.autopatterns.tlpsrc";
#  my $grep = "grep -A 1 global_no_lmtx_platforms $ap";
#  chomp (my $no_lmtx_platforms = `$grep | sed -e 1d -e 's/^ *//'`);
#  die "could not find no_lmtx_platforms in $ap" if ! $no_lmtx_platforms;
#  my @no_lmtx_platforms = split (/,/, $no_lmtx_platforms);
#  print "\t no_lmtx_platforms = @no_lmtx_platforms\n";
#  #
#  my $w_bindir = "$TOPDEST/bin/windows";
#  &xmkdir ($w_bindir);
#  #
#  # because bindirs_symlink uses cwd to determine the link:
#  &xchdir ("$DEST/scripts/$package/lua");
#  my @exec = qw(context mtxrun);
#  for my $exec (@exec) {
#    my $luafile = "$exec.lua";
#    # these should exist.
#    die "POSTcontext: no context lua file $luafile" unless -s $luafile;
#    &SYSTEM ("$CP $luafile $w_bindir/");
#    &bindirs_symlink ($luafile, $luafile, @no_lmtx_platforms);
#  }
#
#  print "still POST$package - user-level executable man pages\n";
#  &xchdir ("$DEST/doc/$package/scripts");
#  my $mandest = "$TOPDEST/texmf-dist/doc/man/man1";
#  &xmkdir ($mandest);
#  for my $exec (@exec) {
#    # we only keep mkiv man pages here, mkii in context-legacy.
#    my $mansrc = "mkiv/$exec.man";
#    &SYSTEM ("$CP $mansrc $mandest/$exec.1");
#  }
#
#  print "still POST$package - mtx-*.man pages\n";
#  # In addition, there is mtx-*.man for subcommands in mkiv.
#  &xchdir ("$DEST/doc/$package/scripts/mkiv");
#  for my $mtxman (<mtx-*.man>) {
#    (my $mtxmanbase = $mtxman) =~ s/\.man$//;
#    &SYSTEM ("$CP $mtxman $mandest/$mtxmanbase.1");
#  }
#  &tl_man_to_pdf ();
#
#  # do last so man pages are there.
#  print "still POST$package - preserving binaries\n";
#  &POST_preserve_bin ("luametatex", "context", "mtxrun");
#}


# We use the repackaging of ConTeXt releases done for CTAN and TL
# by Max Chernoff:
#   https://github.com/gucci-on-fleek/context-packaging.
# His process does all the work previously done here, such as removing
# nonfree files. What's left for us is mainly to unpack the zip files
# from CTAN (see tlpkginfo) and remake the pdfs for the man pages.
#
# There are three packages on the TL side: context, context-legacy, mptopdf.
# Each can be updated with c2a (-> c2l, etc.), in the usual way.
# They should be updated together.
sub POSTcontext {
  print "POST$package - README.TEXLIVE, unpack archives/zips\n";
  &xchdir ($DEST);

  my $ctan_base = "$ctan_root/macros/context/base";
  print "*** " . `cat $ctan_base/VERSION`;

  # what we unpack.
  my $ctan_ctx_archives = "$ctan_base/archives";
  print "\t ctan_root=$ctan_root\n";
  print "\t ctan_ctx_archives=$ctan_ctx_archives\n";
  print "\t ls -C $ctan_ctx_archives:\n";
  print `ls -C $ctan_ctx_archives`;

  print "still POST$package - construct README.TEXLIVE from nonfree.zip\n";
  my $RTL = "doc/context/README.TEXLIVE";
  open (RTL, ">$RTL") || die "open(>$RTL) failed: $!";
  print RTL <<END_RTL;
For the TeX Live packages, some files are (re)moved from the original
ConTeXt distribution.

Files relating to ConTeXt MkII are in the context-legacy package.
Files relating to mptopdf are in the mptopdf package.
LuaMetaTeX's compiled sources are in Master/source/luametatex-*.tar.xz.

The list of removed files follows; most relate to nonfree fonts. It is
the contents of the context-nonfree package, available from the
tlcontrib repository, https://contrib.texlive.info/

For the code implementing all this and more details, see
https://github.com/gucci-on-fleek/context-packaging and the POSTcontext*
routines in the Master/tlpkg/libexec/ctan2tds script.

END_RTL
  close (RTL) || die "close(>$RTL) failed: $!";
  #
  my $ctx_nonfree_zip = "$ctan_ctx_archives/context-nonfree.zip";
  &xsystem ("zipinfo -1 $ctx_nonfree_zip | sort >>$RTL");

  print "still POST$package - unzip binaries\n";
  my $ctx_bin_zip = "$ctan_ctx_archives/context.bin.zip";
  my $bin_destdir = "$TOPDEST/bin"; # that is, Master in the tmp cooked dir
  &xsystem ("unzip -q -o $ctx_bin_zip -d $bin_destdir"); # -o is for overwrite
  #
  # The bin.zip provides binaries for some platforms we don't have in TL.
  # unzip makes it hard to exclude a directory; remove them afterward.
  my $bin_excludes = "amd64-openbsd*";
  &xsystem ("cd $bin_destdir && rm -r $bin_excludes");
  #
  # amd64-netbsd and x86_64-cygwin binaries are not provided.
  # For cygwin, Ken said we should just omit them going forward unless we
  # receive user requests.
  # For netbsd, Marc will rebuild, so preserve what's there.
  &POST_preserve_bin ("context", "context.lua", "mtxrun", "mtxrun.lua",
                      "luametatex",
                      ["amd64-netbsd"]);

  print "still POST$package - man to pdf\n";
  &tl_man_to_pdf ();
}

sub POSTcontext_legacy {
  print "POST$package - remake man\n";

  print "still POST$package - man to pdf\n";
  &tl_man_to_pdf ();
}


# Remove all files from PKG (as reported by the tlpfiles script).
# Was used for ConTeXt, but not as of the 2025 switch to Max's repackaging.
#
sub remove_files_of_pkg {
  my ($pkg) = @_;
  print "\t RM files for package $pkg\n";

  # find files for PKG.
  chomp (my @files = `tlpfiles $pkg`);
  die "no files for package $pkg?" if (! @files);

  # files are given relative to the root, so cd there.
  my $cwd = getcwd ();
  &xchdir ($TOPDEST);
  for my $f (@files) {
    #print " $f";
    # there are too many special cases even to warn.
    unlink ($f) || print "remove_files_of_pkg: unlink($f) failed: $!";
  }
  print "\n";

  # remove any now-empty directories and cd back.
  &xsystem ($RMDIR_EMPTY);
  &xchdir ($cwd);
}

# Was used for ConTeXt, but not as of the 2025 switch to Max's repackaging.
# Conceivably could be used for other things. Make a symlink in each
# Unix bindir (Windows is not handled here) to EXEC, assuming its
# location is relative to cwd. Except also skip any platforms given as
# @OMIT_PLATFORMS.
#
# If LINKNAME is not given, the symlink is named as the basename of EXEC
# with any extension removed.
#
sub bindirs_symlink {
  my ($exec,$linkname,@omit_platforms) = @_;

  chomp (my $pwd = `pwd`);
  (my $intermediate_dirs = $pwd) =~ s,^.*/$DEST_TREE/,,;
  #
  my $linktarget = "../../$DEST_TREE";
  $linktarget .= "/$intermediate_dirs";
  $linktarget .= "/$exec";
  print ("\t bindirs_symlink: linktarget = $linktarget\n");
  #
  if (! $linkname) {
    ($linkname = $exec) =~ s,.*/,,;  # just the basename
    $linkname =~ s,\.[^./]+$,,;         # rm extension too
  }
  print ("\t bindirs_symlink: linkname = $linkname\n");

  chomp (my @platforms = `cd $Master/bin && ls`);
  print ("\t bindirs_symlink: platforms = @platforms\n");
  for my $p (@platforms) {
    print ("\t   bindirs_symlink: considering platform $p\n");
    next if $p =~ /win32|windows/;  # windows handled separately
    next if $p eq "man";            # non-platform pain
    next if grep { $_ eq $p } @omit_platforms;
    my $platdir = "$TOPDEST/bin/$p";
    &xmkdir ($platdir);
    &SYSTEM ("ln -s $linktarget $platdir/$linkname");
  }
}

sub POST_context_contrib {
  print "POST_context_contrib for $package - move top-level files\n";
  (my $context_package = $package) =~ s/^context-//;
  my $destdir = "$DEST/doc/context/third/$context_package";
  &mv_with_mkdir ("LICENSE", "$DEST/doc/context/third/$context_package");
  &mv_with_mkdir ("CHANGELOG.md", "$DEST/doc/context/third/$context_package");
  &mv_with_mkdir ("README.md", "$DEST/doc/context/third/$context_package");
  &mv_with_mkdir ("VERSION", "$DEST/doc/context/third/$context_package");
}

sub POSTcontext_games {
  print "POST$package - remove duplicated fonts\n";
  &SYSTEM ("$RM -rf fonts");
}

sub POSTcoordsys {
  print "POST$package - rename `putfile.' to `putfile.maple'\n";
  # Apparently dtx (TeX) insists on always adding the period; this can make
  # vfat filesystems choke.
  &SYSTEM ("$MV putfile. putfile.maple");
}

sub POSTcrossrefenum {
  print "POST$package - move tex/ subdir\n";
  &SYSTEM ("$MV tex $DEST/tex/generic/$package");
}

sub POSTcs {
  print "POST$package - untar and combine\n";
  #
  # The cs package is where we have the cstex fonts, in both mf and
  # type1 formats (plus tfm, vf, etc.).  This comes from multiple
  # tarballs in the cstex distribution area.
  # the Catalogue and tar file name is cspsfonts, but the directory
  # name inside is cs; we stay with cs since that has been the name in TL.
  #
  for my $tarbase ("csfonts-t1", "csfonts", "cspsfonts") {
    my $tarfile = "$tarbase.tar.gz";
    my $untar = "tar -C $DEST --strip-components=1 -x -f $tarfile";
    $untar .= " --exclude texmf/doc/cstex"; # filter out cstex dir
    &SYSTEM ($untar);
  }
  #
  # move map file to right place.
  &SYSTEM ("$MV $DEST/dvips/config/csfonts.map $DEST/fonts/map/dvips/cs/");
  #
  # remove Sauter modifications and other unknown files.
  &SYSTEM ("$RM -rf $DEST/fonts/source/jknappen");
  &SYSTEM ("$RM -rf $DEST/fonts/vf-cnv");
  &SYSTEM ("$RM -rf $DEST/fonts/vf/public/cm2cs");
  &SYSTEM ("$RM *");  # dump rest
}

sub POSTcstex {
  print "POST$package - untar pieces, combine\n";
  #
  # The cstex package itself just contains documentation.  By the
  # author's choice, it is split over several tarballs and other files.
  # Luckily, cstex as defined in the Catalogue maps to
  # CTAN:macros/cstex, which includes everything.  So we can pick and
  # choose what we need.
  #
  for my $tarbase ("csplain", "cslatex", "cspsfonts") {
    my $tarfile = "base/$tarbase.tar.gz";
    my $untar = "tar -C $DEST --strip-components=1 -x -f $tarfile";
    $untar .= " texmf/doc/cstex"; # include only the cstex dir
    &SYSTEM ($untar);
  }
  # no stray symlinks please.
  &POST_rmsymlink ();
  #
  &SYSTEM ("$MV doc/README README-doc");
  &SYSTEM ("$MV doc/cstexman.tex doc/cstexman.pdf .");
  &SYSTEM ("$MV doc/jemny.* doc/prvni.* .");
  &SYSTEM ("$RM -rf README *.zip base/ doc/");
  &SYSTEM ("$MV * $DEST/doc/cstex/"); # move all to same dir
  &SYSTEM ("$RM $DEST/doc/cstex/*.ps $DEST/doc/cstex/*.dvi");
}

sub POST_cstexpkgs { # used for csplain and cslatex
  print "POST_cstexpkgs (for $package) - untar\n";
  my $tarfile = -r "$package.tar.gz" ? "$package.tar.gz" : "somethingwrong";
  my $untar = "tar -C $DEST --strip-components=1 -x -f $tarfile";
  $untar .= " --exclude=texmf/doc/cstex";          # handled in its own package
  $untar .= " --exclude=texmf/tex/generic/enctex"; # must do by hand
  &SYSTEM ($untar);
  &SYSTEM ("$RM $tarfile");
  &SYSTEM ("$RM $DEST/tex/csplain/fonts/texput.log");
}

sub POSTculmus {
  print "POST$package - move .t3 to fonts/, gzip sfd\n";
  &mv_with_mkdir ("*.t3", "$DEST/fonts/type3/$package");
  #
  # sfd files are huge.
  my $srcdir = "$DEST/source/fonts/$package";
  &SYSTEM ("find $srcdir -name \*.sfd | xargs gzip -v");
}

sub POSTdehyph_exptl {
  print "*** POST$package - you must update tlpsrc directives, right now!\n";
}

sub POSTdigestif {
  # the situation here is that the author wanted to keep generic
  # filenames like "Parser.lua", so we bundle them up in a zip.
  # https://tug.org/pipermail/tex-live/2022-November/048681.html
  print "POST$package - make zip files per their INSTALL.md\n";
  &xsystem ("zip -j $package.zip *.lua *.tags");
  &xsystem ("$RM *.lua *.tags");
}

sub POSTdozenal {
  print "POST$package - gray.tfm should never be in runtime\n";
  &mv_with_mkdir ("$DEST/fonts/tfm/public/$package/gray.tfm",
                  "$DEST/source/$package/");
}

sub POSTe_french {
  print "POST$package - move directories around\n";
  &SYSTEM ("find [^b]* -type f | xargs chmod -R a-x");
  &mv_with_mkdir ("texmf/makeindex/*.ist", "$DEST/makeindex/$package/");
  &SYSTEM ("$MV texmf/tex $DEST/tex/$whichformat/$package"); # mv dir itself
  &SYSTEM ("$MV texmf/doc/* .");
}

sub POSTembedfile {
  print "POST$package - one .sty generic, one latex\n";
  # since two different destinations, handle it specially.
  &mv_with_mkdir ("$DEST/tex/latex/$package/$package.sty",
                  "$DEST/tex/generic/$package/");
}

sub POSTencxvlna {
  print "POST$package - .tex name conflict\n";
  &SYSTEM ("$MV doc/* .");
  &mv_with_mkdir ("latex/$package.sty", "$DEST/tex/latex/$package");
  &mv_with_mkdir ("plain/$package.tex", "$DEST/tex/plain/$package");
}

sub POSTendofproofwd {
  print "POST$package - hardwired useless subdir\n";
  &mv_with_mkdir ("$DEST/tex/latex/$package/endofproofwd.pdf_tex",
                  "$DEST/tex/latex/$package/common");
}

sub POSTenigma {
  print "POST$package - move everything per README\n";
  #
  &mv_with_mkdir ("mtx-t-enigma.lua",
                   "$DEST/scripts/context/lua/third/enigma/mtx-t-enigma.lua/");
  &mv_with_mkdir ("t-enigma.mkvi",
                   "$DEST/tex/context/third/enigma/t-enigma.mkv/");
  &mv_with_mkdir ("enigma.sty", "$DEST/tex/latex/enigma/");
  &mv_with_mkdir ("enigma.tex", "$DEST/tex/plain/enigma/");
  &mv_with_mkdir ("enigma.lua", "$DEST/tex/generic/enigma/");
  #
  &mv_with_mkdir ("enigma-example*", "examples/");
  #
  &xchdir ("..");
  &mv_with_mkdir ("enigma", "$DEST/doc/context/third/enigma/");
}

sub POSTeplain {
  print "POST$package - info, man\n";

  my $infodir = "$TOPDEST/texmf-dist/doc/info/";
  &mv_with_mkdir ("doc/$package/$package.info", $infodir);

  &POST_do_man ("doc/$package");
  &SYSTEM ("$RM doc/$package/$package.man1.pdf");
}

sub POSTepspdf {
  print "POST$package - construct images subdir\n";
  &xmkdir ("images");
  &SYSTEM ("$MV *.png logo.* images/");
  &SYSTEM ("$MV *.bat epspdf.texlua /tmp/");
  print "YOU-MUST-DO! update /tmp/$package* into bin/windows, etc.\n";
}

sub POSTexam_zh {
  print "POST$package - just tex/* in runtime\n";
  &mv_with_mkdir ("tex/*", "$DEST/tex/latex/$package");
}

sub POSTfixme {
  print "POST$package - move subdirectories\n";
  my $dstdir = "$DEST/tex/latex/$package";
  &xmkdir ($dstdir);
}

sub POSTfont_change_xetex {
  print "POST$package - move .tex, collision with doc source\n";
  &mv_with_mkdir ("macros/*", "$DEST/tex/xetex/$package/");
}

sub POSTformation_latex_ul {
  print "POST$package - move source subdir, doc/* files\n";
  &SYSTEM ("$MV source $DEST/source/latex/$package");
  &SYSTEM ("$MV doc/* .");
  &SYSTEM ("rmdir doc");
  &POST_rmsymlink ();
}

sub POSTfpl {
  print "POST$package - rename *.source\n";
  &SYSTEM ("$MV README.source $DEST/source/fonts/fpl/README");
  &SYSTEM ("cd $DEST/source/fonts/fpl/&& $MV Makefile.source Makefile");
}

sub POSTgentium_sil {
  print "POST$package - move fonts into runtime\n";
  # we want to keep the Gentium and GentiumBook subdirs for the doc files.
  my $DEST_TTF = "$DEST/fonts/truetype/$Foundry/$package/";
  &mv_with_mkdir ("*/*.ttf", $DEST_TTF);
  #
  my $DEST_OTF = "$DEST/fonts/opentype/$Foundry/$package/";
  &mv_with_mkdir ("*/web/*.woff*", $DEST_OTF);
}

sub POSTgentium_tug {
  print "POST$package - just move directories around\n";
  &rename_with_mkdir ("afm", "$DEST/fonts/afm/public/$package");
  &rename_with_mkdir ("enc", "$DEST/fonts/enc/dvips/$package");
  &rename_with_mkdir ("latex", "$DEST/tex/latex/$package");
  &rename_with_mkdir ("map/dvips", "$DEST/fonts/map/dvips/$package");
  &rename_with_mkdir ("map/pdftex", "$DEST/fonts/map/pdftex/$package");
  &rename_with_mkdir ("source", "$DEST/source/fonts/$package");
  &rename_with_mkdir ("tfm", "$DEST/fonts/tfm/public/$package");
  &rename_with_mkdir ("truetype", "$DEST/fonts/truetype/public/$package");
  &rename_with_mkdir ("type1", "$DEST/fonts/type1/public/$package");
  &SYSTEM("rm README"); # symlink, should be removed already, but to be sure
  &SYSTEM("$MV doc/* .");
  &SYSTEM("rmdir doc");
}

sub POSTghsystem {
  print "POST$package - move subdirectories\n";
  my $dstdir = "$DEST/tex/latex/$package";
  &xmkdir ($dstdir);
  &SYSTEM ("$MV language pictures $dstdir/");
}

sub POSTgost {
  print "POST$package - move csf files\n";
  &mv_with_mkdir ("csf/*", "$DEST/bibtex/csf/$package");
}

sub POSTgrotesq {
  print "POST$package - move files\n";
  &xchdir ($DEST);
  &SYSTEM ("$MV doc/fonts/urw/* doc/fonts/$package");
  &mv_with_mkdir ("dvips/config/*", "fonts/map/dvips/$package");
  &SYSTEM ("$MV tex/latex/ugq tex/latex/$package");
  &SYSTEM ("$RM vtex/config/*");
}

sub POSTgrverb {
  print "POST$package - rename psfonts.map\n";
  my $mapdir = "$DEST/fonts/map/dvips/grverb";
  &SYSTEM ("$MV $mapdir/psfonts.map $mapdir/grverb.map");
}

sub POSThmtrump {
  print "POST$package - move .ttf from subdir\n";
  &mv_with_mkdir ("nkd04_playing_cards_index/nkd04_playing_cards_index.ttf",
                  "$DEST/fonts/truetype/public/$package");
}

sub POSThyph_utf8 {
  print "POST$package - unpack tlpsrc, etc.\n";
  print "*** Before committing from this:\n";
  print "***  read leading comments in tlpkg/bin/tl-hyph-test and run it!\n";
  print "*** \n";
  print "*** After tl-hyph-test is ok, and still before committing:\n";
  print "***  add new hyphen-* pkgs to collection-lang*.\n";
  print "*** \n";
  print "*** If all ok, then commit.\n";
  print "***  Final commit will have svn add errors per below; ignore.\n";
  print "*** \n";
  print "*** After commit, manually rebuild:\n";
  print "*** env force_rebuild=true cron.trunk # or cron.pretest\n";
  print "*** \n";
  print "*** All *hyph[en]-* files (etc.) will not be matched,\n";
  print "***  and cannot be added, since they are in their own packages.\n";
  my $tlpsrc_dir = "$TOPDEST/tlpkg/tlpsrc";
  &xmkdir ($tlpsrc_dir);
  &xchdir ($tlpsrc_dir);
  #
  my $pkgsrc_dir = "$DEST/source/generic/$package";
  &xsystem ("unzip -j $pkgsrc_dir/tlpsrc.zip"); # junk top dir in tlpsrc.zip
  &SYSTEM ("$RM $pkgsrc_dir/tlpsrc.zip");       # no need for tlpsrc.zip
}

sub POSTibygrk {
  print "POST$package - second copy of ibycus4.map\n";
  # after the ibygrk structure has been set up, copy ibycus4.map to the
  # tex dir.
  &SYSTEM ("cd $DEST && $CP fonts/source/public/ibygrk/ibycus4.map "
           . "tex/generic/ibygrk/ibycus4.map");
}

sub POSTisodoc {
  print "POST$package - remove unneeded (per author) derived files\n";
  &SYSTEM ("$RM Makefile *.sh *.sty *.tex *.uue");
}

sub POSTimpatient {
  print "POST$package - remove artwork and LL subdirectories\n";
  &SYSTEM ("$RM -r artwork cn fr");
}

sub POSTimpatient_fr {
  print "POST$package - remove LL subdirectories\n";
  &SYSTEM ("$RM *");
  &SYSTEM ("$MV fr/* .");
  &SYSTEM ("$RM -rf cn artwork diffs");
}

sub POSTinteractiveworkbook {
  print "POST$package - mv .sty directory\n";
  my $dest = "$DEST/tex/latex/$package";
  &SYSTEM ("mkdir -p $dest");
  &SYSTEM ("$MV interactiveworkbook.sty/* $dest/");
  &SYSTEM ("rmdir interactiveworkbook.sty");
}

sub POSTpsnfss {
  print "POST$package - extract tex subdirs from zip files, etc.\n";
  #
  # keep test/ subdir in doc just because that's what heiko did in latex-tds.
  &xmkdir ("test");
  &xsystem ("mv *test*.tex test/");
  #
  # We don't want the actual tfm/vf from the sub-package zip files; TL
  # has many more tfm's (in different packages), and we don't want to
  # mess with that. So just remove the fonts subdir -- except for the
  # map files, which we do want.
  # Each zip has a top-level dir named the same as the .zip file.
  for my $zip ("freenfss", "lw35nfss") {
    &xsystem ("unzip -q $zip.zip");
    &xsystem ("rm -rf $zip/fonts/tfm $zip/fonts/vf");
    &xsystem ("$MV $zip/tex/latex/$package/* $DEST/tex/latex/$package/");
    &xsystem ("rm -rf $zip.zip $zip/");
  }
}

sub POSTptex_fontmaps {
  print "POST$package - move directories around\n";
  # dir "src" content -> run files
  # dir "no_runtime" content  -> source files
  # dir "tool" as a whole -> source files
  # dir "doc" content to -> doc files (one dir up!)
  my $mapdest = "$DEST/fonts/map/dvipdfmx/$package";
  my $cmapdest= "$DEST/fonts/cmap/$package";
  my $scriptdest = "$DEST/scripts/$package";
  my $srcdest = "$DEST/source/$package";
  &xmkdir ($mapdest);
  &xmkdir ($cmapdest);
  &xmkdir ($scriptdest);
  &xmkdir ($srcdest);
  &SYSTEM ("$MV cmap/* $cmapdest");
  &SYSTEM ("rmdir cmap");
  &SYSTEM ("$MV script/kanji-* $scriptdest");
  &SYSTEM ("$MV jis04cmap_exp script $srcdest");
  &SYSTEM ("$MV maps/* $mapdest");
  &SYSTEM ("rmdir maps");
  #
  my $fmiscdest= "$DEST/fonts/misc";
  &xmkdir ($fmiscdest);
  &SYSTEM ("$MV database $fmiscdest/$package");
  #
  &POST_preserve_postcode ();
}

sub POSTknitting {
  print "POST$package - move generic .tex file\n";
  my $dest = "$DEST/tex/plain/$package";
  &SYSTEM ("mkdir -p $dest");
  &SYSTEM ("$MV knitting.tex $dest/");
}

sub POSTknuth_lib {
  print "POST$package - removing some base files\n";
  &SYSTEM ("rm -rf $DEST/doc/*/knuth-lib/*.mft");
  #
  # somehow it seems like plain.tex, plain.mf, etc. should remain in base/.
  &SYSTEM ("rm -f $DEST/fonts/source/public/knuth-lib/plain.mf");
  #
  &xchdir ("$DEST/tex/plain/knuth-lib");
  &SYSTEM ("rm -f hyphen.tex plain.tex");
  #
  # null.tex, and only null.tex, should be in generic.
  &mv_with_mkdir ("null.tex", "$DEST/tex/generic/$package");
}

sub POSTkoma_script {
  print "POST$package - rm spurious dup top-level trees\n";
  &SYSTEM ("$RM doc/*.* source/* 2>/dev/null");
}

sub POSTkotex_oblivoir {
  print "POST$package - memhangul subdirs in runtime\n";
  &mv_with_mkdir ("memhangul-*", "$DEST/tex/latex/$package");
}

sub POSTkotex_utf {
  print "POST$package - various in runtime\n";
  &mv_with_mkdir ("contrib", "tex4ht", "$DEST/tex/latex/$package");
  &SYSTEM ("$MV doc/* .");
}

sub POSTlatex2html {
  print "POST$package - moving $package.perl to doc\n";
  my $dest = "$DEST/doc/latex/$package";
  &SYSTEM ("mkdir -p $dest");
  &SYSTEM ("$MV $DEST/scripts/latex2html/styles/$package.perl $dest");
}

sub POSTlatex_base_dev {
  &SYSTEM ("rm -rf $DEST/makeindex"); # won't be uploaded later
}

sub POSTlatex2e_help_texinfo {
  print "POST$package - remove spanish translation subdir\n";
  &SYSTEM ("$RM -rf spanish");
}

sub POSTlatexindent {
  print "POST$package - remove binaries\n";
  &SYSTEM ("$RM -r bin");
}

sub POSTlhcyr {
  print "POST$package - move to source, avoid dups\n";
  &xchdir ("$DEST/tex/latex/$package");
  # Sebastian moved tex files to the top level, removed from other dirs.
  # We just follow what he did, years ago.
  for my $tex (qw(karabas kniga otchet pismo rusfonts statya)) {
    &SYSTEM ("$MV lhcyralt/$tex.tex .");
    &SYSTEM ("$RM */$tex.tex");
  }
  #
  for my $hyph (glob ("*/{hyphen.cfg,rhyphen.tex}")) {
    my ($hdir) = $hyph =~ m,^(.*)/,;
    (my $hdest = $hyph) =~ s,/(.*)$,/$hdir-$1,;
    &SYSTEM ("$MV $hyph $hdest");
  }
  #
  # mfj's to source dir, ignoring that there are multiple versions.
  for my $dir (glob ("lhcyr{alt,win}")) {
    &SYSTEM ("$MV $dir/*.mfj $DEST/source/latex/$package/");
  }
}

sub POSTlibertinus_type1 {
  print "POST$package - clean spurious empty .sty\n";
  &SYSTEM ("$RM $DEST/tex/latex/libertinus-type1.sty");
}

sub POSTlilyglyphs {
  print "POST$package - move directories around\n";
  &rename_with_mkdir ("fonts", "$DEST/fonts/opentype/public/$package");
  &rename_with_mkdir ("source", "$DEST/source/latex/$package");
  &rename_with_mkdir ("tex", "$DEST/tex/latex/$package");
}

sub POSTlistbib {
  print "POST$package - move .doc to .bst\n";
  my $dest = "$DEST/bibtex/bst/$package";
  &xmkdir ($dest);
  &SYSTEM ("$MV $package.doc $dest/$package.bst");
}

sub POSTlithuanian {
  print "POST$package - remove old language support, fix .dfu location\n";
  # these files are no longer used in TL.
  &SYSTEM ("$RM language.lt.dat $DEST/tex/latex/lithuanian/language.lt.def");
  &SYSTEM ("$MV $DEST/doc/latex/lithuanian/l7xenc.dfu $DEST/tex/latex/lithuanian/");
}

sub POSTlua_physical {
  print "POST$package - src/ dir to runtime\n";
  &mv_with_mkdir ("src/*", "$DEST/scripts/$package");
}

sub POSTluatexja {
  print "POST$package - runins, move directories\n";
  &xchdir ("src");
  {
    local @filenames = glob ("*");  # dynamic redef for runins call.
    &runins ($specialins{$package} || $standardins);
  }
  &SYSTEM ("$RM *.log");
  &xchdir ("..");

  # "src/.{ins,dtx}" -> source files
  # other "src" content -> run files
  # dir "tool" as a whole -> source files
  # dir "doc" content to -> doc files (one level up)
  my $rundest = "$DEST/tex/luatex/$package";
  my $srcdest = "$DEST/source/luatex/$package";
  &xmkdir ($rundest);
  &xmkdir ($srcdest);

  &SYSTEM ("$MV src/*.dtx src/*.ins $srcdest/");
  &SYSTEM ("$MV src/ltj-kinsoku_make.tex $srcdest/");
  &SYSTEM ("$MV src/* $rundest/");

  &SYSTEM ("$MV tool $srcdest/");
  &SYSTEM ("$MV doc/* .; rmdir doc");
}

sub POSTmathdesign {
  print "POST$package - mv files\n";
  &SYSTEM ("$RM non-free/enc/tex*.enc");  # dup of standard enc files
  &SYSTEM ("$RM non-free/enc/7t.enc");
  # one way of merging dirtree A into dirtree B.
  &SYSTEM ("cd non-free && rsync -a --ignore-existing * ..");
  &SYSTEM ("$RM -rf non-free/");
  &SYSTEM ("$RM mathdesign-doc.pdf");
  &SYSTEM ("$RM *-Garamond-Pro-* *-Utopia-Std-*");
  &SYSTEM ("$RM *-itc-Charter-*  *-urw-GaramondNo8-*");
  &SYSTEM ("$MV doc/* .");
  &mv_with_mkdir ("config/*", "$DEST/dvips/$package");
  &mv_with_mkdir ("enc/*", "$DEST/fonts/enc/dvips/$package");
  &mv_with_mkdir ("map/*", "$DEST/fonts/map/dvips/$package");
  &mv_with_mkdir ("latex/*", "$DEST/tex/latex/$package");
  &mv_with_mkdir ("tfm/*", "$DEST/fonts/tfm/public/$package");
  &mv_with_mkdir ("type1/*", "$DEST/fonts/type1/public/$package");
  &mv_with_mkdir ("vf/*", "$DEST/fonts/vf/public/$package");
}

# upstream microtype removed these problematic support files, so we
# don't have to worry about them any more. But leave the infrastructure
# in place in case it happens again.
#sub POSTmicrotype {
# print "POST$package - remove support files for nonfree fonts\n";
#  &xchdir ("$DEST/tex/latex/$package");
#  &killfiles ('mt-(PalatinoLinotype|euroitc|pad).cfg', "more", "notctan");
#}

sub POSTmitthesis {
  print "POST$package - move fontsets/ to runtime\n";
  &mv_with_mkdir ("fontsets", "$DEST/tex/latex/$package/");
}

sub POSTmontex {
  print "POST$package - avoid 00readme case clash\n";
  # these files are no longer used in TL.
  &SYSTEM ("$MV 00readme 00readme.mfinput.km");
}

sub POSTmpfonts {
  print "POST$package - move type3 fonts to fonts/misc\n";
  &SYSTEM ("$RM -rf type3"); # dup type3/mpfonts-amsfonts/cmex9.t3
  &mv_with_mkdir ("*.t3", "$DEST/fonts/type3/$package");
}

sub POSTmptopdf {
  # mptopdf needs a cut-down version of the old context post routine.
  # But there are enough differences that trying to factor out the
  # commonalities doesn't make sense.  Sigh.
  print "POST$package - user-level executables\n";
  print "*** also do on tug.org: cd /home/ftp/tex/mptopdf && rm -rf * && unzip -q $ctan_root/macros/context/base/archives/mptopdf.zip \n";
  my $w32_bindir = "$TOPDEST/bin/windows";
  &xmkdir ($w32_bindir);
  #
  my $pkg_subdir = "perl"; # where hans keeps it
  &xchdir ("$DEST/scripts/context/$pkg_subdir");
  my $exec = "mptopdf.pl";
  &bindirs_symlink ($exec);
  # peb doesn't want a linked_scripts/mptopdf.
  # not sure if the copy under linked_scripts/context/ will get updated
  # (with a context update); doubt it.
  #&build_scripts_copy ($exec, $pkg_subdir);

  # but for windows, use our wrapper rather than ConTeXt's,
  # since the whole point is to have mptopdf available without ConTeXt.
  print "still POST$package - windows wrapper from tl\n";
  my $build_tldir = "texk/texlive";
  my $w32_wrapper = "$Build/$build_tldir/windows_wrapper/runscript.exe";
  &xsystem ("$CP $w32_wrapper $w32_bindir/mptopdf.exe");

  print "still POST$package - man page\n";
  &xchdir ("$DEST/doc/context/scripts/mkii");
  my $mandest = "$TOPDEST/texmf-dist/doc/man/man1";
  &xmkdir ($mandest);
  &xsystem ("$CP mptopdf.man $mandest/mptopdf.1");
  &tl_man_to_pdf ();
}

sub POSTmtx {
  print "POST$package - man pages, preserve prepmx binary\n";
  &SYSTEM ("$RM $DEST/doc/generic/$package/musixtex.log");
  &POST_do_man ();
  &POST_preserve_bin ("prepmx");
}

sub POSTmusixtex {
  print "POST$package - man pages\n";
  &POST_do_man ("doc/generic/$package/scripts");
}

sub POSTmusixtnt {
  print "POST$package - preserve binaries, use/remove windows exe\n";
  &POST_preserve_bin ("msxlint");
  &SYSTEM ("$RM -rf windows");
}

sub POSTnumericplots {
  print "POST$package - mv latex subdir\n";
  &SYSTEM ("$MV latex $DEST/tex/latex/$package");
}

sub POSTnwejm {
  print "POST$package - mv images subdir\n";
  &SYSTEM ("$MV images $DEST/tex/latex/$package");
}

sub POSTopbible {
  print "POST$package - mv doc macros subdirs\n";
  &xsystem ("$MV macros $DEST/tex/$whichformat/$package"); # optex
  &xsystem ("$MV doc/* .");
}

sub POSToptex { # its own format, so under {tex,doc}/base
  print "POST$package - mv base demo pkg doc subdirs\n";
  &mv_with_mkdir ("base", "demo", "pkg", "$DEST/tex/$package");
  &mv_with_mkdir ("README", "doc/*", "$DEST/doc/$package/base");
}

sub POSTpagelayout {
  print "POST$package - man pages\n";
  &POST_do_man ("scripts/$package");
}

sub POSTpas_vc {
  print "POST$package - mv latex subdir, doc files\n";
  &SYSTEM ("$MV latex $DEST/tex/latex/$package");
  &SYSTEM ("$MV $DEST/tex/latex/$package/photo.png .");
  &SYSTEM ("$MV doc/* .");
}

sub POSTpbibtex_base {
  print "POST$package - top-level pbibtex/base, etc.\n";
  &mv_with_mkdir ("$DEST/bibtex/bst/pbibtex-base/*.bst", "$DEST/pbibtex/bst/");
  &mv_with_mkdir ("jxampl.bib", "$DEST/pbibtex/bib/");
  &mv_with_mkdir ("*", "$DEST/doc/ptex/pbibtex/");
}

sub POSTpdfextra {
  print "POST$package - generic files in luatex subdirectory\n";
  &mv_with_mkdir ("$package.sty", "$package.tex",
                 "$DEST/tex/luatex/$package");
}

sub POSTpdftoolbox {
  print "POST$package - preserve subpackage subdirs\n";
  &mv_with_mkdir ("ptb-*", "pdf[D-T]*",
                 "$DEST/tex/plain/$package");
}

sub POSTpedigreeperl {
  print "POST$package - mv *.pm Pedigree/*.pm\n";
  my $scriptdir = "$DEST/scripts/$package";
  &xmkdir ("$scriptdir/Pedigree");
  &SYSTEM ("$MV *.pm $scriptdir/");
  &SYSTEM ("$MV Pedigree/*.pm $scriptdir/Pedigree/");
}

sub POSTpgfornament {
  print "POST$package - mv generic/ dirs\n";
  my $genericdir = "$DEST/tex/generic/$package";
  &mv_with_mkdir ("am", "vectorian", "pgfhan", $genericdir);
}

sub POSTpgfplots {
  print "POST$package - rm spurious pgfplots.test dir\n";
  # author said he will remove in next version.
  &SYSTEM ("$RM -rf $DEST/tex/generic/pgfplots.test");
}

sub POSTpict2e {
  print "POST$package - mv pict2e{-example,}.cfg \n";
  my $texdir = "$DEST/tex/latex/pict2e";
  &SYSTEM ("$MV $texdir/pict2e-example.cfg $texdir/pict2e.cfg");
}

sub POSTpkfix_helper {
  print "POST$package - preserve/rename man page\n";
  my $mandest = "$TOPDEST/texmf-dist/doc/man/man1";
  &xmkdir ($mandest);
  &SYSTEM ("$MV pkfix-helper.1 $mandest/pkfix-helper.1");
  &SYSTEM ("$MV pkfix-helper.pdf $mandest/pkfix-helper.man1.pdf");
}

sub POSTpmx {
  print "POST$package - preserve binaries\n";
  &POST_preserve_bin ("scor2prt", "pmxab");
}

sub POSTprerex {
  print "POST$package - rm dup prerex subdir, install .5 man page\n";
  # move all the stuff from doc dir into ., as it
  # is already in the doc folder
  &SYSTEM ("mv doc/* .");
  &SYSTEM ("rmdir doc");
  &SYSTEM ("$RM -rf prerex");
  #
  my $mandest = "$TOPDEST/texmf-dist/doc/man/man5";
  &mv_with_mkdir ("$package.5", $mandest);
  &tl_man_to_pdf ("5");
  &SYSTEM ("$RM prerex.5.pdf"); # no need to keep original man pdf
}

sub POSTpstcox {
  print "POST$package - mv latex .sty, doc Gallery\n";
  &SYSTEM ("mkdir -p $DEST/tex/latex/$package");
  &SYSTEM ("mv -v $DEST/doc/generic/$package/*sty $DEST/tex/latex/$package");
  &xchdir ("$DEST/doc/generic/$package");
  &SYSTEM ("mkdir pst-coxeterp/");
  # oops, depends on find order
  &SYSTEM ("mv -v Gallery.tex pst-coxeterp?* pst-coxeterp/");
  &SYSTEM ("mv -v doc/pst-coxcoor/ pst-coxcoor");
  &SYSTEM ("mv -v pst-coxcoor?* pst-coxcoor");
}

sub POSTpstgeo {
  print "POST$package - mv data, doc\n";
  &SYSTEM ("$MV data/pst*compress.pl .");
  &SYSTEM ("$RM dataII/pst*compress.pl");
  &SYSTEM ("$MV data dataII $DEST/tex/generic/pst-geo/");
  &SYSTEM ("$MV doc/* .");
  &SYSTEM ("$RM examples/*.pdf");
}

sub POSTpxbase {
  print "POST$package - remove pxcjkcat, separate package\n";
  &SYSTEM ("$RM $DEST/tex/platex/pxbase/pxcjkbase.sty");
}

sub POSTpxchfon {
  print "POST$package - move stuff around\n";
  my $srcdir = "$DEST/source/platex/$package";
  my $sfddir = "$DEST/fonts/sfd/$package";
  &SYSTEM ("$MV *.vpl *.pl $srcdir/");
  &xmkdir ($sfddir);
  &SYSTEM ("$MV $srcdir/*.sfd $sfddir/");
}

sub POSTsanskrit {
  print "POST$package - rm leftovers\n";
  &SYSTEM ("$RM -rf sktdoc.ps ps-type1");
}

sub POSTschule {
  print "POST$package - move additional files\n";
  &mv_with_mkdir ("latex/* data/*", "$DEST/tex/latex/$package");
  &SYSTEM ("$MV doc/* . && rmdir doc");
}

sub POSTscontents {
  print "POST$package - move files to assorted runtime directories\n";
  &mv_with_mkdir ("t-scontents.mk*", "$DEST/tex/context/third/$package");
  &mv_with_mkdir ("scontents.tex", "scontents-code.tex",
                  "$DEST/tex/generic/$package");
}

sub POSTshipunov {
  print "POST$package - rename new style files per agreement with author\n";
  #
  # Discussion with package author, Alexey Shipunov, as of 10oct19: I
  # (Karl) noticed the new style file names (the four below) were
  # completely generic, and asked him to rename. Alexey said that
  # although they had only been uploaded to CTAN recently, they were in
  # use for many years by him and other users, via downloads from his
  # web site. We agreed to compromise by renaming them with -shipunov
  # postfix for TeX Live only, the convention he will follow from now
  # on. The previous .sty names (ca. 2010) are also completely generic,
  # and I shouldn't have accepted them, but have to grandfather them in
  # at this point.
  #
  my $pkgdir = "$DEST/tex/latex/$package";
  for my $sty (qw(add2 dline qqru textfrac)) {
    &SYSTEM ("$MV $pkgdir/$sty.sty $pkgdir/$sty-shipunov.sty");
  }
  #
  # the scripts dir is ok in doc/, avoid possible clash.
  &SYSTEM ("$MV $DEST/scripts/$package scripts");
}

sub POST_simple_rmFonts {
  print "POST$package - rm Fonts dir\n";
  &SYSTEM ("$RM -r Fonts");
}

sub POSTsqltex {
  print "POST$package - move script to scripts/, man pages to doc/, etc.\n";
  &xchdir ("$DEST/source/support/$package/");
  #
  # The user-level script, and accompanying data files, are in a subdir.
  # Don't move Makefile.*.
  &mv_with_mkdir ("src/[sS]*", "$DEST/scripts/$package/");
  #
  &xchdir ("$DEST/scripts/$package/");
  @filenames = glob ("*"); # have to reset @filenames for install()
  &doscripts ();
  #
  # Move the doc files to the doc tree. Don't move Makefile.*.
  &xchdir ("$DEST/source/support/$package");
  my $docdest = "$DEST/doc/support/$package";
  &mv_with_mkdir ("doc/S*", $docdest);
  &domans ();
  #
  # The man page is in a different subdir.
  &xchdir ("man");
  @filenames = glob ("*.man"); # have to reset @filenames for install()
  &domans ();
}

sub POSTstex {
  print "POST$package - mv tex/ dir, copy source/ dir\n";

  # do first so we have the destination dir.
  my $texdest = "$DEST/tex/latex/$package";
  &rename_with_mkdir ("tex", $texdest);

  # install original pristine source dir so we can just remove
  # everything after building and not worry about individual junk files.
  # Although they should all get cleaned up by runins, let's not prove it.
  &xsystem ("$CP -r source $DEST/source/latex/$package");

  # run the (thankfully) provided ins file.
  print "POST$package - run ins file(s) in source/ subdirs\n";
  &xchdir ("source");
  # as of 2023, there's only one .ins, but no harm in keeping the loop.
  for my $ins (glob ("*.ins")) {
    my $insdir = dirname ($ins);
    my $insfile = basename ($ins);
    &xchdir ($insdir);
    &buildfilelist (); # set @filenames for &runins
    &runins ($insfile);
    SYSTEM ("$MV *.cls *.sty $texdest");
    &xchdir ("..");
  }
  &xsystem ("rm -rf source");

  print "POST$package - doc files up a level\n";
  &xsystem ("echo hithere; pwd; ls -lR");
  &xsystem ("$MV Makefile Makefile.top");
  &xsystem ("$MV doc/* .");
  &SYSTEM ($RMDIR_EMPTY);
}

sub POSTtex_ps {
  print "POST$package - rm zip, mv files from subdirs\n";
  &SYSTEM ("$RM *.zip");
  &mv_with_mkdir ("*/cmyk-hax.tex", "$DEST/tex/generic/$package");
  &mv_with_mkdir ("*/poligraf.sty", "$DEST/tex/generic/$package");
  &mv_with_mkdir ("poligraf/*.pro", "$DEST/dvips/$package");
}

sub POSTtexdoc {
  print "POST$package - texdoc.cnf at top level\n";
  &mv_with_mkdir ("texdoc.cnf", "$DEST/$package");
}

sub POSTtexdraw {
  print "POST$package - rename info file\n";
  &mv_with_mkdir ("texdraw.info", "$TOPDEST/texmf-dist/doc/info/");
}

sub POSTtikz_cd {
  print "POST$package - generic file in generic subdirectory\n";
  &xchdir ("$TOPDEST/texmf-dist/tex");
  &mv_with_mkdir ("latex/tikz-cd/tikzlibrary*tex", "generic/tikz-cd/");
}

sub POSTtikz_ext {
  print "POST$package - per-format subdirs\n";
  &xmkdir ("$DEST/tex/generic", "$DEST/tex/latex", "$DEST/tex/plain");
  &SYSTEM ("$MV tex/generic $DEST/tex/generic/$package");
  &SYSTEM ("$MV tex/latex   $DEST/tex/latex/$package");
  &SYSTEM ("$MV tex/plain   $DEST/tex/plain/$package");
  &SYSTEM ("$MV doc/* .");
  #&SYSTEM ($RMDIR_EMPTY);
}

sub POSTtkz_berge {
  print "POST$package - latex/* to runtime\n";
  &mv_with_mkdir ("latex/*", "$DEST/tex/latex/$package");
}

sub POSTtlc3_examples {
  print "POST$package - just sources, not pdfs\n";
  &SYSTEM ("$RM -r book-pdfs"); # 90mb of pdfs is too much
  open (RTL, ">README.TEXLIVE") || warn "open(>README.TEXLIVE) failed: $!";
  print RTL <<"EOF";
For reasons of space, the generated pdfs have been omitted from TeX Live.
You can get them from https://ctan.org/pkg/tlc3-examples.
EOF
}

sub POSTtudscr {
  print "POST$package - subdirs\n";
  &xchdir (".."); # cd back from the prehook
  &SYSTEM ("$MV source/* $DEST/source/latex/$package");
  &SYSTEM ("$MV logo $DEST/tex/latex/$package/");
  &SYSTEM ("$MV doc/* .");
}

sub POSTunimath_plain_xetex {
  print "POST$package - subdirs\n";
  my $destdir = "$DEST/tex/xetex";
  &xmkdir ($destdir);
  &SYSTEM ("$MV tex $destdir/$package");
  &SYSTEM ("$MV doc/* .");
}

sub POSTupmendex {
  print "POST$package - redistribute macro and doc files, rm source\n";
  &SYSTEM ("$RM -r source"); # in our sources
  #
  my $mandir = "$DEST/doc/man/man1";
  &mv_with_mkdir ("man/*" => $mandir);
  #
  &SYSTEM ("$MV doc/* .");
}

sub POSTvelthuis {
  print "POST$package - redistribute macro and doc files\n";
  #
  &mv_with_mkdir ("$DEST/tex/latex/$package/hindi.sty",
                  "$DEST/tex/latex/$package/hindi.ldf",
                  => "$DEST/tex/generic/$package");
  #
  &mv_with_mkdir ("dnmacs.tex" => "$DEST/tex/plain/$package");
  #
  &mv_with_mkdir ("$DEST/tex/latex/$package/hindicaptions.sty",
                  => "$DEST/tex/xelatex/$package");
  #
  &mv_with_mkdir ("$DEST/doc/generic/$package/devnag.1",
                  "$DEST/doc/generic/$package/devnag.man1.pdf",
                  => "$DEST/doc/man/man1");
}

sub POSTxetexpstricks {
  print "POST$package - need tex/ level\n";
  &xchdir ($DEST);
  &xmkdir ("tex", "doc/generic/$package");
  &SYSTEM ("$MV xelatex xetex tex");
}

sub POSTxindex {
  print "POST$package - one .sty to latex, deref symlinks\n";
  &mv_with_mkdir ("xindex.sty", "$DEST/tex/latex/xindex/");
}

# does not work since there is also the rest of the xindy package ...
#sub POST_xindy {
#  print "POST$package - move to xindy module directory\n";
#  &xchdir ("$DEST/$whichformat/$package");
#  &mv_with_mkdir ("*", "$DEST/xindy/modules/lang/persian/");
#}

sub POSTxsim {
  print "POST$package - move code/ subdir\n";
  &mv_with_mkdir ("code/*", "$DEST/tex/latex/$package");
}

sub POSTxymtex {
  print "POST$package - rm .BAK old-doc, move subdirectories\n";
  &SYSTEM ("rm -rf old-doc");
  &SYSTEM ("find . -name '*.BAK' | xargs $RM");
  my $rundir = "$DEST/tex/latex/$package";
  my $srcdir = "$DEST/source/latex/$package";
  for my $dir (qw(base chemist xymtxpdf xymtxps)) {
    &mv_with_mkdir ("$dir/*.sty", "$rundir/$dir");
    &mv_with_mkdir ($dir, $srcdir);
  }
}

sub POSTzhmetrics {
  # source seems better than making a doc directory just for the map file.
  print "POST$package - move example ttfonts.map out of runtime\n";
  &SYSTEM ("$MV $DEST/fonts/map/ttf2pk/ttfonts.map $DEST/source/fonts/zhmetrics");
}

# Generic post hook actions follow, with an underscore following POST.

# Many people upload to ctan with a single directory level for
# doc/source/tex files. Handle those directories in themselves.
#
sub POST_onelevel {
  print "POST_onelevel ($package) - handle doc/source/tex directories\n";

  for my $dir (glob ("*")) {
    next unless -d $dir; # leave files where they are

    # theoretically we should use $whichformat, $sourceformat, etc.,
    # but in practice they are always the same.
    my $format = $whichdocformat;
    #
    my $destdir = $dir;
    if ($dir =~ /^((lua)?(la)?tex|code|src|theme)$/) { # tex/$format/$package
      $destdir = "tex";
    } elsif ($dir =~ /^(metapost|scripts)/) {  # {metapost,scripts}/$package
      $format = "";
    } elsif ($dir =~ /^(opentype)/) {  # fonts/opentype/$foundry/$package
      $destdir = "fonts";
      my $foundry = $specialfoundry{$package} || $standardfoundry;
      $format = "$dir/$foundry";
    } else {
      # not uncommon to have randomly-named subdirs, so stdout not stderr.
      print "$0: skipping unknown one-level directory: $dir\n";
      next;
    }
    &rename_with_mkdir ($dir, "$DEST/$destdir/$format/$package");
  }

  # do data/ subdir (e.g., dlrg-templates) after main loop, since we
  #   want it in a subdir of the tex/ dir.
  # Ditto logos/ (beamertheme-cleaneasy), which might be too aggressive
  #   and we'll have to back off to a separate routine.
  for my $subdir (("data", "logos")) {
    next unless -d $subdir;
    &rename_with_mkdir ($subdir, "$DEST/tex/$whichformat/$package/$subdir");
  }

  # move files in doc[s]/ up to cwd. If there are clashes, will error out.
  &xsystem ("$MV doc/* .") if -d "doc";
  &xsystem ("$MV docs/* .") if -d "docs";
}

sub POST_otherformat {
  print "POST_otherformat ($package) - move tex/ dirs up a level\n";
  &SYSTEM ("$MV $DEST/tex/$package/$package/* $DEST/tex/$package/");
}

sub POST_preserve_postcode {
  print "POST_preserve_postcode ($package) - preserve tlpostcode/$package-tlpost.pl\n";
  my $dirpath = "tlpkg/tlpostcode";
  my $dest = "$TOPDEST/$dirpath";
  &xmkdir ($dest);
  &SYSTEM ("$CP $Master/$dirpath/$package-tlpost.pl $dest/");
}

sub POST_preserve_man {
  print "POST_preserve_man ($package) - preserve man pages\n";
  &preserve_man_pages ($package);
}

# Move .1 and .5 files from SRC_MANDIR to installed man dir (if needed),
# and make our pdfs from them.
#
# Has to be post instead of specialman when we use the tds.zip.
# Optional argument is directory where the man pages are as distributed
# on CTAN, else doc/*/$package or similar.
#
sub POST_do_man {
  my ($src_mandir) = @_;
  print "POST_do_man - src_mandir = $src_mandir\n";

  if ($src_mandir) {
    ; # explicitly specified, ok.
  } elsif (<$DEST/doc/man/man1/*.1>) {
    $src_mandir = "$DEST/doc/man/man1";
  } elsif (<$DEST/doc/*/$package/*.1>) {
    $src_mandir = "doc/*/$package";
  } elsif (<$DEST/doc/$package/*.1>) {
    $src_mandir = "doc/$package";
  } else {
    warn ("$0: POST_do_man: could not find man pages starting from " . `pwd`);
  }
  #
  my $mandest = "$TOPDEST/texmf-dist/doc/man/man1";
  print "POST_do_man - mv *.1 man pages from $src_mandir to $mandest\n";
  &xmkdir ($mandest);
  chomp (my $origdir = `pwd`);
  &xchdir ($DEST);
  &SYSTEM ("$MV $src_mandir/*.1 $mandest || echo '*** no *.1 in $src_mandir'")
    unless $src_mandir eq $mandest;
  &tl_man_to_pdf ();
  &xchdir ($origdir);

  # this is for luaotfload, which already has the .5 in the right place.
  # So we just have to rebuild.
  if (<$DEST/doc/man/man5/*.5>) {
    print "POST_do_man - found *.5 man pages in $DEST/doc/man/man5/\n";
    &tl_man_to_pdf ("5");
  }
}

sub POST_preserve_bin {
  print "POST_preserve_bin - binaries = @_\n";
  # The pmx package and others include binaries made from Build, and
  # normal scripts and support files. The latter can get updated without
  # needing to update the former, so we support it. Which means
  # preserving the binaries from Build. Hence this routine.
  #
  # The ctan2tds output will look weird since all the binaries will show
  # up as new files, since they are in <pkg>.<platform> subpackages. And
  # thus the svn run will get errors that they can't be added, also. But
  # since they don't actually need to be committed (that is the whole
  # point of preserving them), no harm done.
  #
  # If the last argument is an array ref, we take it as the list of
  # platforms to preserve (used for context); otherwise, do all platforms.
  #
  my @platforms;
  my $lastarg = $_[$#_];
  if (ref $lastarg && $lastarg =~ /.*ARRAY.*/) {
    @platforms = @$lastarg;
    print "\t got explicit platform list: @platforms\n";
    pop (@_);
  } else {
    chomp (@platforms = `cd $Master/bin && ls | grep -vw man`);
  }

  my (@binaries) = @_;
  for my $p (@platforms) {
    my $platdir = "$TOPDEST/bin/$p";
    &xmkdir ($platdir);
    my $exeext = &exeext ($p);
    for my $b (@binaries) {
      # use -a so we'll copy symlinks (context, mtxrun) without dereferencing.
      # but on cygwin, no exeext for symlinks.
      my $src = "$Master/bin/$p/$b";
      $src .= "$exeext" unless -l $src;
      &SYSTEM ("$CP -a $src $platdir/");
    }
  }

  # always going to need this anyway, may as well do it here.
  print "still POST_preserve_bin - doing POST_do_man\n";
  &POST_do_man ();
}

sub POST_rmsymlink {
  print "POST_rmsymlink ($package) - removing symlinks\n";
  &SYSTEM ("find $DEST -type l | xargs --no-run-if-empty $RM");
}

sub POST_deref_symlink {
  print "POST_deref_symlink ($package) - dereferencing symlinks\n";
  &SYSTEM ("find $DEST -type l | xargs deref-symlinks");
}


# Allow overrides.  In particular, CTAN can change some hashes to make
# packages with licenses that TL doesn't allow.
#
# Put the config file "ctan2tds-config.pl" in the dir from which you
# run this script, or better, set the environment variable "CTAN2TDS_CONFIG".
#
sub readconfig {
  my ($base,$dir,$ext) = fileparse ($0, '\.pl');

  my $configFileName = "$dir/$base-config.pl";
  $configFileName = $ENV{"CTAN2TDS_CONFIG"} || $configFileName;

  my $result;
  if (-f $configFileName) {
    my $err = "Error: CTAN config file $configFileName";
    $result = eval `cat $configFileName`; # like require, but no look in INC
    die "$err; evaluation in file failed: $@"
        if $@;
    die "$err; yielded result that is false"
        unless $result;
  } else {
    $result=1;
  }
  return $result;
}

# vim: set tabstop=8 shiftwidth=2 expandtab:
